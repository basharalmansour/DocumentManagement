/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICondolifeClient {
    getSites(request: GetSitesRequestDto): Observable<FileResponse>;
    getSiteDetails(siteId: string): Observable<FileResponse>;
    getZones(request: GetZonesRequestDto): Observable<FileResponse>;
    getZoneDetails(zoneId: string): Observable<FileResponse>;
    getBlocks(searchText: string): Observable<FileResponse>;
    getBlockDetails(blockId: string): Observable<FileResponse>;
    getUnits(request: GetUnitsRequestDto): Observable<FileResponse>;
    getUnitDetails(unitId: number): Observable<FileResponse>;
    getAreas(request: GetAreasRequestDto): Observable<FileResponse>;
    getAreaDetails(areaId: number): Observable<FileResponse>;
    getCompanies(request: GetCompaniesRequestDto): Observable<FileResponse>;
    getCompanyDetails(companyId: number): Observable<FileResponse>;
    getBrands(request: GetBrandsRequestDto): Observable<FileResponse>;
    getBrandDetails(brandId: number): Observable<FileResponse>;
    getDepartments(request: GetDepartmentsRequestDto): Observable<FileResponse>;
    getPersonnels(request: GetPersonnelsRequestDto): Observable<FileResponse>;
    getPersonnelDetails(personnelId: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class CondolifeClient implements ICondolifeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSites(request: GetSitesRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetSitesAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSites(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSites(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetSites(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getSiteDetails(siteId: string) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetSiteDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(siteId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSiteDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSiteDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetSiteDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getZones(request: GetZonesRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetZonesAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetZones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetZones(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetZones(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getZoneDetails(zoneId: string) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetZoneDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(zoneId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetZoneDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetZoneDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetZoneDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getBlocks(searchText: string) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetBlocksAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchText);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBlocks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBlocks(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBlocks(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getBlockDetails(blockId: string) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetBlockDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(blockId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBlockDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBlockDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBlockDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getUnits(request: GetUnitsRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetUnitsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUnits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUnits(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetUnits(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getUnitDetails(unitId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetUnitDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(unitId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUnitDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUnitDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetUnitDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getAreas(request: GetAreasRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetAreasAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAreas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAreas(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAreas(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getAreaDetails(areaId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetAreaDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(areaId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAreaDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAreaDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAreaDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getCompanies(request: GetCompaniesRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetCompaniesAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanies(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanies(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getCompanyDetails(companyId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetCompanyDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(companyId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getBrands(request: GetBrandsRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetBrandsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrands(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrands(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getBrandDetails(brandId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetBrandDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brandId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getDepartments(request: GetDepartmentsRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetDepartmentsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepartments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepartments(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDepartments(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getPersonnels(request: GetPersonnelsRequestDto) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetPersonnelsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnels(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnels(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getPersonnelDetails(personnelId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Condolife/GetPersonnelDetailsAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(personnelId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnelDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnelDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnelDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ICustomerClient {
    sendOtp(sendOtpToCustomerCommand: SendOtpToCustomerCommand): Observable<SendOtpMessageResult>;
}

@Injectable({
    providedIn: 'root'
})
export class CustomerClient implements ICustomerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    sendOtp(sendOtpToCustomerCommand: SendOtpToCustomerCommand) : Observable<SendOtpMessageResult> {
        let url_ = this.baseUrl + "/api/Customer/SendOtpMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sendOtpToCustomerCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendOtp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendOtp(<any>response_);
                } catch (e) {
                    return <Observable<SendOtpMessageResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SendOtpMessageResult>><any>_observableThrow(response_);
        }));
    }

    protected processSendOtp(response: HttpResponseBase): Observable<SendOtpMessageResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SendOtpMessageResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SendOtpMessageResult>(<any>null);
    }
}

export interface IVehicleClient {
    createVehicle(request: CreateVehicleTemplateCommand): Observable<ApplicationResponseOfInteger>;
    getVehicles(pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto>;
    getVehicleById(id: number | undefined): Observable<ApplicationResponseOfVehicleTemplateDto>;
    editVehicle(request: EditVehicleTemplateCommand): Observable<ApplicationResponseOfInteger>;
    removeVehicle(request: RemoveVehicleTemplateCommand): Observable<ApplicationResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class VehicleClient implements IVehicleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createVehicle(request: CreateVehicleTemplateCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/Vehicle/CreateVehicle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateVehicle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateVehicle(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreateVehicle(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getVehicles(pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto> {
        let url_ = this.baseUrl + "/api/Vehicle/GetVehicles?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicles(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicles(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto>(<any>null);
    }

    getVehicleById(id: number | undefined) : Observable<ApplicationResponseOfVehicleTemplateDto> {
        let url_ = this.baseUrl + "/api/Vehicle/GetVehicle?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfVehicleTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfVehicleTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleById(response: HttpResponseBase): Observable<ApplicationResponseOfVehicleTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfVehicleTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfVehicleTemplateDto>(<any>null);
    }

    editVehicle(request: EditVehicleTemplateCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/Vehicle/EditVehicle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditVehicle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditVehicle(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditVehicle(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    removeVehicle(request: RemoveVehicleTemplateCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Vehicle/RemoveVehicle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveVehicle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveVehicle(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveVehicle(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }
}

export interface IUserGroupClient {
    createUserGroup(request: CreateUserGroupCommand): Observable<ApplicationResponseOfInteger>;
    getUserGroups(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfGetUserGroupDto>;
    getUserGroupById(id: number | undefined): Observable<ApplicationResponseOfGetUserGroupDto>;
    editUserGroup(request: EditUserGroupCommand): Observable<ApplicationResponseOfInteger>;
    deleteUserGroup(request: RemoveUserGroupCommand): Observable<ApplicationResponseOfBoolean>;
    getUserGroupApprovers(id: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto>;
    getPersonnelRoles(personnelId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfRole>;
}

@Injectable({
    providedIn: 'root'
})
export class UserGroupClient implements IUserGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createUserGroup(request: CreateUserGroupCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/UserGroup/CreateUserGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUserGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUserGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUserGroup(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getUserGroups(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfGetUserGroupDto> {
        let url_ = this.baseUrl + "/api/UserGroup/GetUserGroups?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserGroups(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfGetUserGroupDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfGetUserGroupDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserGroups(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfGetUserGroupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfGetUserGroupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfGetUserGroupDto>(<any>null);
    }

    getUserGroupById(id: number | undefined) : Observable<ApplicationResponseOfGetUserGroupDto> {
        let url_ = this.baseUrl + "/api/UserGroup/GetUserGroupById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserGroupById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserGroupById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfGetUserGroupDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfGetUserGroupDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserGroupById(response: HttpResponseBase): Observable<ApplicationResponseOfGetUserGroupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfGetUserGroupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfGetUserGroupDto>(<any>null);
    }

    editUserGroup(request: EditUserGroupCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/UserGroup/EditUserGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditUserGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditUserGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditUserGroup(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    deleteUserGroup(request: RemoveUserGroupCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/UserGroup/DeleteUserGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUserGroup(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    getUserGroupApprovers(id: number | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto> {
        let url_ = this.baseUrl + "/api/UserGroup/GetUserGroupApprovers?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserGroupApprovers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserGroupApprovers(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserGroupApprovers(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfUserGroupApproversDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfUserGroupApproversDto>(<any>null);
    }

    getPersonnelRoles(personnelId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfRole> {
        let url_ = this.baseUrl + "/api/UserGroup/GetPersonnelRoles?";
        if (personnelId === null)
            throw new Error("The parameter 'personnelId' cannot be null.");
        else if (personnelId !== undefined)
            url_ += "PersonnelId=" + encodeURIComponent("" + personnelId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnelRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnelRoles(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfRole>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnelRoles(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfRole> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfRole.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfRole>(<any>null);
    }
}

export interface IServiceCategoryClient {
    createServiceCategory(request: CreateServiceCategoryCommand): Observable<ApplicationResponseOfInteger>;
    getServiceCategories(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto>;
    getServiceCategoryById(id: number | undefined): Observable<ApplicationResponseOfServiceCategoryDto>;
    editServiceCategory(request: EditServiceCategoryCommand): Observable<ApplicationResponseOfInteger>;
    deleteServiceCategory(request: RemoveServiceCategoryCommand): Observable<ApplicationResponseOfBoolean>;
    getPersonnelCategories(presonnelId: number | undefined): Observable<ApplicationResponseOfUserGroupApproversDto>;
    getPersonnelRoles(personnelId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfRole>;
}

@Injectable({
    providedIn: 'root'
})
export class ServiceCategoryClient implements IServiceCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createServiceCategory(request: CreateServiceCategoryCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/ServiceCategory/CreateServiceCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateServiceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateServiceCategory(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreateServiceCategory(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getServiceCategories(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto> {
        let url_ = this.baseUrl + "/api/ServiceCategory/GetServiceCategories?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServiceCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServiceCategories(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetServiceCategories(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto>(<any>null);
    }

    getServiceCategoryById(id: number | undefined) : Observable<ApplicationResponseOfServiceCategoryDto> {
        let url_ = this.baseUrl + "/api/ServiceCategory/ViewServiceCategoryById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServiceCategoryById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServiceCategoryById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfServiceCategoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfServiceCategoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetServiceCategoryById(response: HttpResponseBase): Observable<ApplicationResponseOfServiceCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfServiceCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfServiceCategoryDto>(<any>null);
    }

    editServiceCategory(request: EditServiceCategoryCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/ServiceCategory/EditServiceCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditServiceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditServiceCategory(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditServiceCategory(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    deleteServiceCategory(request: RemoveServiceCategoryCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/ServiceCategory/DeleteServiceCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteServiceCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteServiceCategory(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteServiceCategory(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    getPersonnelCategories(presonnelId: number | undefined) : Observable<ApplicationResponseOfUserGroupApproversDto> {
        let url_ = this.baseUrl + "/api/ServiceCategory/GetPersonnelCategories?";
        if (presonnelId === null)
            throw new Error("The parameter 'presonnelId' cannot be null.");
        else if (presonnelId !== undefined)
            url_ += "PresonnelId=" + encodeURIComponent("" + presonnelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnelCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnelCategories(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfUserGroupApproversDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfUserGroupApproversDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnelCategories(response: HttpResponseBase): Observable<ApplicationResponseOfUserGroupApproversDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfUserGroupApproversDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfUserGroupApproversDto>(<any>null);
    }

    getPersonnelRoles(personnelId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfRole> {
        let url_ = this.baseUrl + "/api/ServiceCategory/GetPersonnelRoles?";
        if (personnelId === null)
            throw new Error("The parameter 'personnelId' cannot be null.");
        else if (personnelId !== undefined)
            url_ += "PersonnelId=" + encodeURIComponent("" + personnelId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnelRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnelRoles(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfRole>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfRole>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnelRoles(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfRole> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfRole.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfRole>(<any>null);
    }
}

export interface IPersonnelClient {
    getPersonnels(roles: Role[] | null | undefined, searchText: string | null | undefined, departmentId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto>;
}

@Injectable({
    providedIn: 'root'
})
export class PersonnelClient implements IPersonnelClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPersonnels(roles: Role[] | null | undefined, searchText: string | null | undefined, departmentId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto> {
        let url_ = this.baseUrl + "/api/Personnel/GetPersonnels?";
        if (roles !== undefined && roles !== null)
            roles && roles.forEach(item => { url_ += "Roles=" + encodeURIComponent("" + item) + "&"; });
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (departmentId === null)
            throw new Error("The parameter 'departmentId' cannot be null.");
        else if (departmentId !== undefined)
            url_ += "DepartmentId=" + encodeURIComponent("" + departmentId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPersonnels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPersonnels(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPersonnels(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto>(<any>null);
    }
}

export interface IPresenceClient {
    getAreaDocuments(request: GetAreaDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getBlockDocuments(request: GetBlockDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getBrandDocuments(request: GetBrandDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getCompanyDocuments(request: GetCompanyDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getSiteDocuments(request: GetSiteDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getUnitDocuments(request: GetUnitDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getZoneDocuments(request: GetZoneDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    createAreaDocuments(request: CreateAreaDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createBlockDocuments(request: CreateBlockDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createBrandDocuments(request: CreateBrandDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createCompanyDocuments(request: CreateCompanyDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createSiteDocuments(request: CreateSiteDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createUnitDocuments(request: CreateUnitDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    createZoneDocuments(request: CreateZoneDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeAreaDocuments(request: RemoveAreaDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeBlockDocuments(request: RemoveBlockDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeBrandDocuments(request: RemoveBrandDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeCompanyDocuments(request: RemoveCompanyDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeSiteDocuments(request: RemoveSiteDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeUnitDocuments(request: RemoveUnitDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
    removeZoneDocuments(request: RemoveZoneDocumentsCommand): Observable<ApplicationResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class PresenceClient implements IPresenceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAreaDocuments(request: GetAreaDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetAreaDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAreaDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAreaDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAreaDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getBlockDocuments(request: GetBlockDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetBlockDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBlockDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBlockDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBlockDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getBrandDocuments(request: GetBrandDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetBrandDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBrandDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getCompanyDocuments(request: GetCompanyDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetCompanyDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getSiteDocuments(request: GetSiteDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetSiteDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSiteDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSiteDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSiteDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getUnitDocuments(request: GetUnitDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetUnitDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUnitDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUnitDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUnitDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getZoneDocuments(request: GetZoneDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/Presence/GetZoneDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetZoneDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetZoneDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetZoneDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    createAreaDocuments(request: CreateAreaDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateAreaDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAreaDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAreaDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateAreaDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createBlockDocuments(request: CreateBlockDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateBlockDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBlockDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBlockDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateBlockDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createBrandDocuments(request: CreateBrandDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateBrandDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBrandDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBrandDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateBrandDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createCompanyDocuments(request: CreateCompanyDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateCompanyDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCompanyDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCompanyDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCompanyDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createSiteDocuments(request: CreateSiteDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateSiteDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSiteDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSiteDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateSiteDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createUnitDocuments(request: CreateUnitDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateUnitDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUnitDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUnitDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUnitDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    createZoneDocuments(request: CreateZoneDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/CreateZoneDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateZoneDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateZoneDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processCreateZoneDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeAreaDocuments(request: RemoveAreaDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveAreaDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveAreaDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveAreaDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveAreaDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeBlockDocuments(request: RemoveBlockDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveBlockDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveBlockDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveBlockDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveBlockDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeBrandDocuments(request: RemoveBrandDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveBrandDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveBrandDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveBrandDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveBrandDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeCompanyDocuments(request: RemoveCompanyDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveCompanyDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCompanyDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCompanyDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveCompanyDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeSiteDocuments(request: RemoveSiteDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveSiteDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveSiteDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveSiteDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveSiteDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeUnitDocuments(request: RemoveUnitDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveUnitDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveUnitDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveUnitDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveUnitDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removeZoneDocuments(request: RemoveZoneDocumentsCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Presence/RemoveZoneDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveZoneDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveZoneDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveZoneDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }
}

export interface IPresenceGroupClient {
    createPresenceGroup(request: CreatePresenceGroupCommand): Observable<ApplicationResponseOfInteger>;
    getPresenceGroups(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto>;
    getPresenceGroupById(id: number | undefined): Observable<ApplicationResponseOfPresenceGroupDto>;
    editPresenceGroup(request: EditPresenceGroupCommand): Observable<ApplicationResponseOfInteger>;
    removePresenceGroup(request: RemovePresenceGroupCommand): Observable<ApplicationResponseOfBoolean>;
    getPresenceGroupDocuments(request: GetPresenceGroupDocumentsQuery): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    addPresenceGroupDocument(presenceGroupId: number | undefined, documentTemplateId: number | undefined): Observable<ApplicationResponseOfBoolean>;
    removePresenceGroupDocument(request: RemovePresenceGroupDocumentCommand): Observable<ApplicationResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class PresenceGroupClient implements IPresenceGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createPresenceGroup(request: CreatePresenceGroupCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/PresenceGroup/CreatePresenceGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePresenceGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePresenceGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePresenceGroup(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getPresenceGroups(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto> {
        let url_ = this.baseUrl + "/api/PresenceGroup/GetPresenceGroups?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPresenceGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPresenceGroups(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPresenceGroups(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto>(<any>null);
    }

    getPresenceGroupById(id: number | undefined) : Observable<ApplicationResponseOfPresenceGroupDto> {
        let url_ = this.baseUrl + "/api/PresenceGroup/GetPresenceGroupById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPresenceGroupById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPresenceGroupById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfPresenceGroupDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfPresenceGroupDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPresenceGroupById(response: HttpResponseBase): Observable<ApplicationResponseOfPresenceGroupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfPresenceGroupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfPresenceGroupDto>(<any>null);
    }

    editPresenceGroup(request: EditPresenceGroupCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/PresenceGroup/EditPresenceGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditPresenceGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditPresenceGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditPresenceGroup(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    removePresenceGroup(request: RemovePresenceGroupCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/PresenceGroup/RemovePresenceGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemovePresenceGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovePresenceGroup(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemovePresenceGroup(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    getPresenceGroupDocuments(request: GetPresenceGroupDocumentsQuery) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/PresenceGroup/GetPresenceGroupDocuments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPresenceGroupDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPresenceGroupDocuments(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPresenceGroupDocuments(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    addPresenceGroupDocument(presenceGroupId: number | undefined, documentTemplateId: number | undefined) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/PresenceGroup/AddPresenceGroupDocument?";
        if (presenceGroupId === null)
            throw new Error("The parameter 'presenceGroupId' cannot be null.");
        else if (presenceGroupId !== undefined)
            url_ += "PresenceGroupId=" + encodeURIComponent("" + presenceGroupId) + "&";
        if (documentTemplateId === null)
            throw new Error("The parameter 'documentTemplateId' cannot be null.");
        else if (documentTemplateId !== undefined)
            url_ += "DocumentTemplateId=" + encodeURIComponent("" + documentTemplateId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPresenceGroupDocument(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPresenceGroupDocument(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddPresenceGroupDocument(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }

    removePresenceGroupDocument(request: RemovePresenceGroupDocumentCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/PresenceGroup/RemovePresenceGroupDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemovePresenceGroupDocument(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovePresenceGroupDocument(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processRemovePresenceGroupDocument(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }
}

export interface IFormClient {
    createForm(request: CreateFormCommand): Observable<ApplicationResponseOfInteger>;
    getForms(pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfBasicFormDto>;
    getFormById(id: number | undefined): Observable<ApplicationResponseOfFormDto>;
    editForm(request: EditFormCommand): Observable<ApplicationResponseOfInteger>;
    deleteForm(request: RemoveFormCommand): Observable<ApplicationResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class FormClient implements IFormClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createForm(request: CreateFormCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/Form/CreateForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateForm(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreateForm(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getForms(pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfBasicFormDto> {
        let url_ = this.baseUrl + "/api/Form/GetForms?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForms(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicFormDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicFormDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetForms(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicFormDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicFormDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicFormDto>(<any>null);
    }

    getFormById(id: number | undefined) : Observable<ApplicationResponseOfFormDto> {
        let url_ = this.baseUrl + "/api/Form/GetFormById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFormById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFormById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfFormDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfFormDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFormById(response: HttpResponseBase): Observable<ApplicationResponseOfFormDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfFormDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfFormDto>(<any>null);
    }

    editForm(request: EditFormCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/Form/EditForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditForm(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditForm(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    deleteForm(request: RemoveFormCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Form/DeleteForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteForm(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteForm(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }
}

export interface IDocumentTemplateClient {
    createDocumentTemplate(request: CreateDocumentTemplateCommand): Observable<ApplicationResponseOfInteger>;
    getDocumentTemplates(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>;
    getDocumentTemplateById(id: number | undefined): Observable<ApplicationResponseOfGetDocumentTemplateDto>;
    getDocumentTemplateTypes(pageNumber: number | undefined, pageSize: number | undefined): Observable<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString>;
    editDocumentTemplate(request: EditDocumentTemplateCommand): Observable<ApplicationResponseOfInteger>;
    deleteDocumentTemplate(request: RemoveDocumentTemplateCommand): Observable<ApplicationResponseOfBoolean>;
}

@Injectable({
    providedIn: 'root'
})
export class DocumentTemplateClient implements IDocumentTemplateClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createDocumentTemplate(request: CreateDocumentTemplateCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/CreateDocumentTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDocumentTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDocumentTemplate(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processCreateDocumentTemplate(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    getDocumentTemplates(searchText: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/GetDocumentTemplates?";
        if (searchText !== undefined && searchText !== null)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDocumentTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDocumentTemplates(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDocumentTemplates(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto>(<any>null);
    }

    getDocumentTemplateById(id: number | undefined) : Observable<ApplicationResponseOfGetDocumentTemplateDto> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/GetDocumentTemplateById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDocumentTemplateById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDocumentTemplateById(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfGetDocumentTemplateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfGetDocumentTemplateDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDocumentTemplateById(response: HttpResponseBase): Observable<ApplicationResponseOfGetDocumentTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfGetDocumentTemplateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfGetDocumentTemplateDto>(<any>null);
    }

    getDocumentTemplateTypes(pageNumber: number | undefined, pageSize: number | undefined) : Observable<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/GetDocumentTemplateTypes?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDocumentTemplateTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDocumentTemplateTypes(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString>><any>_observableThrow(response_);
        }));
    }

    protected processGetDocumentTemplateTypes(response: HttpResponseBase): Observable<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString>(<any>null);
    }

    editDocumentTemplate(request: EditDocumentTemplateCommand) : Observable<ApplicationResponseOfInteger> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/EditDocumentTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDocumentTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDocumentTemplate(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfInteger>><any>_observableThrow(response_);
        }));
    }

    protected processEditDocumentTemplate(response: HttpResponseBase): Observable<ApplicationResponseOfInteger> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfInteger.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfInteger>(<any>null);
    }

    deleteDocumentTemplate(request: RemoveDocumentTemplateCommand) : Observable<ApplicationResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/DocumentTemplate/DeleteDocumentTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDocumentTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDocumentTemplate(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDocumentTemplate(response: HttpResponseBase): Observable<ApplicationResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationResponseOfBoolean>(<any>null);
    }
}

export class GetSitesRequestDto implements IGetSitesRequestDto {
    searchText?: string | undefined;

    constructor(data?: IGetSitesRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchText = _data["searchText"];
        }
    }

    static fromJS(data: any): GetSitesRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetSitesRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchText"] = this.searchText;
        return data; 
    }
}

export interface IGetSitesRequestDto {
    searchText?: string | undefined;
}

export class GetZonesRequestDto implements IGetZonesRequestDto {
    name?: string | undefined;

    constructor(data?: IGetZonesRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetZonesRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetZonesRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetZonesRequestDto {
    name?: string | undefined;
}

export class GetUnitsRequestDto implements IGetUnitsRequestDto {
    unitFilter?: { [key in keyof typeof UnitFilter]?: string; } | undefined;
    unitType?: number | undefined;
    unitTypeSub?: number | undefined;
    unitTypeCategory?: number | undefined;
    unitTypeCode?: number | undefined;
    representativeAreaId?: string | undefined;
    isActive?: boolean;
    siteId?: string | undefined;
    notIncludeZoneId?: string | undefined;
    notIncludeBlockId?: string | undefined;

    constructor(data?: IGetUnitsRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["unitFilter"]) {
                this.unitFilter = {} as any;
                for (let key in _data["unitFilter"]) {
                    if (_data["unitFilter"].hasOwnProperty(key))
                        (<any>this.unitFilter)![key] = _data["unitFilter"][key];
                }
            }
            this.unitType = _data["unitType"];
            this.unitTypeSub = _data["unitTypeSub"];
            this.unitTypeCategory = _data["unitTypeCategory"];
            this.unitTypeCode = _data["unitTypeCode"];
            this.representativeAreaId = _data["representativeAreaId"];
            this.isActive = _data["isActive"];
            this.siteId = _data["siteId"];
            this.notIncludeZoneId = _data["notIncludeZoneId"];
            this.notIncludeBlockId = _data["notIncludeBlockId"];
        }
    }

    static fromJS(data: any): GetUnitsRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUnitsRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.unitFilter) {
            data["unitFilter"] = {};
            for (let key in this.unitFilter) {
                if (this.unitFilter.hasOwnProperty(key))
                    (<any>data["unitFilter"])[key] = this.unitFilter[key];
            }
        }
        data["unitType"] = this.unitType;
        data["unitTypeSub"] = this.unitTypeSub;
        data["unitTypeCategory"] = this.unitTypeCategory;
        data["unitTypeCode"] = this.unitTypeCode;
        data["representativeAreaId"] = this.representativeAreaId;
        data["isActive"] = this.isActive;
        data["siteId"] = this.siteId;
        data["notIncludeZoneId"] = this.notIncludeZoneId;
        data["notIncludeBlockId"] = this.notIncludeBlockId;
        return data; 
    }
}

export interface IGetUnitsRequestDto {
    unitFilter?: { [key in keyof typeof UnitFilter]?: string; } | undefined;
    unitType?: number | undefined;
    unitTypeSub?: number | undefined;
    unitTypeCategory?: number | undefined;
    unitTypeCode?: number | undefined;
    representativeAreaId?: string | undefined;
    isActive?: boolean;
    siteId?: string | undefined;
    notIncludeZoneId?: string | undefined;
    notIncludeBlockId?: string | undefined;
}

export enum UnitFilter {
    Zones = 2,
    Block = 3,
    Respresenter = 4,
    UnitNo = 7,
    DoorNumber = 9,
    UnitType = 10,
    UnitName = 11,
    UnitTypeSub = 12,
}

export class GetAreasRequestDto implements IGetAreasRequestDto {
    name?: string | undefined;
    isActive?: boolean | undefined;
    isRent?: boolean | undefined;
    areaTypeId?: (number | undefined)[] | undefined;
    siteId?: string | undefined;
    notIncludeZoneId?: string | undefined;
    notIncludeBlockId?: string | undefined;
    notIncludeUnitId?: number | undefined;
    notIncludeAreaId?: number | undefined;

    constructor(data?: IGetAreasRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isActive = _data["isActive"];
            this.isRent = _data["isRent"];
            if (Array.isArray(_data["areaTypeId"])) {
                this.areaTypeId = [] as any;
                for (let item of _data["areaTypeId"])
                    this.areaTypeId!.push(item);
            }
            this.siteId = _data["siteId"];
            this.notIncludeZoneId = _data["notIncludeZoneId"];
            this.notIncludeBlockId = _data["notIncludeBlockId"];
            this.notIncludeUnitId = _data["notIncludeUnitId"];
            this.notIncludeAreaId = _data["notIncludeAreaId"];
        }
    }

    static fromJS(data: any): GetAreasRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAreasRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        data["isRent"] = this.isRent;
        if (Array.isArray(this.areaTypeId)) {
            data["areaTypeId"] = [];
            for (let item of this.areaTypeId)
                data["areaTypeId"].push(item);
        }
        data["siteId"] = this.siteId;
        data["notIncludeZoneId"] = this.notIncludeZoneId;
        data["notIncludeBlockId"] = this.notIncludeBlockId;
        data["notIncludeUnitId"] = this.notIncludeUnitId;
        data["notIncludeAreaId"] = this.notIncludeAreaId;
        return data; 
    }
}

export interface IGetAreasRequestDto {
    name?: string | undefined;
    isActive?: boolean | undefined;
    isRent?: boolean | undefined;
    areaTypeId?: (number | undefined)[] | undefined;
    siteId?: string | undefined;
    notIncludeZoneId?: string | undefined;
    notIncludeBlockId?: string | undefined;
    notIncludeUnitId?: number | undefined;
    notIncludeAreaId?: number | undefined;
}

export class GetCompaniesRequestDto implements IGetCompaniesRequestDto {
    companyFilter?: { [key in keyof typeof CompanyFilter]?: string; } | undefined;
    isFrontDeskAdded?: boolean | undefined;
    isActive?: boolean;

    constructor(data?: IGetCompaniesRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["companyFilter"]) {
                this.companyFilter = {} as any;
                for (let key in _data["companyFilter"]) {
                    if (_data["companyFilter"].hasOwnProperty(key))
                        (<any>this.companyFilter)![key] = _data["companyFilter"][key];
                }
            }
            this.isFrontDeskAdded = _data["isFrontDeskAdded"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetCompaniesRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCompaniesRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.companyFilter) {
            data["companyFilter"] = {};
            for (let key in this.companyFilter) {
                if (this.companyFilter.hasOwnProperty(key))
                    (<any>data["companyFilter"])[key] = this.companyFilter[key];
            }
        }
        data["isFrontDeskAdded"] = this.isFrontDeskAdded;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetCompaniesRequestDto {
    companyFilter?: { [key in keyof typeof CompanyFilter]?: string; } | undefined;
    isFrontDeskAdded?: boolean | undefined;
    isActive?: boolean;
}

export enum CompanyFilter {
    CompanyName = 1,
    CompanyTaxNo = 2,
    CompanyResponsibleName = 3,
}

export class GetBrandsRequestDto implements IGetBrandsRequestDto {
    brandFilter?: { [key in keyof typeof BrandFilter]?: string; } | undefined;
    brandType?: (number | undefined)[] | undefined;
    companyName?: string | undefined;
    isFrontDeskAdded?: boolean | undefined;
    isActive?: boolean;

    constructor(data?: IGetBrandsRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["brandFilter"]) {
                this.brandFilter = {} as any;
                for (let key in _data["brandFilter"]) {
                    if (_data["brandFilter"].hasOwnProperty(key))
                        (<any>this.brandFilter)![key] = _data["brandFilter"][key];
                }
            }
            if (Array.isArray(_data["brandType"])) {
                this.brandType = [] as any;
                for (let item of _data["brandType"])
                    this.brandType!.push(item);
            }
            this.companyName = _data["companyName"];
            this.isFrontDeskAdded = _data["isFrontDeskAdded"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetBrandsRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBrandsRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.brandFilter) {
            data["brandFilter"] = {};
            for (let key in this.brandFilter) {
                if (this.brandFilter.hasOwnProperty(key))
                    (<any>data["brandFilter"])[key] = this.brandFilter[key];
            }
        }
        if (Array.isArray(this.brandType)) {
            data["brandType"] = [];
            for (let item of this.brandType)
                data["brandType"].push(item);
        }
        data["companyName"] = this.companyName;
        data["isFrontDeskAdded"] = this.isFrontDeskAdded;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetBrandsRequestDto {
    brandFilter?: { [key in keyof typeof BrandFilter]?: string; } | undefined;
    brandType?: (number | undefined)[] | undefined;
    companyName?: string | undefined;
    isFrontDeskAdded?: boolean | undefined;
    isActive?: boolean;
}

export enum BrandFilter {
    BrandName = 1,
    BrandType = 2,
}

export class GetDepartmentsRequestDto implements IGetDepartmentsRequestDto {
    siteId?: string;
    isActive?: boolean;

    constructor(data?: IGetDepartmentsRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GetDepartmentsRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IGetDepartmentsRequestDto {
    siteId?: string;
    isActive?: boolean;
}

export class GetPersonnelsRequestDto implements IGetPersonnelsRequestDto {
    filterType?: EmployeeFilterType;
    searchString?: string | undefined;
    siteWorkUnitId?: number | undefined;
    siteWorkUnitIds?: (number | undefined)[] | undefined;
    employeeIdList?: number[] | undefined;

    constructor(data?: IGetPersonnelsRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filterType = _data["filterType"];
            this.searchString = _data["searchString"];
            this.siteWorkUnitId = _data["siteWorkUnitId"];
            if (Array.isArray(_data["siteWorkUnitIds"])) {
                this.siteWorkUnitIds = [] as any;
                for (let item of _data["siteWorkUnitIds"])
                    this.siteWorkUnitIds!.push(item);
            }
            if (Array.isArray(_data["employeeIdList"])) {
                this.employeeIdList = [] as any;
                for (let item of _data["employeeIdList"])
                    this.employeeIdList!.push(item);
            }
        }
    }

    static fromJS(data: any): GetPersonnelsRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPersonnelsRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterType"] = this.filterType;
        data["searchString"] = this.searchString;
        data["siteWorkUnitId"] = this.siteWorkUnitId;
        if (Array.isArray(this.siteWorkUnitIds)) {
            data["siteWorkUnitIds"] = [];
            for (let item of this.siteWorkUnitIds)
                data["siteWorkUnitIds"].push(item);
        }
        if (Array.isArray(this.employeeIdList)) {
            data["employeeIdList"] = [];
            for (let item of this.employeeIdList)
                data["employeeIdList"].push(item);
        }
        return data; 
    }
}

export interface IGetPersonnelsRequestDto {
    filterType?: EmployeeFilterType;
    searchString?: string | undefined;
    siteWorkUnitId?: number | undefined;
    siteWorkUnitIds?: (number | undefined)[] | undefined;
    employeeIdList?: number[] | undefined;
}

export enum EmployeeFilterType {
    Active = 1,
    Passive = 2,
    All = 3,
}

export class SendOtpMessageResult implements ISendOtpMessageResult {
    result?: boolean;

    constructor(data?: ISendOtpMessageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): SendOtpMessageResult {
        data = typeof data === 'object' ? data : {};
        let result = new SendOtpMessageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface ISendOtpMessageResult {
    result?: boolean;
}

export class ErrorResponseModel implements IErrorResponseModel {
    message?: string | undefined;

    constructor(data?: IErrorResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ErrorResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IErrorResponseModel {
    message?: string | undefined;
}

export class SendOtpToCustomerCommand implements ISendOtpToCustomerCommand {
    token?: string | undefined;
    customerId?: number;
    phoneNumber?: string | undefined;

    constructor(data?: ISendOtpToCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.customerId = _data["customerId"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): SendOtpToCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendOtpToCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["customerId"] = this.customerId;
        data["phoneNumber"] = this.phoneNumber;
        return data; 
    }
}

export interface ISendOtpToCustomerCommand {
    token?: string | undefined;
    customerId?: number;
    phoneNumber?: string | undefined;
}

export class ApplicationResponseOfInteger implements IApplicationResponseOfInteger {
    isError?: boolean;
    message?: string | undefined;
    result?: number;

    constructor(data?: IApplicationResponseOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): ApplicationResponseOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result;
        return data; 
    }
}

export interface IApplicationResponseOfInteger {
    isError?: boolean;
    message?: string | undefined;
    result?: number;
}

export class CreateVehicleTemplateCommand implements ICreateVehicleTemplateCommand {
    name?: LanguageString | undefined;
    isNeedDriver?: boolean;
    vehicleTemplateDocuments?: number[] | undefined;
    driverDocuments?: number[] | undefined;

    constructor(data?: ICreateVehicleTemplateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.isNeedDriver = _data["isNeedDriver"];
            if (Array.isArray(_data["vehicleTemplateDocuments"])) {
                this.vehicleTemplateDocuments = [] as any;
                for (let item of _data["vehicleTemplateDocuments"])
                    this.vehicleTemplateDocuments!.push(item);
            }
            if (Array.isArray(_data["driverDocuments"])) {
                this.driverDocuments = [] as any;
                for (let item of _data["driverDocuments"])
                    this.driverDocuments!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateVehicleTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["isNeedDriver"] = this.isNeedDriver;
        if (Array.isArray(this.vehicleTemplateDocuments)) {
            data["vehicleTemplateDocuments"] = [];
            for (let item of this.vehicleTemplateDocuments)
                data["vehicleTemplateDocuments"].push(item);
        }
        if (Array.isArray(this.driverDocuments)) {
            data["driverDocuments"] = [];
            for (let item of this.driverDocuments)
                data["driverDocuments"].push(item);
        }
        return data; 
    }
}

export interface ICreateVehicleTemplateCommand {
    name?: LanguageString | undefined;
    isNeedDriver?: boolean;
    vehicleTemplateDocuments?: number[] | undefined;
    driverDocuments?: number[] | undefined;
}

export class LanguageString implements ILanguageString {

    [key: string]: string | any; 

    constructor(data?: ILanguageString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): LanguageString {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data; 
    }
}

export interface ILanguageString {

    [key: string]: string | any; 
}

export enum LanguageCode {
    Tr = 1,
    En = 2,
}

export class ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto implements IApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicVehicleTemplateDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfBasicVehicleTemplateDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfBasicVehicleTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicVehicleTemplateDto | undefined;
}

export class TableResponseModelOfBasicVehicleTemplateDto implements ITableResponseModelOfBasicVehicleTemplateDto {
    data?: BasicVehicleTemplateDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfBasicVehicleTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BasicVehicleTemplateDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfBasicVehicleTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfBasicVehicleTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfBasicVehicleTemplateDto {
    data?: BasicVehicleTemplateDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class BasicVehicleTemplateDto implements IBasicVehicleTemplateDto {
    id?: string | undefined;
    name?: LanguageString | undefined;

    constructor(data?: IBasicVehicleTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BasicVehicleTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicVehicleTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBasicVehicleTemplateDto {
    id?: string | undefined;
    name?: LanguageString | undefined;
}

export class ApplicationResponseOfVehicleTemplateDto implements IApplicationResponseOfVehicleTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: VehicleTemplateDto | undefined;

    constructor(data?: IApplicationResponseOfVehicleTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? VehicleTemplateDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfVehicleTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfVehicleTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfVehicleTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: VehicleTemplateDto | undefined;
}

export class VehicleTemplateDto extends BasicVehicleTemplateDto implements IVehicleTemplateDto {
    vehicleDocuments?: VehicleTemplatesDocumentDto[] | undefined;
    driverDocuments?: VehicleTemplateDriverDocumentsDto[] | undefined;

    constructor(data?: IVehicleTemplateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["vehicleDocuments"])) {
                this.vehicleDocuments = [] as any;
                for (let item of _data["vehicleDocuments"])
                    this.vehicleDocuments!.push(VehicleTemplatesDocumentDto.fromJS(item));
            }
            if (Array.isArray(_data["driverDocuments"])) {
                this.driverDocuments = [] as any;
                for (let item of _data["driverDocuments"])
                    this.driverDocuments!.push(VehicleTemplateDriverDocumentsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vehicleDocuments)) {
            data["vehicleDocuments"] = [];
            for (let item of this.vehicleDocuments)
                data["vehicleDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.driverDocuments)) {
            data["driverDocuments"] = [];
            for (let item of this.driverDocuments)
                data["driverDocuments"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IVehicleTemplateDto extends IBasicVehicleTemplateDto {
    vehicleDocuments?: VehicleTemplatesDocumentDto[] | undefined;
    driverDocuments?: VehicleTemplateDriverDocumentsDto[] | undefined;
}

export class VehicleTemplatesDocumentDto implements IVehicleTemplatesDocumentDto {
    documentTemplateId?: number;
    vehicleTemplateId?: number;

    constructor(data?: IVehicleTemplatesDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.vehicleTemplateId = _data["vehicleTemplateId"];
        }
    }

    static fromJS(data: any): VehicleTemplatesDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplatesDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        return data; 
    }
}

export interface IVehicleTemplatesDocumentDto {
    documentTemplateId?: number;
    vehicleTemplateId?: number;
}

export class VehicleTemplateDriverDocumentsDto implements IVehicleTemplateDriverDocumentsDto {
    documentTemplateId?: number;
    vehicleTemplateId?: number;

    constructor(data?: IVehicleTemplateDriverDocumentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.vehicleTemplateId = _data["vehicleTemplateId"];
        }
    }

    static fromJS(data: any): VehicleTemplateDriverDocumentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplateDriverDocumentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        return data; 
    }
}

export interface IVehicleTemplateDriverDocumentsDto {
    documentTemplateId?: number;
    vehicleTemplateId?: number;
}

export class EditVehicleTemplateCommand extends CreateVehicleTemplateCommand implements IEditVehicleTemplateCommand {
    id?: number;

    constructor(data?: IEditVehicleTemplateCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditVehicleTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditVehicleTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditVehicleTemplateCommand extends ICreateVehicleTemplateCommand {
    id?: number;
}

export class ApplicationResponseOfBoolean implements IApplicationResponseOfBoolean {
    isError?: boolean;
    message?: string | undefined;
    result?: boolean;

    constructor(data?: IApplicationResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): ApplicationResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result;
        return data; 
    }
}

export interface IApplicationResponseOfBoolean {
    isError?: boolean;
    message?: string | undefined;
    result?: boolean;
}

export class RemoveVehicleTemplateCommand implements IRemoveVehicleTemplateCommand {
    id?: number;

    constructor(data?: IRemoveVehicleTemplateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveVehicleTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveVehicleTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveVehicleTemplateCommand {
    id?: number;
}

export class CreateUserGroupCommand implements ICreateUserGroupCommand {
    name?: LanguageString | undefined;
    personnelIds?: number[] | undefined;

    constructor(data?: ICreateUserGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            if (Array.isArray(_data["personnelIds"])) {
                this.personnelIds = [] as any;
                for (let item of _data["personnelIds"])
                    this.personnelIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateUserGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        if (Array.isArray(this.personnelIds)) {
            data["personnelIds"] = [];
            for (let item of this.personnelIds)
                data["personnelIds"].push(item);
        }
        return data; 
    }
}

export interface ICreateUserGroupCommand {
    name?: LanguageString | undefined;
    personnelIds?: number[] | undefined;
}

export class ApplicationResponseOfTableResponseModelOfGetUserGroupDto implements IApplicationResponseOfTableResponseModelOfGetUserGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfGetUserGroupDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfGetUserGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfGetUserGroupDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfGetUserGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfGetUserGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfGetUserGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfGetUserGroupDto | undefined;
}

export class TableResponseModelOfGetUserGroupDto implements ITableResponseModelOfGetUserGroupDto {
    data?: GetUserGroupDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfGetUserGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetUserGroupDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfGetUserGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfGetUserGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfGetUserGroupDto {
    data?: GetUserGroupDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class GetUserGroupDto implements IGetUserGroupDto {
    name?: LanguageString | undefined;
    personnels?: UserGroupPersonnelDto[] | undefined;
    uniqueCode?: string | undefined;

    constructor(data?: IGetUserGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            if (Array.isArray(_data["personnels"])) {
                this.personnels = [] as any;
                for (let item of _data["personnels"])
                    this.personnels!.push(UserGroupPersonnelDto.fromJS(item));
            }
            this.uniqueCode = _data["uniqueCode"];
        }
    }

    static fromJS(data: any): GetUserGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        if (Array.isArray(this.personnels)) {
            data["personnels"] = [];
            for (let item of this.personnels)
                data["personnels"].push(item.toJSON());
        }
        data["uniqueCode"] = this.uniqueCode;
        return data; 
    }
}

export interface IGetUserGroupDto {
    name?: LanguageString | undefined;
    personnels?: UserGroupPersonnelDto[] | undefined;
    uniqueCode?: string | undefined;
}

export class UserGroupPersonnelDto implements IUserGroupPersonnelDto {
    personnelId?: number;

    constructor(data?: IUserGroupPersonnelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personnelId = _data["personnelId"];
        }
    }

    static fromJS(data: any): UserGroupPersonnelDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupPersonnelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personnelId"] = this.personnelId;
        return data; 
    }
}

export interface IUserGroupPersonnelDto {
    personnelId?: number;
}

export class ApplicationResponseOfGetUserGroupDto implements IApplicationResponseOfGetUserGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: GetUserGroupDto | undefined;

    constructor(data?: IApplicationResponseOfGetUserGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? GetUserGroupDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfGetUserGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfGetUserGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfGetUserGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: GetUserGroupDto | undefined;
}

export class EditUserGroupCommand extends CreateUserGroupCommand implements IEditUserGroupCommand {
    id?: number;

    constructor(data?: IEditUserGroupCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditUserGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditUserGroupCommand extends ICreateUserGroupCommand {
    id?: number;
}

export class RemoveUserGroupCommand implements IRemoveUserGroupCommand {
    id?: number;

    constructor(data?: IRemoveUserGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveUserGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveUserGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveUserGroupCommand {
    id?: number;
}

export class ApplicationResponseOfTableResponseModelOfUserGroupApproversDto implements IApplicationResponseOfTableResponseModelOfUserGroupApproversDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfUserGroupApproversDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfUserGroupApproversDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfUserGroupApproversDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfUserGroupApproversDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfUserGroupApproversDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfUserGroupApproversDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfUserGroupApproversDto | undefined;
}

export class TableResponseModelOfUserGroupApproversDto implements ITableResponseModelOfUserGroupApproversDto {
    data?: UserGroupApproversDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfUserGroupApproversDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserGroupApproversDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfUserGroupApproversDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfUserGroupApproversDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfUserGroupApproversDto {
    data?: UserGroupApproversDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class UserGroupApproversDto implements IUserGroupApproversDto {
    personnelId?: number;
    personnelName?: string | undefined;
    serviceCategories?: BasicServiceCategoryDto[] | undefined;

    constructor(data?: IUserGroupApproversDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personnelId = _data["personnelId"];
            this.personnelName = _data["personnelName"];
            if (Array.isArray(_data["serviceCategories"])) {
                this.serviceCategories = [] as any;
                for (let item of _data["serviceCategories"])
                    this.serviceCategories!.push(BasicServiceCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserGroupApproversDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupApproversDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personnelId"] = this.personnelId;
        data["personnelName"] = this.personnelName;
        if (Array.isArray(this.serviceCategories)) {
            data["serviceCategories"] = [];
            for (let item of this.serviceCategories)
                data["serviceCategories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserGroupApproversDto {
    personnelId?: number;
    personnelName?: string | undefined;
    serviceCategories?: BasicServiceCategoryDto[] | undefined;
}

export class BasicServiceCategoryDto implements IBasicServiceCategoryDto {
    id?: number;
    uniqueCode?: string | undefined;
    name?: LanguageString | undefined;
    isMainCategory?: boolean;
    subServiceCategories?: BasicServiceCategoryDto[] | undefined;

    constructor(data?: IBasicServiceCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueCode = _data["uniqueCode"];
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.isMainCategory = _data["isMainCategory"];
            if (Array.isArray(_data["subServiceCategories"])) {
                this.subServiceCategories = [] as any;
                for (let item of _data["subServiceCategories"])
                    this.subServiceCategories!.push(BasicServiceCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BasicServiceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicServiceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueCode"] = this.uniqueCode;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["isMainCategory"] = this.isMainCategory;
        if (Array.isArray(this.subServiceCategories)) {
            data["subServiceCategories"] = [];
            for (let item of this.subServiceCategories)
                data["subServiceCategories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBasicServiceCategoryDto {
    id?: number;
    uniqueCode?: string | undefined;
    name?: LanguageString | undefined;
    isMainCategory?: boolean;
    subServiceCategories?: BasicServiceCategoryDto[] | undefined;
}

export class ApplicationResponseOfTableResponseModelOfRole implements IApplicationResponseOfTableResponseModelOfRole {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfRole | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfRole.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfRole {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfRole {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfRole | undefined;
}

export class TableResponseModelOfRole implements ITableResponseModelOfRole {
    data?: Role[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfRole {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfRole {
    data?: Role[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export enum Role {
    Approver = 0,
    Observer = 1,
    Reporter = 2,
    Canceler = 3,
}

export class CreateServiceCategoryCommand implements ICreateServiceCategoryCommand {
    name?: LanguageString | undefined;
    description?: LanguageString | undefined;
    isMainCategory?: boolean;
    serviceCategoryDetails?: CreateServiceCategoryDetails | undefined;

    constructor(data?: ICreateServiceCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.description = _data["description"] ? LanguageString.fromJS(_data["description"]) : <any>undefined;
            this.isMainCategory = _data["isMainCategory"];
            this.serviceCategoryDetails = _data["serviceCategoryDetails"] ? CreateServiceCategoryDetails.fromJS(_data["serviceCategoryDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateServiceCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        data["isMainCategory"] = this.isMainCategory;
        data["serviceCategoryDetails"] = this.serviceCategoryDetails ? this.serviceCategoryDetails.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateServiceCategoryCommand {
    name?: LanguageString | undefined;
    description?: LanguageString | undefined;
    isMainCategory?: boolean;
    serviceCategoryDetails?: CreateServiceCategoryDetails | undefined;
}

export class CreateServiceCategoryDetails implements ICreateServiceCategoryDetails {
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    personnelDocuments?: CreateServiceCategoryPersonnelDocument[] | undefined;
    parentServiceCategoryId?: number | undefined;
    isParallelApprovement?: boolean;
    serviceCategoryRoles?: CreateCategoryRoleDto[] | undefined;
    documents?: CreateServiceCategoryDocument[] | undefined;
    vehicleTemplates?: CreateVehicleTemplateCategoryDto[] | undefined;
    serviceCategoryAreas?: number[] | undefined;
    serviceCategoryBlocks?: string[] | undefined;
    serviceCategoryBrands?: number[] | undefined;
    serviceCategoryCompanies?: number[] | undefined;
    serviceCategorySites?: string[] | undefined;
    serviceCategoryUnits?: number[] | undefined;
    serviceCategoryZones?: string[] | undefined;
    serviceCategoryPresenceGroups?: number[] | undefined;

    constructor(data?: ICreateServiceCategoryDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxServiceDuration = _data["maxServiceDuration"];
            this.serviceDurationUnit = _data["serviceDurationUnit"];
            this.minOrderDuration = _data["minOrderDuration"];
            this.minOrderDurationUnit = _data["minOrderDurationUnit"];
            this.maxOrderDuration = _data["maxOrderDuration"];
            this.maxOrderDurationUnit = _data["maxOrderDurationUnit"];
            this.maxPersonnelCount = _data["maxPersonnelCount"];
            if (Array.isArray(_data["personnelDocuments"])) {
                this.personnelDocuments = [] as any;
                for (let item of _data["personnelDocuments"])
                    this.personnelDocuments!.push(CreateServiceCategoryPersonnelDocument.fromJS(item));
            }
            this.parentServiceCategoryId = _data["parentServiceCategoryId"];
            this.isParallelApprovement = _data["isParallelApprovement"];
            if (Array.isArray(_data["serviceCategoryRoles"])) {
                this.serviceCategoryRoles = [] as any;
                for (let item of _data["serviceCategoryRoles"])
                    this.serviceCategoryRoles!.push(CreateCategoryRoleDto.fromJS(item));
            }
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(CreateServiceCategoryDocument.fromJS(item));
            }
            if (Array.isArray(_data["vehicleTemplates"])) {
                this.vehicleTemplates = [] as any;
                for (let item of _data["vehicleTemplates"])
                    this.vehicleTemplates!.push(CreateVehicleTemplateCategoryDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryAreas"])) {
                this.serviceCategoryAreas = [] as any;
                for (let item of _data["serviceCategoryAreas"])
                    this.serviceCategoryAreas!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryBlocks"])) {
                this.serviceCategoryBlocks = [] as any;
                for (let item of _data["serviceCategoryBlocks"])
                    this.serviceCategoryBlocks!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryBrands"])) {
                this.serviceCategoryBrands = [] as any;
                for (let item of _data["serviceCategoryBrands"])
                    this.serviceCategoryBrands!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryCompanies"])) {
                this.serviceCategoryCompanies = [] as any;
                for (let item of _data["serviceCategoryCompanies"])
                    this.serviceCategoryCompanies!.push(item);
            }
            if (Array.isArray(_data["serviceCategorySites"])) {
                this.serviceCategorySites = [] as any;
                for (let item of _data["serviceCategorySites"])
                    this.serviceCategorySites!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryUnits"])) {
                this.serviceCategoryUnits = [] as any;
                for (let item of _data["serviceCategoryUnits"])
                    this.serviceCategoryUnits!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryZones"])) {
                this.serviceCategoryZones = [] as any;
                for (let item of _data["serviceCategoryZones"])
                    this.serviceCategoryZones!.push(item);
            }
            if (Array.isArray(_data["serviceCategoryPresenceGroups"])) {
                this.serviceCategoryPresenceGroups = [] as any;
                for (let item of _data["serviceCategoryPresenceGroups"])
                    this.serviceCategoryPresenceGroups!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateServiceCategoryDetails {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceCategoryDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxServiceDuration"] = this.maxServiceDuration;
        data["serviceDurationUnit"] = this.serviceDurationUnit;
        data["minOrderDuration"] = this.minOrderDuration;
        data["minOrderDurationUnit"] = this.minOrderDurationUnit;
        data["maxOrderDuration"] = this.maxOrderDuration;
        data["maxOrderDurationUnit"] = this.maxOrderDurationUnit;
        data["maxPersonnelCount"] = this.maxPersonnelCount;
        if (Array.isArray(this.personnelDocuments)) {
            data["personnelDocuments"] = [];
            for (let item of this.personnelDocuments)
                data["personnelDocuments"].push(item.toJSON());
        }
        data["parentServiceCategoryId"] = this.parentServiceCategoryId;
        data["isParallelApprovement"] = this.isParallelApprovement;
        if (Array.isArray(this.serviceCategoryRoles)) {
            data["serviceCategoryRoles"] = [];
            for (let item of this.serviceCategoryRoles)
                data["serviceCategoryRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        if (Array.isArray(this.vehicleTemplates)) {
            data["vehicleTemplates"] = [];
            for (let item of this.vehicleTemplates)
                data["vehicleTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryAreas)) {
            data["serviceCategoryAreas"] = [];
            for (let item of this.serviceCategoryAreas)
                data["serviceCategoryAreas"].push(item);
        }
        if (Array.isArray(this.serviceCategoryBlocks)) {
            data["serviceCategoryBlocks"] = [];
            for (let item of this.serviceCategoryBlocks)
                data["serviceCategoryBlocks"].push(item);
        }
        if (Array.isArray(this.serviceCategoryBrands)) {
            data["serviceCategoryBrands"] = [];
            for (let item of this.serviceCategoryBrands)
                data["serviceCategoryBrands"].push(item);
        }
        if (Array.isArray(this.serviceCategoryCompanies)) {
            data["serviceCategoryCompanies"] = [];
            for (let item of this.serviceCategoryCompanies)
                data["serviceCategoryCompanies"].push(item);
        }
        if (Array.isArray(this.serviceCategorySites)) {
            data["serviceCategorySites"] = [];
            for (let item of this.serviceCategorySites)
                data["serviceCategorySites"].push(item);
        }
        if (Array.isArray(this.serviceCategoryUnits)) {
            data["serviceCategoryUnits"] = [];
            for (let item of this.serviceCategoryUnits)
                data["serviceCategoryUnits"].push(item);
        }
        if (Array.isArray(this.serviceCategoryZones)) {
            data["serviceCategoryZones"] = [];
            for (let item of this.serviceCategoryZones)
                data["serviceCategoryZones"].push(item);
        }
        if (Array.isArray(this.serviceCategoryPresenceGroups)) {
            data["serviceCategoryPresenceGroups"] = [];
            for (let item of this.serviceCategoryPresenceGroups)
                data["serviceCategoryPresenceGroups"].push(item);
        }
        return data; 
    }
}

export interface ICreateServiceCategoryDetails {
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    personnelDocuments?: CreateServiceCategoryPersonnelDocument[] | undefined;
    parentServiceCategoryId?: number | undefined;
    isParallelApprovement?: boolean;
    serviceCategoryRoles?: CreateCategoryRoleDto[] | undefined;
    documents?: CreateServiceCategoryDocument[] | undefined;
    vehicleTemplates?: CreateVehicleTemplateCategoryDto[] | undefined;
    serviceCategoryAreas?: number[] | undefined;
    serviceCategoryBlocks?: string[] | undefined;
    serviceCategoryBrands?: number[] | undefined;
    serviceCategoryCompanies?: number[] | undefined;
    serviceCategorySites?: string[] | undefined;
    serviceCategoryUnits?: number[] | undefined;
    serviceCategoryZones?: string[] | undefined;
    serviceCategoryPresenceGroups?: number[] | undefined;
}

export enum TimeUnit {
    Hours = 0,
    Days = 1,
    Weeks = 2,
    Months = 3,
    Years = 4,
}

export class CreateServiceCategoryPersonnelDocument implements ICreateServiceCategoryPersonnelDocument {
    documentTemplateId?: number;
    isRequired?: boolean;

    constructor(data?: ICreateServiceCategoryPersonnelDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): CreateServiceCategoryPersonnelDocument {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceCategoryPersonnelDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["isRequired"] = this.isRequired;
        return data; 
    }
}

export interface ICreateServiceCategoryPersonnelDocument {
    documentTemplateId?: number;
    isRequired?: boolean;
}

export class CreateCategoryRoleDto implements ICreateCategoryRoleDto {
    role?: Role;
    responsibleDepartments?: number[] | undefined;
    responsiblePersonnels?: number[] | undefined;
    responsibleUserGroups?: number[] | undefined;

    constructor(data?: ICreateCategoryRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
            if (Array.isArray(_data["responsibleDepartments"])) {
                this.responsibleDepartments = [] as any;
                for (let item of _data["responsibleDepartments"])
                    this.responsibleDepartments!.push(item);
            }
            if (Array.isArray(_data["responsiblePersonnels"])) {
                this.responsiblePersonnels = [] as any;
                for (let item of _data["responsiblePersonnels"])
                    this.responsiblePersonnels!.push(item);
            }
            if (Array.isArray(_data["responsibleUserGroups"])) {
                this.responsibleUserGroups = [] as any;
                for (let item of _data["responsibleUserGroups"])
                    this.responsibleUserGroups!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCategoryRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        if (Array.isArray(this.responsibleDepartments)) {
            data["responsibleDepartments"] = [];
            for (let item of this.responsibleDepartments)
                data["responsibleDepartments"].push(item);
        }
        if (Array.isArray(this.responsiblePersonnels)) {
            data["responsiblePersonnels"] = [];
            for (let item of this.responsiblePersonnels)
                data["responsiblePersonnels"].push(item);
        }
        if (Array.isArray(this.responsibleUserGroups)) {
            data["responsibleUserGroups"] = [];
            for (let item of this.responsibleUserGroups)
                data["responsibleUserGroups"].push(item);
        }
        return data; 
    }
}

export interface ICreateCategoryRoleDto {
    role?: Role;
    responsibleDepartments?: number[] | undefined;
    responsiblePersonnels?: number[] | undefined;
    responsibleUserGroups?: number[] | undefined;
}

export class CreateServiceCategoryDocument implements ICreateServiceCategoryDocument {
    documentTemplateId?: number;
    isRequired?: boolean;

    constructor(data?: ICreateServiceCategoryDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): CreateServiceCategoryDocument {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceCategoryDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["isRequired"] = this.isRequired;
        return data; 
    }
}

export interface ICreateServiceCategoryDocument {
    documentTemplateId?: number;
    isRequired?: boolean;
}

export class CreateVehicleTemplateCategoryDto implements ICreateVehicleTemplateCategoryDto {
    vehicleTemplateId?: number;
    vehicleTemplateDocuments?: CreateCategoryVehicleTemplateDocuments[] | undefined;

    constructor(data?: ICreateVehicleTemplateCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleTemplateId = _data["vehicleTemplateId"];
            if (Array.isArray(_data["vehicleTemplateDocuments"])) {
                this.vehicleTemplateDocuments = [] as any;
                for (let item of _data["vehicleTemplateDocuments"])
                    this.vehicleTemplateDocuments!.push(CreateCategoryVehicleTemplateDocuments.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateVehicleTemplateCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleTemplateCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        if (Array.isArray(this.vehicleTemplateDocuments)) {
            data["vehicleTemplateDocuments"] = [];
            for (let item of this.vehicleTemplateDocuments)
                data["vehicleTemplateDocuments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateVehicleTemplateCategoryDto {
    vehicleTemplateId?: number;
    vehicleTemplateDocuments?: CreateCategoryVehicleTemplateDocuments[] | undefined;
}

export class CreateCategoryVehicleTemplateDocuments implements ICreateCategoryVehicleTemplateDocuments {
    documentTemplateId?: number;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;

    constructor(data?: ICreateCategoryVehicleTemplateDocuments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.isRequired = _data["isRequired"];
            this.vehicleDocumentType = _data["vehicleDocumentType"];
        }
    }

    static fromJS(data: any): CreateCategoryVehicleTemplateDocuments {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryVehicleTemplateDocuments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["isRequired"] = this.isRequired;
        data["vehicleDocumentType"] = this.vehicleDocumentType;
        return data; 
    }
}

export interface ICreateCategoryVehicleTemplateDocuments {
    documentTemplateId?: number;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;
}

export enum VehicleDocumentType {
    Vehicle = 0,
    Driver = 1,
}

export class ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto implements IApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicServiceCategoryDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfBasicServiceCategoryDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfBasicServiceCategoryDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicServiceCategoryDto | undefined;
}

export class TableResponseModelOfBasicServiceCategoryDto implements ITableResponseModelOfBasicServiceCategoryDto {
    data?: BasicServiceCategoryDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfBasicServiceCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BasicServiceCategoryDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfBasicServiceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfBasicServiceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfBasicServiceCategoryDto {
    data?: BasicServiceCategoryDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class ApplicationResponseOfServiceCategoryDto implements IApplicationResponseOfServiceCategoryDto {
    isError?: boolean;
    message?: string | undefined;
    result?: ServiceCategoryDto | undefined;

    constructor(data?: IApplicationResponseOfServiceCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? ServiceCategoryDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfServiceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfServiceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfServiceCategoryDto {
    isError?: boolean;
    message?: string | undefined;
    result?: ServiceCategoryDto | undefined;
}

export class ServiceCategoryDto extends BasicServiceCategoryDto implements IServiceCategoryDto {
    description?: LanguageString | undefined;
    parentServiceCategoryId?: number | undefined;
    serviceCategoryDetails?: ServiceCategoryDetailsDto | undefined;

    constructor(data?: IServiceCategoryDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"] ? LanguageString.fromJS(_data["description"]) : <any>undefined;
            this.parentServiceCategoryId = _data["parentServiceCategoryId"];
            this.serviceCategoryDetails = _data["serviceCategoryDetails"] ? ServiceCategoryDetailsDto.fromJS(_data["serviceCategoryDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServiceCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        data["parentServiceCategoryId"] = this.parentServiceCategoryId;
        data["serviceCategoryDetails"] = this.serviceCategoryDetails ? this.serviceCategoryDetails.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryDto extends IBasicServiceCategoryDto {
    description?: LanguageString | undefined;
    parentServiceCategoryId?: number | undefined;
    serviceCategoryDetails?: ServiceCategoryDetailsDto | undefined;
}

export class ServiceCategoryDetailsDto implements IServiceCategoryDetailsDto {
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    isParallelApprovement?: boolean;
    vehicleTemplates?: VehicleCategoryDto[] | undefined;
    documents?: CategoryDocumentDto[] | undefined;
    personnelDocuments?: CategoryPersonnelDocumentDto[] | undefined;
    serviceCategoryRoles?: ServiceCategoryRole[] | undefined;
    serviceCategoryAreas?: ServiceCategoryAreaDto[] | undefined;
    serviceCategoryBlocks?: ServiceCategoryBlockDto[] | undefined;
    serviceCategoryBrands?: ServiceCategoryBrandDto[] | undefined;
    serviceCategoryCompanies?: ServiceCategoryCompanyDto[] | undefined;
    serviceCategorySites?: ServiceCategorySiteDto[] | undefined;
    serviceCategoryUnits?: ServiceCategoryUnitDto[] | undefined;
    serviceCategoryZones?: ServiceCategoryZoneDto[] | undefined;
    serviceCategoryPresenceGroups?: ServiceCategoryPresenceGroupDto[] | undefined;

    constructor(data?: IServiceCategoryDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxServiceDuration = _data["maxServiceDuration"];
            this.serviceDurationUnit = _data["serviceDurationUnit"];
            this.minOrderDuration = _data["minOrderDuration"];
            this.minOrderDurationUnit = _data["minOrderDurationUnit"];
            this.maxOrderDuration = _data["maxOrderDuration"];
            this.maxOrderDurationUnit = _data["maxOrderDurationUnit"];
            this.maxPersonnelCount = _data["maxPersonnelCount"];
            this.isParallelApprovement = _data["isParallelApprovement"];
            if (Array.isArray(_data["vehicleTemplates"])) {
                this.vehicleTemplates = [] as any;
                for (let item of _data["vehicleTemplates"])
                    this.vehicleTemplates!.push(VehicleCategoryDto.fromJS(item));
            }
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(CategoryDocumentDto.fromJS(item));
            }
            if (Array.isArray(_data["personnelDocuments"])) {
                this.personnelDocuments = [] as any;
                for (let item of _data["personnelDocuments"])
                    this.personnelDocuments!.push(CategoryPersonnelDocumentDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryRoles"])) {
                this.serviceCategoryRoles = [] as any;
                for (let item of _data["serviceCategoryRoles"])
                    this.serviceCategoryRoles!.push(ServiceCategoryRole.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryAreas"])) {
                this.serviceCategoryAreas = [] as any;
                for (let item of _data["serviceCategoryAreas"])
                    this.serviceCategoryAreas!.push(ServiceCategoryAreaDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryBlocks"])) {
                this.serviceCategoryBlocks = [] as any;
                for (let item of _data["serviceCategoryBlocks"])
                    this.serviceCategoryBlocks!.push(ServiceCategoryBlockDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryBrands"])) {
                this.serviceCategoryBrands = [] as any;
                for (let item of _data["serviceCategoryBrands"])
                    this.serviceCategoryBrands!.push(ServiceCategoryBrandDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryCompanies"])) {
                this.serviceCategoryCompanies = [] as any;
                for (let item of _data["serviceCategoryCompanies"])
                    this.serviceCategoryCompanies!.push(ServiceCategoryCompanyDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategorySites"])) {
                this.serviceCategorySites = [] as any;
                for (let item of _data["serviceCategorySites"])
                    this.serviceCategorySites!.push(ServiceCategorySiteDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryUnits"])) {
                this.serviceCategoryUnits = [] as any;
                for (let item of _data["serviceCategoryUnits"])
                    this.serviceCategoryUnits!.push(ServiceCategoryUnitDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryZones"])) {
                this.serviceCategoryZones = [] as any;
                for (let item of _data["serviceCategoryZones"])
                    this.serviceCategoryZones!.push(ServiceCategoryZoneDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryPresenceGroups"])) {
                this.serviceCategoryPresenceGroups = [] as any;
                for (let item of _data["serviceCategoryPresenceGroups"])
                    this.serviceCategoryPresenceGroups!.push(ServiceCategoryPresenceGroupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ServiceCategoryDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxServiceDuration"] = this.maxServiceDuration;
        data["serviceDurationUnit"] = this.serviceDurationUnit;
        data["minOrderDuration"] = this.minOrderDuration;
        data["minOrderDurationUnit"] = this.minOrderDurationUnit;
        data["maxOrderDuration"] = this.maxOrderDuration;
        data["maxOrderDurationUnit"] = this.maxOrderDurationUnit;
        data["maxPersonnelCount"] = this.maxPersonnelCount;
        data["isParallelApprovement"] = this.isParallelApprovement;
        if (Array.isArray(this.vehicleTemplates)) {
            data["vehicleTemplates"] = [];
            for (let item of this.vehicleTemplates)
                data["vehicleTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        if (Array.isArray(this.personnelDocuments)) {
            data["personnelDocuments"] = [];
            for (let item of this.personnelDocuments)
                data["personnelDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryRoles)) {
            data["serviceCategoryRoles"] = [];
            for (let item of this.serviceCategoryRoles)
                data["serviceCategoryRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryAreas)) {
            data["serviceCategoryAreas"] = [];
            for (let item of this.serviceCategoryAreas)
                data["serviceCategoryAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryBlocks)) {
            data["serviceCategoryBlocks"] = [];
            for (let item of this.serviceCategoryBlocks)
                data["serviceCategoryBlocks"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryBrands)) {
            data["serviceCategoryBrands"] = [];
            for (let item of this.serviceCategoryBrands)
                data["serviceCategoryBrands"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryCompanies)) {
            data["serviceCategoryCompanies"] = [];
            for (let item of this.serviceCategoryCompanies)
                data["serviceCategoryCompanies"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategorySites)) {
            data["serviceCategorySites"] = [];
            for (let item of this.serviceCategorySites)
                data["serviceCategorySites"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryUnits)) {
            data["serviceCategoryUnits"] = [];
            for (let item of this.serviceCategoryUnits)
                data["serviceCategoryUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryZones)) {
            data["serviceCategoryZones"] = [];
            for (let item of this.serviceCategoryZones)
                data["serviceCategoryZones"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryPresenceGroups)) {
            data["serviceCategoryPresenceGroups"] = [];
            for (let item of this.serviceCategoryPresenceGroups)
                data["serviceCategoryPresenceGroups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IServiceCategoryDetailsDto {
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    isParallelApprovement?: boolean;
    vehicleTemplates?: VehicleCategoryDto[] | undefined;
    documents?: CategoryDocumentDto[] | undefined;
    personnelDocuments?: CategoryPersonnelDocumentDto[] | undefined;
    serviceCategoryRoles?: ServiceCategoryRole[] | undefined;
    serviceCategoryAreas?: ServiceCategoryAreaDto[] | undefined;
    serviceCategoryBlocks?: ServiceCategoryBlockDto[] | undefined;
    serviceCategoryBrands?: ServiceCategoryBrandDto[] | undefined;
    serviceCategoryCompanies?: ServiceCategoryCompanyDto[] | undefined;
    serviceCategorySites?: ServiceCategorySiteDto[] | undefined;
    serviceCategoryUnits?: ServiceCategoryUnitDto[] | undefined;
    serviceCategoryZones?: ServiceCategoryZoneDto[] | undefined;
    serviceCategoryPresenceGroups?: ServiceCategoryPresenceGroupDto[] | undefined;
}

export class VehicleCategoryDto implements IVehicleCategoryDto {
    vehicleTemplateId?: number;
    vehicleTemplateDocuments?: CategoryVehicleDocumentsDto[] | undefined;

    constructor(data?: IVehicleCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleTemplateId = _data["vehicleTemplateId"];
            if (Array.isArray(_data["vehicleTemplateDocuments"])) {
                this.vehicleTemplateDocuments = [] as any;
                for (let item of _data["vehicleTemplateDocuments"])
                    this.vehicleTemplateDocuments!.push(CategoryVehicleDocumentsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        if (Array.isArray(this.vehicleTemplateDocuments)) {
            data["vehicleTemplateDocuments"] = [];
            for (let item of this.vehicleTemplateDocuments)
                data["vehicleTemplateDocuments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVehicleCategoryDto {
    vehicleTemplateId?: number;
    vehicleTemplateDocuments?: CategoryVehicleDocumentsDto[] | undefined;
}

export class CategoryVehicleDocumentsDto implements ICategoryVehicleDocumentsDto {
    vehicleTemplateCategoryId?: number;
    documentTemplateId?: number;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;

    constructor(data?: ICategoryVehicleDocumentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehicleTemplateCategoryId = _data["vehicleTemplateCategoryId"];
            this.documentTemplateId = _data["documentTemplateId"];
            this.isRequired = _data["isRequired"];
            this.vehicleDocumentType = _data["vehicleDocumentType"];
        }
    }

    static fromJS(data: any): CategoryVehicleDocumentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryVehicleDocumentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleTemplateCategoryId"] = this.vehicleTemplateCategoryId;
        data["documentTemplateId"] = this.documentTemplateId;
        data["isRequired"] = this.isRequired;
        data["vehicleDocumentType"] = this.vehicleDocumentType;
        return data; 
    }
}

export interface ICategoryVehicleDocumentsDto {
    vehicleTemplateCategoryId?: number;
    documentTemplateId?: number;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;
}

export class CategoryDocumentDto implements ICategoryDocumentDto {
    documentTemplateId?: number;
    serviceCategoryId?: number;
    isRequired?: boolean;

    constructor(data?: ICategoryDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): CategoryDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["isRequired"] = this.isRequired;
        return data; 
    }
}

export interface ICategoryDocumentDto {
    documentTemplateId?: number;
    serviceCategoryId?: number;
    isRequired?: boolean;
}

export class CategoryPersonnelDocumentDto implements ICategoryPersonnelDocumentDto {
    serviceCategoryId?: number;
    documentTemplateId?: number;
    isRequired?: boolean;

    constructor(data?: ICategoryPersonnelDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.documentTemplateId = _data["documentTemplateId"];
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): CategoryPersonnelDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryPersonnelDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["documentTemplateId"] = this.documentTemplateId;
        data["isRequired"] = this.isRequired;
        return data; 
    }
}

export interface ICategoryPersonnelDocumentDto {
    serviceCategoryId?: number;
    documentTemplateId?: number;
    isRequired?: boolean;
}

export class LightBaseEntityOfInteger implements ILightBaseEntityOfInteger {
    id?: number;

    constructor(data?: ILightBaseEntityOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LightBaseEntityOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new LightBaseEntityOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface ILightBaseEntityOfInteger {
    id?: number;
}

export class ServiceCategoryRole extends LightBaseEntityOfInteger implements IServiceCategoryRole {
    role?: Role;
    responsibleDepartments?: ResponsibleDepartment[] | undefined;
    responsiblePersonnels?: ResponsiblePersonnel[] | undefined;
    responsibleUserGroups?: ResponsibleUserGroup[] | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;

    constructor(data?: IServiceCategoryRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.role = _data["role"];
            if (Array.isArray(_data["responsibleDepartments"])) {
                this.responsibleDepartments = [] as any;
                for (let item of _data["responsibleDepartments"])
                    this.responsibleDepartments!.push(ResponsibleDepartment.fromJS(item));
            }
            if (Array.isArray(_data["responsiblePersonnels"])) {
                this.responsiblePersonnels = [] as any;
                for (let item of _data["responsiblePersonnels"])
                    this.responsiblePersonnels!.push(ResponsiblePersonnel.fromJS(item));
            }
            if (Array.isArray(_data["responsibleUserGroups"])) {
                this.responsibleUserGroups = [] as any;
                for (let item of _data["responsibleUserGroups"])
                    this.responsibleUserGroups!.push(ResponsibleUserGroup.fromJS(item));
            }
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServiceCategoryRole {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        if (Array.isArray(this.responsibleDepartments)) {
            data["responsibleDepartments"] = [];
            for (let item of this.responsibleDepartments)
                data["responsibleDepartments"].push(item.toJSON());
        }
        if (Array.isArray(this.responsiblePersonnels)) {
            data["responsiblePersonnels"] = [];
            for (let item of this.responsiblePersonnels)
                data["responsiblePersonnels"].push(item.toJSON());
        }
        if (Array.isArray(this.responsibleUserGroups)) {
            data["responsibleUserGroups"] = [];
            for (let item of this.responsibleUserGroups)
                data["responsibleUserGroups"].push(item.toJSON());
        }
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryRole extends ILightBaseEntityOfInteger {
    role?: Role;
    responsibleDepartments?: ResponsibleDepartment[] | undefined;
    responsiblePersonnels?: ResponsiblePersonnel[] | undefined;
    responsibleUserGroups?: ResponsibleUserGroup[] | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
}

export class ResponsibleDepartment extends LightBaseEntityOfInteger implements IResponsibleDepartment {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    departmentId?: number;

    constructor(data?: IResponsibleDepartment) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryRoleId = _data["serviceCategoryRoleId"];
            this.serviceCategoryRole = _data["serviceCategoryRole"] ? ServiceCategoryRole.fromJS(_data["serviceCategoryRole"]) : <any>undefined;
            this.departmentId = _data["departmentId"];
        }
    }

    static fromJS(data: any): ResponsibleDepartment {
        data = typeof data === 'object' ? data : {};
        let result = new ResponsibleDepartment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryRoleId"] = this.serviceCategoryRoleId;
        data["serviceCategoryRole"] = this.serviceCategoryRole ? this.serviceCategoryRole.toJSON() : <any>undefined;
        data["departmentId"] = this.departmentId;
        super.toJSON(data);
        return data; 
    }
}

export interface IResponsibleDepartment extends ILightBaseEntityOfInteger {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    departmentId?: number;
}

export class ResponsiblePersonnel extends LightBaseEntityOfInteger implements IResponsiblePersonnel {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    personnelId?: number;

    constructor(data?: IResponsiblePersonnel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryRoleId = _data["serviceCategoryRoleId"];
            this.serviceCategoryRole = _data["serviceCategoryRole"] ? ServiceCategoryRole.fromJS(_data["serviceCategoryRole"]) : <any>undefined;
            this.personnelId = _data["personnelId"];
        }
    }

    static fromJS(data: any): ResponsiblePersonnel {
        data = typeof data === 'object' ? data : {};
        let result = new ResponsiblePersonnel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryRoleId"] = this.serviceCategoryRoleId;
        data["serviceCategoryRole"] = this.serviceCategoryRole ? this.serviceCategoryRole.toJSON() : <any>undefined;
        data["personnelId"] = this.personnelId;
        super.toJSON(data);
        return data; 
    }
}

export interface IResponsiblePersonnel extends ILightBaseEntityOfInteger {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    personnelId?: number;
}

export class ResponsibleUserGroup extends LightBaseEntityOfInteger implements IResponsibleUserGroup {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    userGroupId?: number;
    userGroup?: UserGroup | undefined;

    constructor(data?: IResponsibleUserGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryRoleId = _data["serviceCategoryRoleId"];
            this.serviceCategoryRole = _data["serviceCategoryRole"] ? ServiceCategoryRole.fromJS(_data["serviceCategoryRole"]) : <any>undefined;
            this.userGroupId = _data["userGroupId"];
            this.userGroup = _data["userGroup"] ? UserGroup.fromJS(_data["userGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ResponsibleUserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ResponsibleUserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryRoleId"] = this.serviceCategoryRoleId;
        data["serviceCategoryRole"] = this.serviceCategoryRole ? this.serviceCategoryRole.toJSON() : <any>undefined;
        data["userGroupId"] = this.userGroupId;
        data["userGroup"] = this.userGroup ? this.userGroup.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IResponsibleUserGroup extends ILightBaseEntityOfInteger {
    serviceCategoryRoleId?: number;
    serviceCategoryRole?: ServiceCategoryRole | undefined;
    userGroupId?: number;
    userGroup?: UserGroup | undefined;
}

export class BaseEntityOfInteger extends LightBaseEntityOfInteger implements IBaseEntityOfInteger {
    isDeleted?: boolean;
    deletedDate?: Date | undefined;
    deletedBy?: string | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    createdDate?: Date;
    lastModifiedDate?: Date | undefined;
    uniqueCode?: string | undefined;

    constructor(data?: IBaseEntityOfInteger) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isDeleted = _data["isDeleted"];
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : <any>undefined;
            this.deletedBy = _data["deletedBy"];
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : <any>undefined;
            this.uniqueCode = _data["uniqueCode"];
        }
    }

    static fromJS(data: any): BaseEntityOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEntityOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDeleted"] = this.isDeleted;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : <any>undefined;
        data["deletedBy"] = this.deletedBy;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : <any>undefined;
        data["uniqueCode"] = this.uniqueCode;
        super.toJSON(data);
        return data; 
    }
}

export interface IBaseEntityOfInteger extends ILightBaseEntityOfInteger {
    isDeleted?: boolean;
    deletedDate?: Date | undefined;
    deletedBy?: string | undefined;
    createdBy?: string | undefined;
    modifiedBy?: string | undefined;
    createdDate?: Date;
    lastModifiedDate?: Date | undefined;
    uniqueCode?: string | undefined;
}

export class UserGroup extends BaseEntityOfInteger implements IUserGroup {
    name?: string | undefined;
    personnels?: UserGroupPersonnel[] | undefined;

    constructor(data?: IUserGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["personnels"])) {
                this.personnels = [] as any;
                for (let item of _data["personnels"])
                    this.personnels!.push(UserGroupPersonnel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.personnels)) {
            data["personnels"] = [];
            for (let item of this.personnels)
                data["personnels"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUserGroup extends IBaseEntityOfInteger {
    name?: string | undefined;
    personnels?: UserGroupPersonnel[] | undefined;
}

export class UserGroupPersonnel extends LightBaseEntityOfInteger implements IUserGroupPersonnel {
    personnelId?: number;
    userGroupId?: number;
    userGroup?: UserGroup | undefined;

    constructor(data?: IUserGroupPersonnel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.personnelId = _data["personnelId"];
            this.userGroupId = _data["userGroupId"];
            this.userGroup = _data["userGroup"] ? UserGroup.fromJS(_data["userGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserGroupPersonnel {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupPersonnel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personnelId"] = this.personnelId;
        data["userGroupId"] = this.userGroupId;
        data["userGroup"] = this.userGroup ? this.userGroup.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IUserGroupPersonnel extends ILightBaseEntityOfInteger {
    personnelId?: number;
    userGroupId?: number;
    userGroup?: UserGroup | undefined;
}

export class ServiceCategory extends BaseEntityOfInteger implements IServiceCategory {
    name?: string | undefined;
    description?: string | undefined;
    serviceCategoryDetails?: ServiceCategoryDetails | undefined;
    isMainCategory?: boolean;
    parentServiceCategoryId?: number | undefined;
    parentServiceCategory?: ServiceCategory | undefined;
    subServiceCategories?: ServiceCategory[] | undefined;

    constructor(data?: IServiceCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.serviceCategoryDetails = _data["serviceCategoryDetails"] ? ServiceCategoryDetails.fromJS(_data["serviceCategoryDetails"]) : <any>undefined;
            this.isMainCategory = _data["isMainCategory"];
            this.parentServiceCategoryId = _data["parentServiceCategoryId"];
            this.parentServiceCategory = _data["parentServiceCategory"] ? ServiceCategory.fromJS(_data["parentServiceCategory"]) : <any>undefined;
            if (Array.isArray(_data["subServiceCategories"])) {
                this.subServiceCategories = [] as any;
                for (let item of _data["subServiceCategories"])
                    this.subServiceCategories!.push(ServiceCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ServiceCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["serviceCategoryDetails"] = this.serviceCategoryDetails ? this.serviceCategoryDetails.toJSON() : <any>undefined;
        data["isMainCategory"] = this.isMainCategory;
        data["parentServiceCategoryId"] = this.parentServiceCategoryId;
        data["parentServiceCategory"] = this.parentServiceCategory ? this.parentServiceCategory.toJSON() : <any>undefined;
        if (Array.isArray(this.subServiceCategories)) {
            data["subServiceCategories"] = [];
            for (let item of this.subServiceCategories)
                data["subServiceCategories"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategory extends IBaseEntityOfInteger {
    name?: string | undefined;
    description?: string | undefined;
    serviceCategoryDetails?: ServiceCategoryDetails | undefined;
    isMainCategory?: boolean;
    parentServiceCategoryId?: number | undefined;
    parentServiceCategory?: ServiceCategory | undefined;
    subServiceCategories?: ServiceCategory[] | undefined;
}

export class ServiceCategoryDetails implements IServiceCategoryDetails {
    id?: number;
    serviceCategory?: ServiceCategory | undefined;
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    isParallelApprovement?: boolean;
    serviceCategoryAreas?: ServiceCategoryArea[] | undefined;
    serviceCategoryBlocks?: ServiceCategoryBlock[] | undefined;
    serviceCategoryBrands?: ServiceCategoryBrand[] | undefined;
    serviceCategoryCompanies?: ServiceCategoryCompany[] | undefined;
    serviceCategorySites?: ServiceCategorySite[] | undefined;
    serviceCategoryUnits?: ServiceCategoryUnit[] | undefined;
    serviceCategoryZones?: ServiceCategoryZone[] | undefined;
    serviceCategoryPresenceGroups?: ServiceCategoryPresenceGroup[] | undefined;
    vehicleTemplates?: ServiceCategoryVehicleTemplate[] | undefined;
    documents?: ServiceCategoryDocument[] | undefined;
    personnelDocuments?: ServiceCategoryPersonnelDocument[] | undefined;
    serviceCategoryRoles?: ServiceCategoryRole[] | undefined;

    constructor(data?: IServiceCategoryDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.maxServiceDuration = _data["maxServiceDuration"];
            this.serviceDurationUnit = _data["serviceDurationUnit"];
            this.minOrderDuration = _data["minOrderDuration"];
            this.minOrderDurationUnit = _data["minOrderDurationUnit"];
            this.maxOrderDuration = _data["maxOrderDuration"];
            this.maxOrderDurationUnit = _data["maxOrderDurationUnit"];
            this.maxPersonnelCount = _data["maxPersonnelCount"];
            this.isParallelApprovement = _data["isParallelApprovement"];
            if (Array.isArray(_data["serviceCategoryAreas"])) {
                this.serviceCategoryAreas = [] as any;
                for (let item of _data["serviceCategoryAreas"])
                    this.serviceCategoryAreas!.push(ServiceCategoryArea.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryBlocks"])) {
                this.serviceCategoryBlocks = [] as any;
                for (let item of _data["serviceCategoryBlocks"])
                    this.serviceCategoryBlocks!.push(ServiceCategoryBlock.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryBrands"])) {
                this.serviceCategoryBrands = [] as any;
                for (let item of _data["serviceCategoryBrands"])
                    this.serviceCategoryBrands!.push(ServiceCategoryBrand.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryCompanies"])) {
                this.serviceCategoryCompanies = [] as any;
                for (let item of _data["serviceCategoryCompanies"])
                    this.serviceCategoryCompanies!.push(ServiceCategoryCompany.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategorySites"])) {
                this.serviceCategorySites = [] as any;
                for (let item of _data["serviceCategorySites"])
                    this.serviceCategorySites!.push(ServiceCategorySite.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryUnits"])) {
                this.serviceCategoryUnits = [] as any;
                for (let item of _data["serviceCategoryUnits"])
                    this.serviceCategoryUnits!.push(ServiceCategoryUnit.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryZones"])) {
                this.serviceCategoryZones = [] as any;
                for (let item of _data["serviceCategoryZones"])
                    this.serviceCategoryZones!.push(ServiceCategoryZone.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryPresenceGroups"])) {
                this.serviceCategoryPresenceGroups = [] as any;
                for (let item of _data["serviceCategoryPresenceGroups"])
                    this.serviceCategoryPresenceGroups!.push(ServiceCategoryPresenceGroup.fromJS(item));
            }
            if (Array.isArray(_data["vehicleTemplates"])) {
                this.vehicleTemplates = [] as any;
                for (let item of _data["vehicleTemplates"])
                    this.vehicleTemplates!.push(ServiceCategoryVehicleTemplate.fromJS(item));
            }
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(ServiceCategoryDocument.fromJS(item));
            }
            if (Array.isArray(_data["personnelDocuments"])) {
                this.personnelDocuments = [] as any;
                for (let item of _data["personnelDocuments"])
                    this.personnelDocuments!.push(ServiceCategoryPersonnelDocument.fromJS(item));
            }
            if (Array.isArray(_data["serviceCategoryRoles"])) {
                this.serviceCategoryRoles = [] as any;
                for (let item of _data["serviceCategoryRoles"])
                    this.serviceCategoryRoles!.push(ServiceCategoryRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ServiceCategoryDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["maxServiceDuration"] = this.maxServiceDuration;
        data["serviceDurationUnit"] = this.serviceDurationUnit;
        data["minOrderDuration"] = this.minOrderDuration;
        data["minOrderDurationUnit"] = this.minOrderDurationUnit;
        data["maxOrderDuration"] = this.maxOrderDuration;
        data["maxOrderDurationUnit"] = this.maxOrderDurationUnit;
        data["maxPersonnelCount"] = this.maxPersonnelCount;
        data["isParallelApprovement"] = this.isParallelApprovement;
        if (Array.isArray(this.serviceCategoryAreas)) {
            data["serviceCategoryAreas"] = [];
            for (let item of this.serviceCategoryAreas)
                data["serviceCategoryAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryBlocks)) {
            data["serviceCategoryBlocks"] = [];
            for (let item of this.serviceCategoryBlocks)
                data["serviceCategoryBlocks"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryBrands)) {
            data["serviceCategoryBrands"] = [];
            for (let item of this.serviceCategoryBrands)
                data["serviceCategoryBrands"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryCompanies)) {
            data["serviceCategoryCompanies"] = [];
            for (let item of this.serviceCategoryCompanies)
                data["serviceCategoryCompanies"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategorySites)) {
            data["serviceCategorySites"] = [];
            for (let item of this.serviceCategorySites)
                data["serviceCategorySites"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryUnits)) {
            data["serviceCategoryUnits"] = [];
            for (let item of this.serviceCategoryUnits)
                data["serviceCategoryUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryZones)) {
            data["serviceCategoryZones"] = [];
            for (let item of this.serviceCategoryZones)
                data["serviceCategoryZones"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryPresenceGroups)) {
            data["serviceCategoryPresenceGroups"] = [];
            for (let item of this.serviceCategoryPresenceGroups)
                data["serviceCategoryPresenceGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.vehicleTemplates)) {
            data["vehicleTemplates"] = [];
            for (let item of this.vehicleTemplates)
                data["vehicleTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        if (Array.isArray(this.personnelDocuments)) {
            data["personnelDocuments"] = [];
            for (let item of this.personnelDocuments)
                data["personnelDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceCategoryRoles)) {
            data["serviceCategoryRoles"] = [];
            for (let item of this.serviceCategoryRoles)
                data["serviceCategoryRoles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IServiceCategoryDetails {
    id?: number;
    serviceCategory?: ServiceCategory | undefined;
    maxServiceDuration?: number;
    serviceDurationUnit?: TimeUnit;
    minOrderDuration?: number;
    minOrderDurationUnit?: TimeUnit;
    maxOrderDuration?: number;
    maxOrderDurationUnit?: TimeUnit;
    maxPersonnelCount?: number;
    isParallelApprovement?: boolean;
    serviceCategoryAreas?: ServiceCategoryArea[] | undefined;
    serviceCategoryBlocks?: ServiceCategoryBlock[] | undefined;
    serviceCategoryBrands?: ServiceCategoryBrand[] | undefined;
    serviceCategoryCompanies?: ServiceCategoryCompany[] | undefined;
    serviceCategorySites?: ServiceCategorySite[] | undefined;
    serviceCategoryUnits?: ServiceCategoryUnit[] | undefined;
    serviceCategoryZones?: ServiceCategoryZone[] | undefined;
    serviceCategoryPresenceGroups?: ServiceCategoryPresenceGroup[] | undefined;
    vehicleTemplates?: ServiceCategoryVehicleTemplate[] | undefined;
    documents?: ServiceCategoryDocument[] | undefined;
    personnelDocuments?: ServiceCategoryPersonnelDocument[] | undefined;
    serviceCategoryRoles?: ServiceCategoryRole[] | undefined;
}

export class ServiceCategoryArea extends LightBaseEntityOfInteger implements IServiceCategoryArea {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    areaId?: number;

    constructor(data?: IServiceCategoryArea) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): ServiceCategoryArea {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["areaId"] = this.areaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryArea extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    areaId?: number;
}

export class ServiceCategoryBlock extends LightBaseEntityOfInteger implements IServiceCategoryBlock {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    blockId?: string;

    constructor(data?: IServiceCategoryBlock) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.blockId = _data["blockId"];
        }
    }

    static fromJS(data: any): ServiceCategoryBlock {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["blockId"] = this.blockId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryBlock extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    blockId?: string;
}

export class ServiceCategoryBrand extends LightBaseEntityOfInteger implements IServiceCategoryBrand {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    brandId?: number;

    constructor(data?: IServiceCategoryBrand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): ServiceCategoryBrand {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryBrand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["brandId"] = this.brandId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryBrand extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    brandId?: number;
}

export class ServiceCategoryCompany extends LightBaseEntityOfInteger implements IServiceCategoryCompany {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    companyId?: number;

    constructor(data?: IServiceCategoryCompany) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): ServiceCategoryCompany {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["companyId"] = this.companyId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryCompany extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    companyId?: number;
}

export class ServiceCategorySite extends LightBaseEntityOfInteger implements IServiceCategorySite {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    siteId?: string;

    constructor(data?: IServiceCategorySite) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.siteId = _data["siteId"];
        }
    }

    static fromJS(data: any): ServiceCategorySite {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategorySite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["siteId"] = this.siteId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategorySite extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    siteId?: string;
}

export class ServiceCategoryUnit extends LightBaseEntityOfInteger implements IServiceCategoryUnit {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    unitId?: number;

    constructor(data?: IServiceCategoryUnit) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.unitId = _data["unitId"];
        }
    }

    static fromJS(data: any): ServiceCategoryUnit {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["unitId"] = this.unitId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryUnit extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    unitId?: number;
}

export class ServiceCategoryZone extends LightBaseEntityOfInteger implements IServiceCategoryZone {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    zoneId?: string;

    constructor(data?: IServiceCategoryZone) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.zoneId = _data["zoneId"];
        }
    }

    static fromJS(data: any): ServiceCategoryZone {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryZone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["zoneId"] = this.zoneId;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryZone extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    zoneId?: string;
}

export class ServiceCategoryPresenceGroup extends LightBaseEntityOfInteger implements IServiceCategoryPresenceGroup {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;

    constructor(data?: IServiceCategoryPresenceGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServiceCategoryPresenceGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryPresenceGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryPresenceGroup extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
}

export class PresenceGroup extends BaseEntityOfInteger implements IPresenceGroup {
    name?: string | undefined;
    presenceGroupAreas?: PresenceGroupArea[] | undefined;
    presenceGroupBlocks?: PresenceGroupBlock[] | undefined;
    presenceGroupCompanies?: PresenceGroupCompany[] | undefined;
    presenceGroupBrands?: PresenceGroupBrand[] | undefined;
    presenceGroupSites?: PresenceGroupSite[] | undefined;
    presenceGroupUnits?: PresenceGroupUnit[] | undefined;
    presenceGroupZones?: PresenceGroupZone[] | undefined;

    constructor(data?: IPresenceGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["presenceGroupAreas"])) {
                this.presenceGroupAreas = [] as any;
                for (let item of _data["presenceGroupAreas"])
                    this.presenceGroupAreas!.push(PresenceGroupArea.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupBlocks"])) {
                this.presenceGroupBlocks = [] as any;
                for (let item of _data["presenceGroupBlocks"])
                    this.presenceGroupBlocks!.push(PresenceGroupBlock.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupCompanies"])) {
                this.presenceGroupCompanies = [] as any;
                for (let item of _data["presenceGroupCompanies"])
                    this.presenceGroupCompanies!.push(PresenceGroupCompany.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupBrands"])) {
                this.presenceGroupBrands = [] as any;
                for (let item of _data["presenceGroupBrands"])
                    this.presenceGroupBrands!.push(PresenceGroupBrand.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupSites"])) {
                this.presenceGroupSites = [] as any;
                for (let item of _data["presenceGroupSites"])
                    this.presenceGroupSites!.push(PresenceGroupSite.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupUnits"])) {
                this.presenceGroupUnits = [] as any;
                for (let item of _data["presenceGroupUnits"])
                    this.presenceGroupUnits!.push(PresenceGroupUnit.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupZones"])) {
                this.presenceGroupZones = [] as any;
                for (let item of _data["presenceGroupZones"])
                    this.presenceGroupZones!.push(PresenceGroupZone.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PresenceGroup {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.presenceGroupAreas)) {
            data["presenceGroupAreas"] = [];
            for (let item of this.presenceGroupAreas)
                data["presenceGroupAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupBlocks)) {
            data["presenceGroupBlocks"] = [];
            for (let item of this.presenceGroupBlocks)
                data["presenceGroupBlocks"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupCompanies)) {
            data["presenceGroupCompanies"] = [];
            for (let item of this.presenceGroupCompanies)
                data["presenceGroupCompanies"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupBrands)) {
            data["presenceGroupBrands"] = [];
            for (let item of this.presenceGroupBrands)
                data["presenceGroupBrands"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupSites)) {
            data["presenceGroupSites"] = [];
            for (let item of this.presenceGroupSites)
                data["presenceGroupSites"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupUnits)) {
            data["presenceGroupUnits"] = [];
            for (let item of this.presenceGroupUnits)
                data["presenceGroupUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupZones)) {
            data["presenceGroupZones"] = [];
            for (let item of this.presenceGroupZones)
                data["presenceGroupZones"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroup extends IBaseEntityOfInteger {
    name?: string | undefined;
    presenceGroupAreas?: PresenceGroupArea[] | undefined;
    presenceGroupBlocks?: PresenceGroupBlock[] | undefined;
    presenceGroupCompanies?: PresenceGroupCompany[] | undefined;
    presenceGroupBrands?: PresenceGroupBrand[] | undefined;
    presenceGroupSites?: PresenceGroupSite[] | undefined;
    presenceGroupUnits?: PresenceGroupUnit[] | undefined;
    presenceGroupZones?: PresenceGroupZone[] | undefined;
}

export class PresenceGroupArea extends LightBaseEntityOfInteger implements IPresenceGroupArea {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    areaId?: number;

    constructor(data?: IPresenceGroupArea) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): PresenceGroupArea {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["areaId"] = this.areaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupArea extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    areaId?: number;
}

export class PresenceGroupBlock extends LightBaseEntityOfInteger implements IPresenceGroupBlock {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    blockId?: string;

    constructor(data?: IPresenceGroupBlock) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.blockId = _data["blockId"];
        }
    }

    static fromJS(data: any): PresenceGroupBlock {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["blockId"] = this.blockId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupBlock extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    blockId?: string;
}

export class PresenceGroupCompany extends LightBaseEntityOfInteger implements IPresenceGroupCompany {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    companyId?: number;

    constructor(data?: IPresenceGroupCompany) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): PresenceGroupCompany {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["companyId"] = this.companyId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupCompany extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    companyId?: number;
}

export class PresenceGroupBrand extends LightBaseEntityOfInteger implements IPresenceGroupBrand {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    brandId?: number;

    constructor(data?: IPresenceGroupBrand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): PresenceGroupBrand {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupBrand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["brandId"] = this.brandId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupBrand extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    brandId?: number;
}

export class PresenceGroupSite extends LightBaseEntityOfInteger implements IPresenceGroupSite {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    siteId?: string;

    constructor(data?: IPresenceGroupSite) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.siteId = _data["siteId"];
        }
    }

    static fromJS(data: any): PresenceGroupSite {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["siteId"] = this.siteId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupSite extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    siteId?: string;
}

export class PresenceGroupUnit extends LightBaseEntityOfInteger implements IPresenceGroupUnit {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    unitId?: number;

    constructor(data?: IPresenceGroupUnit) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.unitId = _data["unitId"];
        }
    }

    static fromJS(data: any): PresenceGroupUnit {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["unitId"] = this.unitId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupUnit extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    unitId?: number;
}

export class PresenceGroupZone extends LightBaseEntityOfInteger implements IPresenceGroupZone {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    zoneId?: string;

    constructor(data?: IPresenceGroupZone) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroup = _data["presenceGroup"] ? PresenceGroup.fromJS(_data["presenceGroup"]) : <any>undefined;
            this.zoneId = _data["zoneId"];
        }
    }

    static fromJS(data: any): PresenceGroupZone {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupZone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroup"] = this.presenceGroup ? this.presenceGroup.toJSON() : <any>undefined;
        data["zoneId"] = this.zoneId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupZone extends ILightBaseEntityOfInteger {
    presenceGroupId?: number;
    presenceGroup?: PresenceGroup | undefined;
    zoneId?: string;
}

export class ServiceCategoryVehicleTemplate extends LightBaseEntityOfInteger implements IServiceCategoryVehicleTemplate {
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    vehicleTemplateDocuments?: ServiceCategoryVehicleTemplateDocument[] | undefined;

    constructor(data?: IServiceCategoryVehicleTemplate) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.vehicleTemplateId = _data["vehicleTemplateId"];
            this.vehicleTemplate = _data["vehicleTemplate"] ? VehicleTemplate.fromJS(_data["vehicleTemplate"]) : <any>undefined;
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            if (Array.isArray(_data["vehicleTemplateDocuments"])) {
                this.vehicleTemplateDocuments = [] as any;
                for (let item of _data["vehicleTemplateDocuments"])
                    this.vehicleTemplateDocuments!.push(ServiceCategoryVehicleTemplateDocument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ServiceCategoryVehicleTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryVehicleTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        data["vehicleTemplate"] = this.vehicleTemplate ? this.vehicleTemplate.toJSON() : <any>undefined;
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        if (Array.isArray(this.vehicleTemplateDocuments)) {
            data["vehicleTemplateDocuments"] = [];
            for (let item of this.vehicleTemplateDocuments)
                data["vehicleTemplateDocuments"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryVehicleTemplate extends ILightBaseEntityOfInteger {
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    vehicleTemplateDocuments?: ServiceCategoryVehicleTemplateDocument[] | undefined;
}

export class VehicleTemplate extends BaseEntityOfInteger implements IVehicleTemplate {
    name?: string | undefined;
    isNeedDriver?: boolean;
    vehicleTemplateDocuments?: VehicleTemplateDocument[] | undefined;
    driverDocuments?: VehicleTemplateDriverDocument[] | undefined;

    constructor(data?: IVehicleTemplate) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.isNeedDriver = _data["isNeedDriver"];
            if (Array.isArray(_data["vehicleTemplateDocuments"])) {
                this.vehicleTemplateDocuments = [] as any;
                for (let item of _data["vehicleTemplateDocuments"])
                    this.vehicleTemplateDocuments!.push(VehicleTemplateDocument.fromJS(item));
            }
            if (Array.isArray(_data["driverDocuments"])) {
                this.driverDocuments = [] as any;
                for (let item of _data["driverDocuments"])
                    this.driverDocuments!.push(VehicleTemplateDriverDocument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VehicleTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isNeedDriver"] = this.isNeedDriver;
        if (Array.isArray(this.vehicleTemplateDocuments)) {
            data["vehicleTemplateDocuments"] = [];
            for (let item of this.vehicleTemplateDocuments)
                data["vehicleTemplateDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.driverDocuments)) {
            data["driverDocuments"] = [];
            for (let item of this.driverDocuments)
                data["driverDocuments"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IVehicleTemplate extends IBaseEntityOfInteger {
    name?: string | undefined;
    isNeedDriver?: boolean;
    vehicleTemplateDocuments?: VehicleTemplateDocument[] | undefined;
    driverDocuments?: VehicleTemplateDriverDocument[] | undefined;
}

export class VehicleTemplateDocument extends LightBaseEntityOfInteger implements IVehicleTemplateDocument {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;

    constructor(data?: IVehicleTemplateDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.vehicleTemplateId = _data["vehicleTemplateId"];
            this.vehicleTemplate = _data["vehicleTemplate"] ? VehicleTemplate.fromJS(_data["vehicleTemplate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleTemplateDocument {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplateDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        data["vehicleTemplate"] = this.vehicleTemplate ? this.vehicleTemplate.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IVehicleTemplateDocument extends ILightBaseEntityOfInteger {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;
}

export class DocumentTemplate extends BaseEntityOfInteger implements IDocumentTemplate {
    name?: string | undefined;
    hasValidationDate?: boolean;
    documentTemplateFileTypes?: DocumentTemplateFileType[] | undefined;
    documentTemplateTypeId?: number;
    documentTemplateType?: DocumentTemplateType | undefined;
    forms?: DocumentTemplateForm[] | undefined;

    constructor(data?: IDocumentTemplate) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.hasValidationDate = _data["hasValidationDate"];
            if (Array.isArray(_data["documentTemplateFileTypes"])) {
                this.documentTemplateFileTypes = [] as any;
                for (let item of _data["documentTemplateFileTypes"])
                    this.documentTemplateFileTypes!.push(DocumentTemplateFileType.fromJS(item));
            }
            this.documentTemplateTypeId = _data["documentTemplateTypeId"];
            this.documentTemplateType = _data["documentTemplateType"] ? DocumentTemplateType.fromJS(_data["documentTemplateType"]) : <any>undefined;
            if (Array.isArray(_data["forms"])) {
                this.forms = [] as any;
                for (let item of _data["forms"])
                    this.forms!.push(DocumentTemplateForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["hasValidationDate"] = this.hasValidationDate;
        if (Array.isArray(this.documentTemplateFileTypes)) {
            data["documentTemplateFileTypes"] = [];
            for (let item of this.documentTemplateFileTypes)
                data["documentTemplateFileTypes"].push(item.toJSON());
        }
        data["documentTemplateTypeId"] = this.documentTemplateTypeId;
        data["documentTemplateType"] = this.documentTemplateType ? this.documentTemplateType.toJSON() : <any>undefined;
        if (Array.isArray(this.forms)) {
            data["forms"] = [];
            for (let item of this.forms)
                data["forms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentTemplate extends IBaseEntityOfInteger {
    name?: string | undefined;
    hasValidationDate?: boolean;
    documentTemplateFileTypes?: DocumentTemplateFileType[] | undefined;
    documentTemplateTypeId?: number;
    documentTemplateType?: DocumentTemplateType | undefined;
    forms?: DocumentTemplateForm[] | undefined;
}

export class DocumentTemplateFileType extends LightBaseEntityOfInteger implements IDocumentTemplateFileType {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    fileType?: DocumentFileType;

    constructor(data?: IDocumentTemplateFileType) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.fileType = _data["fileType"];
        }
    }

    static fromJS(data: any): DocumentTemplateFileType {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTemplateFileType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["fileType"] = this.fileType;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentTemplateFileType extends ILightBaseEntityOfInteger {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    fileType?: DocumentFileType;
}

export enum DocumentFileType {
    PDF = 0,
    Word = 1,
    TxtFile = 2,
}

export class DocumentTemplateType extends LightBaseEntityOfInteger implements IDocumentTemplateType {
    name?: string | undefined;

    constructor(data?: IDocumentTemplateType) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): DocumentTemplateType {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTemplateType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentTemplateType extends ILightBaseEntityOfInteger {
    name?: string | undefined;
}

export class DocumentTemplateForm extends LightBaseEntityOfInteger implements IDocumentTemplateForm {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    formId?: number;
    form?: Form | undefined;

    constructor(data?: IDocumentTemplateForm) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.formId = _data["formId"];
            this.form = _data["form"] ? Form.fromJS(_data["form"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentTemplateForm {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTemplateForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["formId"] = this.formId;
        data["form"] = this.form ? this.form.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDocumentTemplateForm extends ILightBaseEntityOfInteger {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    formId?: number;
    form?: Form | undefined;
}

export class Form extends BaseEntityOfInteger implements IForm {
    name?: string | undefined;
    questions?: Question[] | undefined;
    documentTemplates?: DocumentTemplateForm[] | undefined;

    constructor(data?: IForm) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(Question.fromJS(item));
            }
            if (Array.isArray(_data["documentTemplates"])) {
                this.documentTemplates = [] as any;
                for (let item of _data["documentTemplates"])
                    this.documentTemplates!.push(DocumentTemplateForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Form {
        data = typeof data === 'object' ? data : {};
        let result = new Form();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        if (Array.isArray(this.documentTemplates)) {
            data["documentTemplates"] = [];
            for (let item of this.documentTemplates)
                data["documentTemplates"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IForm extends IBaseEntityOfInteger {
    name?: string | undefined;
    questions?: Question[] | undefined;
    documentTemplates?: DocumentTemplateForm[] | undefined;
}

export class Question extends LightBaseEntityOfInteger implements IQuestion {
    name?: string | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: DateQuestionOptions | undefined;
    fileQuestionOptions?: FileQuestionOptions | undefined;
    multiChoicesOptions?: MultiChoicesOption[] | undefined;
    formId?: number;
    form?: Form | undefined;

    constructor(data?: IQuestion) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.questionType = _data["questionType"];
            this.answersCount = _data["answersCount"];
            this.dateQuestionOptions = _data["dateQuestionOptions"] ? DateQuestionOptions.fromJS(_data["dateQuestionOptions"]) : <any>undefined;
            this.fileQuestionOptions = _data["fileQuestionOptions"] ? FileQuestionOptions.fromJS(_data["fileQuestionOptions"]) : <any>undefined;
            if (Array.isArray(_data["multiChoicesOptions"])) {
                this.multiChoicesOptions = [] as any;
                for (let item of _data["multiChoicesOptions"])
                    this.multiChoicesOptions!.push(MultiChoicesOption.fromJS(item));
            }
            this.formId = _data["formId"];
            this.form = _data["form"] ? Form.fromJS(_data["form"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Question {
        data = typeof data === 'object' ? data : {};
        let result = new Question();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["questionType"] = this.questionType;
        data["answersCount"] = this.answersCount;
        data["dateQuestionOptions"] = this.dateQuestionOptions ? this.dateQuestionOptions.toJSON() : <any>undefined;
        data["fileQuestionOptions"] = this.fileQuestionOptions ? this.fileQuestionOptions.toJSON() : <any>undefined;
        if (Array.isArray(this.multiChoicesOptions)) {
            data["multiChoicesOptions"] = [];
            for (let item of this.multiChoicesOptions)
                data["multiChoicesOptions"].push(item.toJSON());
        }
        data["formId"] = this.formId;
        data["form"] = this.form ? this.form.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IQuestion extends ILightBaseEntityOfInteger {
    name?: string | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: DateQuestionOptions | undefined;
    fileQuestionOptions?: FileQuestionOptions | undefined;
    multiChoicesOptions?: MultiChoicesOption[] | undefined;
    formId?: number;
    form?: Form | undefined;
}

export enum QuestionType {
    MultiAnswers = 0,
    OneOfMany = 1,
    DateAnswer = 2,
    FileAnswer = 3,
    TextAnswer = 4,
}

export class DateQuestionOptions extends LightBaseEntityOfInteger implements IDateQuestionOptions {
    isMultiDate?: boolean;
    questionId?: number;
    question?: Question | undefined;

    constructor(data?: IDateQuestionOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isMultiDate = _data["isMultiDate"];
            this.questionId = _data["questionId"];
            this.question = _data["question"] ? Question.fromJS(_data["question"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DateQuestionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DateQuestionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isMultiDate"] = this.isMultiDate;
        data["questionId"] = this.questionId;
        data["question"] = this.question ? this.question.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IDateQuestionOptions extends ILightBaseEntityOfInteger {
    isMultiDate?: boolean;
    questionId?: number;
    question?: Question | undefined;
}

export class FileQuestionOptions extends LightBaseEntityOfInteger implements IFileQuestionOptions {
    documentFileType?: DocumentFileType;
    questionId?: number;
    question?: Question | undefined;

    constructor(data?: IFileQuestionOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentFileType = _data["documentFileType"];
            this.questionId = _data["questionId"];
            this.question = _data["question"] ? Question.fromJS(_data["question"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FileQuestionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new FileQuestionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentFileType"] = this.documentFileType;
        data["questionId"] = this.questionId;
        data["question"] = this.question ? this.question.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFileQuestionOptions extends ILightBaseEntityOfInteger {
    documentFileType?: DocumentFileType;
    questionId?: number;
    question?: Question | undefined;
}

export class MultiChoicesOption extends LightBaseEntityOfInteger implements IMultiChoicesOption {
    choice?: string | undefined;
    questionId?: number;
    question?: Question | undefined;

    constructor(data?: IMultiChoicesOption) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.choice = _data["choice"];
            this.questionId = _data["questionId"];
            this.question = _data["question"] ? Question.fromJS(_data["question"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MultiChoicesOption {
        data = typeof data === 'object' ? data : {};
        let result = new MultiChoicesOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["choice"] = this.choice;
        data["questionId"] = this.questionId;
        data["question"] = this.question ? this.question.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IMultiChoicesOption extends ILightBaseEntityOfInteger {
    choice?: string | undefined;
    questionId?: number;
    question?: Question | undefined;
}

export class VehicleTemplateDriverDocument extends LightBaseEntityOfInteger implements IVehicleTemplateDriverDocument {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;

    constructor(data?: IVehicleTemplateDriverDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.vehicleTemplateId = _data["vehicleTemplateId"];
            this.vehicleTemplate = _data["vehicleTemplate"] ? VehicleTemplate.fromJS(_data["vehicleTemplate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleTemplateDriverDocument {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTemplateDriverDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["vehicleTemplateId"] = this.vehicleTemplateId;
        data["vehicleTemplate"] = this.vehicleTemplate ? this.vehicleTemplate.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IVehicleTemplateDriverDocument extends ILightBaseEntityOfInteger {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    vehicleTemplateId?: number;
    vehicleTemplate?: VehicleTemplate | undefined;
}

export class ServiceCategoryVehicleTemplateDocument extends LightBaseEntityOfInteger implements IServiceCategoryVehicleTemplateDocument {
    vehicleTemplateCategoryId?: number;
    serviceCategoryVehicleTemplate?: ServiceCategoryVehicleTemplate | undefined;
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;

    constructor(data?: IServiceCategoryVehicleTemplateDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.vehicleTemplateCategoryId = _data["vehicleTemplateCategoryId"];
            this.serviceCategoryVehicleTemplate = _data["serviceCategoryVehicleTemplate"] ? ServiceCategoryVehicleTemplate.fromJS(_data["serviceCategoryVehicleTemplate"]) : <any>undefined;
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.isRequired = _data["isRequired"];
            this.vehicleDocumentType = _data["vehicleDocumentType"];
        }
    }

    static fromJS(data: any): ServiceCategoryVehicleTemplateDocument {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryVehicleTemplateDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleTemplateCategoryId"] = this.vehicleTemplateCategoryId;
        data["serviceCategoryVehicleTemplate"] = this.serviceCategoryVehicleTemplate ? this.serviceCategoryVehicleTemplate.toJSON() : <any>undefined;
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["isRequired"] = this.isRequired;
        data["vehicleDocumentType"] = this.vehicleDocumentType;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryVehicleTemplateDocument extends ILightBaseEntityOfInteger {
    vehicleTemplateCategoryId?: number;
    serviceCategoryVehicleTemplate?: ServiceCategoryVehicleTemplate | undefined;
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    isRequired?: boolean;
    vehicleDocumentType?: VehicleDocumentType;
}

export class ServiceCategoryDocument extends LightBaseEntityOfInteger implements IServiceCategoryDocument {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    isRequired?: boolean;

    constructor(data?: IServiceCategoryDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): ServiceCategoryDocument {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["isRequired"] = this.isRequired;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryDocument extends ILightBaseEntityOfInteger {
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    isRequired?: boolean;
}

export class ServiceCategoryPersonnelDocument extends LightBaseEntityOfInteger implements IServiceCategoryPersonnelDocument {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    isRequired?: boolean;

    constructor(data?: IServiceCategoryPersonnelDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.serviceCategoryId = _data["serviceCategoryId"];
            this.serviceCategory = _data["serviceCategory"] ? ServiceCategory.fromJS(_data["serviceCategory"]) : <any>undefined;
            this.documentTemplateId = _data["documentTemplateId"];
            this.documentTemplate = _data["documentTemplate"] ? DocumentTemplate.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.isRequired = _data["isRequired"];
        }
    }

    static fromJS(data: any): ServiceCategoryPersonnelDocument {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryPersonnelDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serviceCategoryId"] = this.serviceCategoryId;
        data["serviceCategory"] = this.serviceCategory ? this.serviceCategory.toJSON() : <any>undefined;
        data["documentTemplateId"] = this.documentTemplateId;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["isRequired"] = this.isRequired;
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceCategoryPersonnelDocument extends ILightBaseEntityOfInteger {
    serviceCategoryId?: number;
    serviceCategory?: ServiceCategory | undefined;
    documentTemplateId?: number;
    documentTemplate?: DocumentTemplate | undefined;
    isRequired?: boolean;
}

export class ServiceCategoryAreaDto implements IServiceCategoryAreaDto {
    areaId?: number;
    name?: string | undefined;

    constructor(data?: IServiceCategoryAreaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaId = _data["areaId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryAreaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryAreaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaId"] = this.areaId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryAreaDto {
    areaId?: number;
    name?: string | undefined;
}

export class ServiceCategoryBlockDto implements IServiceCategoryBlockDto {
    blockId?: string;
    name?: string | undefined;

    constructor(data?: IServiceCategoryBlockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blockId = _data["blockId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryBlockDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryBlockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blockId"] = this.blockId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryBlockDto {
    blockId?: string;
    name?: string | undefined;
}

export class ServiceCategoryBrandDto implements IServiceCategoryBrandDto {
    brandId?: number;
    name?: string | undefined;

    constructor(data?: IServiceCategoryBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryBrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryBrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryBrandDto {
    brandId?: number;
    name?: string | undefined;
}

export class ServiceCategoryCompanyDto implements IServiceCategoryCompanyDto {
    companyId?: number;
    name?: string | undefined;

    constructor(data?: IServiceCategoryCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryCompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryCompanyDto {
    companyId?: number;
    name?: string | undefined;
}

export class ServiceCategorySiteDto implements IServiceCategorySiteDto {
    siteId?: string;
    name?: string | undefined;

    constructor(data?: IServiceCategorySiteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategorySiteDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategorySiteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategorySiteDto {
    siteId?: string;
    name?: string | undefined;
}

export class ServiceCategoryUnitDto implements IServiceCategoryUnitDto {
    unitId?: number;
    name?: string | undefined;

    constructor(data?: IServiceCategoryUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitId = _data["unitId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryUnitDto {
    unitId?: number;
    name?: string | undefined;
}

export class ServiceCategoryZoneDto implements IServiceCategoryZoneDto {
    zoneId?: string;
    name?: string | undefined;

    constructor(data?: IServiceCategoryZoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zoneId = _data["zoneId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ServiceCategoryZoneDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryZoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoneId"] = this.zoneId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IServiceCategoryZoneDto {
    zoneId?: string;
    name?: string | undefined;
}

export class ServiceCategoryPresenceGroupDto implements IServiceCategoryPresenceGroupDto {
    presenceGroupId?: number;
    presenceGroupName?: string | undefined;

    constructor(data?: IServiceCategoryPresenceGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.presenceGroupName = _data["presenceGroupName"];
        }
    }

    static fromJS(data: any): ServiceCategoryPresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceCategoryPresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["presenceGroupName"] = this.presenceGroupName;
        return data; 
    }
}

export interface IServiceCategoryPresenceGroupDto {
    presenceGroupId?: number;
    presenceGroupName?: string | undefined;
}

export class EditServiceCategoryCommand extends CreateServiceCategoryCommand implements IEditServiceCategoryCommand {
    id?: number;

    constructor(data?: IEditServiceCategoryCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditServiceCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditServiceCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditServiceCategoryCommand extends ICreateServiceCategoryCommand {
    id?: number;
}

export class RemoveServiceCategoryCommand implements IRemoveServiceCategoryCommand {
    id?: number;

    constructor(data?: IRemoveServiceCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveServiceCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveServiceCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveServiceCategoryCommand {
    id?: number;
}

export class ApplicationResponseOfUserGroupApproversDto implements IApplicationResponseOfUserGroupApproversDto {
    isError?: boolean;
    message?: string | undefined;
    result?: UserGroupApproversDto | undefined;

    constructor(data?: IApplicationResponseOfUserGroupApproversDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? UserGroupApproversDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfUserGroupApproversDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfUserGroupApproversDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfUserGroupApproversDto {
    isError?: boolean;
    message?: string | undefined;
    result?: UserGroupApproversDto | undefined;
}

export class ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto implements IApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfGetPersonnelDetailsDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfGetPersonnelDetailsDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfGetPersonnelDetailsDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfGetPersonnelDetailsDto | undefined;
}

export class TableResponseModelOfGetPersonnelDetailsDto implements ITableResponseModelOfGetPersonnelDetailsDto {
    data?: GetPersonnelDetailsDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfGetPersonnelDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetPersonnelDetailsDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfGetPersonnelDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfGetPersonnelDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfGetPersonnelDetailsDto {
    data?: GetPersonnelDetailsDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class GetPersonnelDetailsDto implements IGetPersonnelDetailsDto {
    personnelId?: number;
    personnelName?: string | undefined;

    constructor(data?: IGetPersonnelDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personnelId = _data["personnelId"];
            this.personnelName = _data["personnelName"];
        }
    }

    static fromJS(data: any): GetPersonnelDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPersonnelDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personnelId"] = this.personnelId;
        data["personnelName"] = this.personnelName;
        return data; 
    }
}

export interface IGetPersonnelDetailsDto {
    personnelId?: number;
    personnelName?: string | undefined;
}

export class ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto implements IApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicDocumentTemplateDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfBasicDocumentTemplateDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfBasicDocumentTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicDocumentTemplateDto | undefined;
}

export class TableResponseModelOfBasicDocumentTemplateDto implements ITableResponseModelOfBasicDocumentTemplateDto {
    data?: BasicDocumentTemplateDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfBasicDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BasicDocumentTemplateDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfBasicDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfBasicDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfBasicDocumentTemplateDto {
    data?: BasicDocumentTemplateDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class BasicDocumentTemplateDto implements IBasicDocumentTemplateDto {
    id?: number;
    uniqueCode?: string | undefined;
    name?: LanguageString | undefined;

    constructor(data?: IBasicDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueCode = _data["uniqueCode"];
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BasicDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueCode"] = this.uniqueCode;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBasicDocumentTemplateDto {
    id?: number;
    uniqueCode?: string | undefined;
    name?: LanguageString | undefined;
}

export class TableRequestModel implements ITableRequestModel {
    pageNumber?: number;
    pageSize?: number;

    constructor(data?: ITableRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): TableRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new TableRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface ITableRequestModel {
    pageNumber?: number;
    pageSize?: number;
}

export class GetAreaDocumentsQuery extends TableRequestModel implements IGetAreaDocumentsQuery {
    areaId?: number;

    constructor(data?: IGetAreaDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): GetAreaDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAreaDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaId"] = this.areaId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAreaDocumentsQuery extends ITableRequestModel {
    areaId?: number;
}

export class GetBlockDocumentsQuery extends TableRequestModel implements IGetBlockDocumentsQuery {
    blockId?: string;

    constructor(data?: IGetBlockDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.blockId = _data["blockId"];
        }
    }

    static fromJS(data: any): GetBlockDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBlockDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blockId"] = this.blockId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetBlockDocumentsQuery extends ITableRequestModel {
    blockId?: string;
}

export class GetBrandDocumentsQuery extends TableRequestModel implements IGetBrandDocumentsQuery {
    brandId?: number;

    constructor(data?: IGetBrandDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.brandId = _data["brandId"];
        }
    }

    static fromJS(data: any): GetBrandDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBrandDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetBrandDocumentsQuery extends ITableRequestModel {
    brandId?: number;
}

export class GetCompanyDocumentsQuery extends TableRequestModel implements IGetCompanyDocumentsQuery {
    companyId?: number;

    constructor(data?: IGetCompanyDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): GetCompanyDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCompanyDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetCompanyDocumentsQuery extends ITableRequestModel {
    companyId?: number;
}

export class GetSiteDocumentsQuery extends TableRequestModel implements IGetSiteDocumentsQuery {
    siteId?: string;

    constructor(data?: IGetSiteDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteId = _data["siteId"];
        }
    }

    static fromJS(data: any): GetSiteDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetSiteDocumentsQuery extends ITableRequestModel {
    siteId?: string;
}

export class GetUnitDocumentsQuery extends TableRequestModel implements IGetUnitDocumentsQuery {
    unitId?: number;

    constructor(data?: IGetUnitDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.unitId = _data["unitId"];
        }
    }

    static fromJS(data: any): GetUnitDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetUnitDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetUnitDocumentsQuery extends ITableRequestModel {
    unitId?: number;
}

export class GetZoneDocumentsQuery extends TableRequestModel implements IGetZoneDocumentsQuery {
    zoneId?: string;

    constructor(data?: IGetZoneDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.zoneId = _data["zoneId"];
        }
    }

    static fromJS(data: any): GetZoneDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetZoneDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoneId"] = this.zoneId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetZoneDocumentsQuery extends ITableRequestModel {
    zoneId?: string;
}

export class CreateAreaDocumentsCommand implements ICreateAreaDocumentsCommand {
    areaId?: number;
    documentTemplateId?: number;

    constructor(data?: ICreateAreaDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaId = _data["areaId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateAreaDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAreaDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaId"] = this.areaId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateAreaDocumentsCommand {
    areaId?: number;
    documentTemplateId?: number;
}

export class CreateBlockDocumentsCommand implements ICreateBlockDocumentsCommand {
    blockId?: string;
    documentTemplateId?: number;

    constructor(data?: ICreateBlockDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blockId = _data["blockId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateBlockDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBlockDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blockId"] = this.blockId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateBlockDocumentsCommand {
    blockId?: string;
    documentTemplateId?: number;
}

export class CreateBrandDocumentsCommand implements ICreateBrandDocumentsCommand {
    brandId?: number;
    documentTemplateId?: number;

    constructor(data?: ICreateBrandDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateBrandDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateBrandDocumentsCommand {
    brandId?: number;
    documentTemplateId?: number;
}

export class CreateCompanyDocumentsCommand implements ICreateCompanyDocumentsCommand {
    companyId?: number;
    documentTemplateId?: number;

    constructor(data?: ICreateCompanyDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateCompanyDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateCompanyDocumentsCommand {
    companyId?: number;
    documentTemplateId?: number;
}

export class CreateSiteDocumentsCommand implements ICreateSiteDocumentsCommand {
    siteId?: string;
    documentTemplateId?: number;

    constructor(data?: ICreateSiteDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateSiteDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSiteDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateSiteDocumentsCommand {
    siteId?: string;
    documentTemplateId?: number;
}

export class CreateUnitDocumentsCommand implements ICreateUnitDocumentsCommand {
    unitId?: number;
    documentTemplateId?: number;

    constructor(data?: ICreateUnitDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitId = _data["unitId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateUnitDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUnitDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateUnitDocumentsCommand {
    unitId?: number;
    documentTemplateId?: number;
}

export class CreateZoneDocumentsCommand implements ICreateZoneDocumentsCommand {
    zoneId?: string;
    documentTemplateId?: number;

    constructor(data?: ICreateZoneDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zoneId = _data["zoneId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): CreateZoneDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateZoneDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoneId"] = this.zoneId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface ICreateZoneDocumentsCommand {
    zoneId?: string;
    documentTemplateId?: number;
}

export class RemoveAreaDocumentsCommand implements IRemoveAreaDocumentsCommand {
    areaId?: number;
    documentTemplateId?: number;

    constructor(data?: IRemoveAreaDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaId = _data["areaId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveAreaDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveAreaDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaId"] = this.areaId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveAreaDocumentsCommand {
    areaId?: number;
    documentTemplateId?: number;
}

export class RemoveBlockDocumentsCommand implements IRemoveBlockDocumentsCommand {
    blockId?: string;
    documentTemplateId?: number;

    constructor(data?: IRemoveBlockDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blockId = _data["blockId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveBlockDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveBlockDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blockId"] = this.blockId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveBlockDocumentsCommand {
    blockId?: string;
    documentTemplateId?: number;
}

export class RemoveBrandDocumentsCommand implements IRemoveBrandDocumentsCommand {
    brandId?: number;
    documentTemplateId?: number;

    constructor(data?: IRemoveBrandDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveBrandDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveBrandDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveBrandDocumentsCommand {
    brandId?: number;
    documentTemplateId?: number;
}

export class RemoveCompanyDocumentsCommand implements IRemoveCompanyDocumentsCommand {
    companyId?: number;
    documentTemplateId?: number;

    constructor(data?: IRemoveCompanyDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveCompanyDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCompanyDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveCompanyDocumentsCommand {
    companyId?: number;
    documentTemplateId?: number;
}

export class RemoveSiteDocumentsCommand implements IRemoveSiteDocumentsCommand {
    siteId?: string;
    documentTemplateId?: number;

    constructor(data?: IRemoveSiteDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveSiteDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveSiteDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveSiteDocumentsCommand {
    siteId?: string;
    documentTemplateId?: number;
}

export class RemoveUnitDocumentsCommand implements IRemoveUnitDocumentsCommand {
    unitId?: number;
    documentTemplateId?: number;

    constructor(data?: IRemoveUnitDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitId = _data["unitId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveUnitDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveUnitDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveUnitDocumentsCommand {
    unitId?: number;
    documentTemplateId?: number;
}

export class RemoveZoneDocumentsCommand implements IRemoveZoneDocumentsCommand {
    zoneId?: string;
    documentTemplateId?: number;

    constructor(data?: IRemoveZoneDocumentsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zoneId = _data["zoneId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemoveZoneDocumentsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveZoneDocumentsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoneId"] = this.zoneId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemoveZoneDocumentsCommand {
    zoneId?: string;
    documentTemplateId?: number;
}

export class CreatePresenceGroupCommand implements ICreatePresenceGroupCommand {
    name?: LanguageString | undefined;
    presenceGroupAreas?: number[] | undefined;
    presenceGroupBlocks?: string[] | undefined;
    presenceGroupCompanies?: number[] | undefined;
    presenceGroupBrands?: number[] | undefined;
    presenceGroupSites?: string[] | undefined;
    presenceGroupUnits?: number[] | undefined;
    presenceGroupZones?: string[] | undefined;

    constructor(data?: ICreatePresenceGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            if (Array.isArray(_data["presenceGroupAreas"])) {
                this.presenceGroupAreas = [] as any;
                for (let item of _data["presenceGroupAreas"])
                    this.presenceGroupAreas!.push(item);
            }
            if (Array.isArray(_data["presenceGroupBlocks"])) {
                this.presenceGroupBlocks = [] as any;
                for (let item of _data["presenceGroupBlocks"])
                    this.presenceGroupBlocks!.push(item);
            }
            if (Array.isArray(_data["presenceGroupCompanies"])) {
                this.presenceGroupCompanies = [] as any;
                for (let item of _data["presenceGroupCompanies"])
                    this.presenceGroupCompanies!.push(item);
            }
            if (Array.isArray(_data["presenceGroupBrands"])) {
                this.presenceGroupBrands = [] as any;
                for (let item of _data["presenceGroupBrands"])
                    this.presenceGroupBrands!.push(item);
            }
            if (Array.isArray(_data["presenceGroupSites"])) {
                this.presenceGroupSites = [] as any;
                for (let item of _data["presenceGroupSites"])
                    this.presenceGroupSites!.push(item);
            }
            if (Array.isArray(_data["presenceGroupUnits"])) {
                this.presenceGroupUnits = [] as any;
                for (let item of _data["presenceGroupUnits"])
                    this.presenceGroupUnits!.push(item);
            }
            if (Array.isArray(_data["presenceGroupZones"])) {
                this.presenceGroupZones = [] as any;
                for (let item of _data["presenceGroupZones"])
                    this.presenceGroupZones!.push(item);
            }
        }
    }

    static fromJS(data: any): CreatePresenceGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePresenceGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        if (Array.isArray(this.presenceGroupAreas)) {
            data["presenceGroupAreas"] = [];
            for (let item of this.presenceGroupAreas)
                data["presenceGroupAreas"].push(item);
        }
        if (Array.isArray(this.presenceGroupBlocks)) {
            data["presenceGroupBlocks"] = [];
            for (let item of this.presenceGroupBlocks)
                data["presenceGroupBlocks"].push(item);
        }
        if (Array.isArray(this.presenceGroupCompanies)) {
            data["presenceGroupCompanies"] = [];
            for (let item of this.presenceGroupCompanies)
                data["presenceGroupCompanies"].push(item);
        }
        if (Array.isArray(this.presenceGroupBrands)) {
            data["presenceGroupBrands"] = [];
            for (let item of this.presenceGroupBrands)
                data["presenceGroupBrands"].push(item);
        }
        if (Array.isArray(this.presenceGroupSites)) {
            data["presenceGroupSites"] = [];
            for (let item of this.presenceGroupSites)
                data["presenceGroupSites"].push(item);
        }
        if (Array.isArray(this.presenceGroupUnits)) {
            data["presenceGroupUnits"] = [];
            for (let item of this.presenceGroupUnits)
                data["presenceGroupUnits"].push(item);
        }
        if (Array.isArray(this.presenceGroupZones)) {
            data["presenceGroupZones"] = [];
            for (let item of this.presenceGroupZones)
                data["presenceGroupZones"].push(item);
        }
        return data; 
    }
}

export interface ICreatePresenceGroupCommand {
    name?: LanguageString | undefined;
    presenceGroupAreas?: number[] | undefined;
    presenceGroupBlocks?: string[] | undefined;
    presenceGroupCompanies?: number[] | undefined;
    presenceGroupBrands?: number[] | undefined;
    presenceGroupSites?: string[] | undefined;
    presenceGroupUnits?: number[] | undefined;
    presenceGroupZones?: string[] | undefined;
}

export class ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto implements IApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicPresenceGroupDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfBasicPresenceGroupDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfBasicPresenceGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicPresenceGroupDto | undefined;
}

export class TableResponseModelOfBasicPresenceGroupDto implements ITableResponseModelOfBasicPresenceGroupDto {
    data?: BasicPresenceGroupDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfBasicPresenceGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BasicPresenceGroupDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfBasicPresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfBasicPresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfBasicPresenceGroupDto {
    data?: BasicPresenceGroupDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class BasicPresenceGroupDto implements IBasicPresenceGroupDto {
    name?: LanguageString | undefined;
    uniqueCode?: string | undefined;

    constructor(data?: IBasicPresenceGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.uniqueCode = _data["uniqueCode"];
        }
    }

    static fromJS(data: any): BasicPresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicPresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["uniqueCode"] = this.uniqueCode;
        return data; 
    }
}

export interface IBasicPresenceGroupDto {
    name?: LanguageString | undefined;
    uniqueCode?: string | undefined;
}

export class ApplicationResponseOfPresenceGroupDto implements IApplicationResponseOfPresenceGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: PresenceGroupDto | undefined;

    constructor(data?: IApplicationResponseOfPresenceGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? PresenceGroupDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfPresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfPresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfPresenceGroupDto {
    isError?: boolean;
    message?: string | undefined;
    result?: PresenceGroupDto | undefined;
}

export class PresenceGroupDto extends BasicPresenceGroupDto implements IPresenceGroupDto {
    presenceGroupAreas?: PresenceGroupAreaDto[] | undefined;
    presenceGroupBlocks?: PresenceGroupBlockDto[] | undefined;
    presenceGroupCompanies?: PresenceGroupCompanyDto[] | undefined;
    presenceGroupBrands?: PresenceGroupBrandDto[] | undefined;
    presenceGroupSites?: PresenceGroupSiteDto[] | undefined;
    presenceGroupUnits?: PresenceGroupUnitDto[] | undefined;
    presenceGroupZones?: PresenceGroupZoneDto[] | undefined;

    constructor(data?: IPresenceGroupDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["presenceGroupAreas"])) {
                this.presenceGroupAreas = [] as any;
                for (let item of _data["presenceGroupAreas"])
                    this.presenceGroupAreas!.push(PresenceGroupAreaDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupBlocks"])) {
                this.presenceGroupBlocks = [] as any;
                for (let item of _data["presenceGroupBlocks"])
                    this.presenceGroupBlocks!.push(PresenceGroupBlockDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupCompanies"])) {
                this.presenceGroupCompanies = [] as any;
                for (let item of _data["presenceGroupCompanies"])
                    this.presenceGroupCompanies!.push(PresenceGroupCompanyDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupBrands"])) {
                this.presenceGroupBrands = [] as any;
                for (let item of _data["presenceGroupBrands"])
                    this.presenceGroupBrands!.push(PresenceGroupBrandDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupSites"])) {
                this.presenceGroupSites = [] as any;
                for (let item of _data["presenceGroupSites"])
                    this.presenceGroupSites!.push(PresenceGroupSiteDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupUnits"])) {
                this.presenceGroupUnits = [] as any;
                for (let item of _data["presenceGroupUnits"])
                    this.presenceGroupUnits!.push(PresenceGroupUnitDto.fromJS(item));
            }
            if (Array.isArray(_data["presenceGroupZones"])) {
                this.presenceGroupZones = [] as any;
                for (let item of _data["presenceGroupZones"])
                    this.presenceGroupZones!.push(PresenceGroupZoneDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PresenceGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.presenceGroupAreas)) {
            data["presenceGroupAreas"] = [];
            for (let item of this.presenceGroupAreas)
                data["presenceGroupAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupBlocks)) {
            data["presenceGroupBlocks"] = [];
            for (let item of this.presenceGroupBlocks)
                data["presenceGroupBlocks"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupCompanies)) {
            data["presenceGroupCompanies"] = [];
            for (let item of this.presenceGroupCompanies)
                data["presenceGroupCompanies"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupBrands)) {
            data["presenceGroupBrands"] = [];
            for (let item of this.presenceGroupBrands)
                data["presenceGroupBrands"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupSites)) {
            data["presenceGroupSites"] = [];
            for (let item of this.presenceGroupSites)
                data["presenceGroupSites"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupUnits)) {
            data["presenceGroupUnits"] = [];
            for (let item of this.presenceGroupUnits)
                data["presenceGroupUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.presenceGroupZones)) {
            data["presenceGroupZones"] = [];
            for (let item of this.presenceGroupZones)
                data["presenceGroupZones"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPresenceGroupDto extends IBasicPresenceGroupDto {
    presenceGroupAreas?: PresenceGroupAreaDto[] | undefined;
    presenceGroupBlocks?: PresenceGroupBlockDto[] | undefined;
    presenceGroupCompanies?: PresenceGroupCompanyDto[] | undefined;
    presenceGroupBrands?: PresenceGroupBrandDto[] | undefined;
    presenceGroupSites?: PresenceGroupSiteDto[] | undefined;
    presenceGroupUnits?: PresenceGroupUnitDto[] | undefined;
    presenceGroupZones?: PresenceGroupZoneDto[] | undefined;
}

export class PresenceGroupAreaDto implements IPresenceGroupAreaDto {
    areaId?: number;
    areaName?: string | undefined;

    constructor(data?: IPresenceGroupAreaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaId = _data["areaId"];
            this.areaName = _data["areaName"];
        }
    }

    static fromJS(data: any): PresenceGroupAreaDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupAreaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaId"] = this.areaId;
        data["areaName"] = this.areaName;
        return data; 
    }
}

export interface IPresenceGroupAreaDto {
    areaId?: number;
    areaName?: string | undefined;
}

export class PresenceGroupBlockDto implements IPresenceGroupBlockDto {
    blockId?: string;
    blockName?: string | undefined;

    constructor(data?: IPresenceGroupBlockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.blockId = _data["blockId"];
            this.blockName = _data["blockName"];
        }
    }

    static fromJS(data: any): PresenceGroupBlockDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupBlockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["blockId"] = this.blockId;
        data["blockName"] = this.blockName;
        return data; 
    }
}

export interface IPresenceGroupBlockDto {
    blockId?: string;
    blockName?: string | undefined;
}

export class PresenceGroupCompanyDto implements IPresenceGroupCompanyDto {
    companyId?: number;
    companyName?: string | undefined;

    constructor(data?: IPresenceGroupCompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.companyName = _data["companyName"];
        }
    }

    static fromJS(data: any): PresenceGroupCompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupCompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        return data; 
    }
}

export interface IPresenceGroupCompanyDto {
    companyId?: number;
    companyName?: string | undefined;
}

export class PresenceGroupBrandDto implements IPresenceGroupBrandDto {
    brandId?: number;
    brandName?: string | undefined;

    constructor(data?: IPresenceGroupBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.brandName = _data["brandName"];
        }
    }

    static fromJS(data: any): PresenceGroupBrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupBrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["brandName"] = this.brandName;
        return data; 
    }
}

export interface IPresenceGroupBrandDto {
    brandId?: number;
    brandName?: string | undefined;
}

export class PresenceGroupSiteDto implements IPresenceGroupSiteDto {
    siteId?: string;
    siteName?: string | undefined;

    constructor(data?: IPresenceGroupSiteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"];
            this.siteName = _data["siteName"];
        }
    }

    static fromJS(data: any): PresenceGroupSiteDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupSiteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId;
        data["siteName"] = this.siteName;
        return data; 
    }
}

export interface IPresenceGroupSiteDto {
    siteId?: string;
    siteName?: string | undefined;
}

export class PresenceGroupUnitDto implements IPresenceGroupUnitDto {
    unitId?: number;
    unitName?: string | undefined;

    constructor(data?: IPresenceGroupUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitId = _data["unitId"];
            this.unitName = _data["unitName"];
        }
    }

    static fromJS(data: any): PresenceGroupUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        data["unitName"] = this.unitName;
        return data; 
    }
}

export interface IPresenceGroupUnitDto {
    unitId?: number;
    unitName?: string | undefined;
}

export class PresenceGroupZoneDto implements IPresenceGroupZoneDto {
    zoneId?: string;
    zoneName?: string | undefined;

    constructor(data?: IPresenceGroupZoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zoneId = _data["zoneId"];
            this.zoneName = _data["zoneName"];
        }
    }

    static fromJS(data: any): PresenceGroupZoneDto {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceGroupZoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zoneId"] = this.zoneId;
        data["zoneName"] = this.zoneName;
        return data; 
    }
}

export interface IPresenceGroupZoneDto {
    zoneId?: string;
    zoneName?: string | undefined;
}

export class EditPresenceGroupCommand extends CreatePresenceGroupCommand implements IEditPresenceGroupCommand {
    id?: number;

    constructor(data?: IEditPresenceGroupCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditPresenceGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditPresenceGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditPresenceGroupCommand extends ICreatePresenceGroupCommand {
    id?: number;
}

export class RemovePresenceGroupCommand implements IRemovePresenceGroupCommand {
    id?: number;

    constructor(data?: IRemovePresenceGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemovePresenceGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemovePresenceGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemovePresenceGroupCommand {
    id?: number;
}

export class GetPresenceGroupDocumentsQuery extends TableRequestModel implements IGetPresenceGroupDocumentsQuery {
    presenceGroupId?: number;

    constructor(data?: IGetPresenceGroupDocumentsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
        }
    }

    static fromJS(data: any): GetPresenceGroupDocumentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPresenceGroupDocumentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPresenceGroupDocumentsQuery extends ITableRequestModel {
    presenceGroupId?: number;
}

export class RemovePresenceGroupDocumentCommand implements IRemovePresenceGroupDocumentCommand {
    presenceGroupId?: number;
    documentTemplateId?: number;

    constructor(data?: IRemovePresenceGroupDocumentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.presenceGroupId = _data["presenceGroupId"];
            this.documentTemplateId = _data["documentTemplateId"];
        }
    }

    static fromJS(data: any): RemovePresenceGroupDocumentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemovePresenceGroupDocumentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presenceGroupId"] = this.presenceGroupId;
        data["documentTemplateId"] = this.documentTemplateId;
        return data; 
    }
}

export interface IRemovePresenceGroupDocumentCommand {
    presenceGroupId?: number;
    documentTemplateId?: number;
}

export class CreateFormCommand implements ICreateFormCommand {
    name?: LanguageString | undefined;
    questions?: CreateQuestionRequest[] | undefined;

    constructor(data?: ICreateFormCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(CreateQuestionRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateFormCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFormCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateFormCommand {
    name?: LanguageString | undefined;
    questions?: CreateQuestionRequest[] | undefined;
}

export class CreateQuestionRequest implements ICreateQuestionRequest {
    name?: LanguageString | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: CreateDateQuestionOptions | undefined;
    fileQuestionOptions?: CreateFileQuestionOptions | undefined;
    multiChoicesQuestions?: CreateMultiChoicesOption[] | undefined;

    constructor(data?: ICreateQuestionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.questionType = _data["questionType"];
            this.answersCount = _data["answersCount"];
            this.dateQuestionOptions = _data["dateQuestionOptions"] ? CreateDateQuestionOptions.fromJS(_data["dateQuestionOptions"]) : <any>undefined;
            this.fileQuestionOptions = _data["fileQuestionOptions"] ? CreateFileQuestionOptions.fromJS(_data["fileQuestionOptions"]) : <any>undefined;
            if (Array.isArray(_data["multiChoicesQuestions"])) {
                this.multiChoicesQuestions = [] as any;
                for (let item of _data["multiChoicesQuestions"])
                    this.multiChoicesQuestions!.push(CreateMultiChoicesOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateQuestionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateQuestionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["questionType"] = this.questionType;
        data["answersCount"] = this.answersCount;
        data["dateQuestionOptions"] = this.dateQuestionOptions ? this.dateQuestionOptions.toJSON() : <any>undefined;
        data["fileQuestionOptions"] = this.fileQuestionOptions ? this.fileQuestionOptions.toJSON() : <any>undefined;
        if (Array.isArray(this.multiChoicesQuestions)) {
            data["multiChoicesQuestions"] = [];
            for (let item of this.multiChoicesQuestions)
                data["multiChoicesQuestions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateQuestionRequest {
    name?: LanguageString | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: CreateDateQuestionOptions | undefined;
    fileQuestionOptions?: CreateFileQuestionOptions | undefined;
    multiChoicesQuestions?: CreateMultiChoicesOption[] | undefined;
}

export class CreateDateQuestionOptions implements ICreateDateQuestionOptions {
    isMultiDate?: boolean;
    questionId?: number;

    constructor(data?: ICreateDateQuestionOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isMultiDate = _data["isMultiDate"];
            this.questionId = _data["questionId"];
        }
    }

    static fromJS(data: any): CreateDateQuestionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDateQuestionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isMultiDate"] = this.isMultiDate;
        data["questionId"] = this.questionId;
        return data; 
    }
}

export interface ICreateDateQuestionOptions {
    isMultiDate?: boolean;
    questionId?: number;
}

export class CreateFileQuestionOptions implements ICreateFileQuestionOptions {
    documentFileType?: DocumentFileType;
    questionId?: number;

    constructor(data?: ICreateFileQuestionOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentFileType = _data["documentFileType"];
            this.questionId = _data["questionId"];
        }
    }

    static fromJS(data: any): CreateFileQuestionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFileQuestionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentFileType"] = this.documentFileType;
        data["questionId"] = this.questionId;
        return data; 
    }
}

export interface ICreateFileQuestionOptions {
    documentFileType?: DocumentFileType;
    questionId?: number;
}

export class CreateMultiChoicesOption implements ICreateMultiChoicesOption {
    choice?: LanguageString | undefined;
    questionId?: number;

    constructor(data?: ICreateMultiChoicesOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.choice = _data["choice"] ? LanguageString.fromJS(_data["choice"]) : <any>undefined;
            this.questionId = _data["questionId"];
        }
    }

    static fromJS(data: any): CreateMultiChoicesOption {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMultiChoicesOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["choice"] = this.choice ? this.choice.toJSON() : <any>undefined;
        data["questionId"] = this.questionId;
        return data; 
    }
}

export interface ICreateMultiChoicesOption {
    choice?: LanguageString | undefined;
    questionId?: number;
}

export class ApplicationResponseOfTableResponseModelOfBasicFormDto implements IApplicationResponseOfTableResponseModelOfBasicFormDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicFormDto | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfBasicFormDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfBasicFormDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfBasicFormDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfBasicFormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfBasicFormDto {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfBasicFormDto | undefined;
}

export class TableResponseModelOfBasicFormDto implements ITableResponseModelOfBasicFormDto {
    data?: BasicFormDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfBasicFormDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BasicFormDto.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfBasicFormDto {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfBasicFormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfBasicFormDto {
    data?: BasicFormDto[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class BasicFormDto implements IBasicFormDto {
    id?: number;
    name?: LanguageString | undefined;
    uniqueCode?: string | undefined;

    constructor(data?: IBasicFormDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.uniqueCode = _data["uniqueCode"];
        }
    }

    static fromJS(data: any): BasicFormDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasicFormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["uniqueCode"] = this.uniqueCode;
        return data; 
    }
}

export interface IBasicFormDto {
    id?: number;
    name?: LanguageString | undefined;
    uniqueCode?: string | undefined;
}

export class ApplicationResponseOfFormDto implements IApplicationResponseOfFormDto {
    isError?: boolean;
    message?: string | undefined;
    result?: FormDto | undefined;

    constructor(data?: IApplicationResponseOfFormDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? FormDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfFormDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfFormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfFormDto {
    isError?: boolean;
    message?: string | undefined;
    result?: FormDto | undefined;
}

export class FormDto extends BasicFormDto implements IFormDto {
    questions?: QuestionDto[] | undefined;

    constructor(data?: IFormDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(QuestionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FormDto {
        data = typeof data === 'object' ? data : {};
        let result = new FormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFormDto extends IBasicFormDto {
    questions?: QuestionDto[] | undefined;
}

export class QuestionDto implements IQuestionDto {
    id?: number;
    formId?: number;
    name?: LanguageString | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: DateQuestionOptionsDto | undefined;
    fileQuestionOptions?: FileQuestionOptionsDto | undefined;
    multiChoicesOptions?: MultiChoicesOptionsDto[] | undefined;

    constructor(data?: IQuestionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.formId = _data["formId"];
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.questionType = _data["questionType"];
            this.answersCount = _data["answersCount"];
            this.dateQuestionOptions = _data["dateQuestionOptions"] ? DateQuestionOptionsDto.fromJS(_data["dateQuestionOptions"]) : <any>undefined;
            this.fileQuestionOptions = _data["fileQuestionOptions"] ? FileQuestionOptionsDto.fromJS(_data["fileQuestionOptions"]) : <any>undefined;
            if (Array.isArray(_data["multiChoicesOptions"])) {
                this.multiChoicesOptions = [] as any;
                for (let item of _data["multiChoicesOptions"])
                    this.multiChoicesOptions!.push(MultiChoicesOptionsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["formId"] = this.formId;
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["questionType"] = this.questionType;
        data["answersCount"] = this.answersCount;
        data["dateQuestionOptions"] = this.dateQuestionOptions ? this.dateQuestionOptions.toJSON() : <any>undefined;
        data["fileQuestionOptions"] = this.fileQuestionOptions ? this.fileQuestionOptions.toJSON() : <any>undefined;
        if (Array.isArray(this.multiChoicesOptions)) {
            data["multiChoicesOptions"] = [];
            for (let item of this.multiChoicesOptions)
                data["multiChoicesOptions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IQuestionDto {
    id?: number;
    formId?: number;
    name?: LanguageString | undefined;
    questionType?: QuestionType;
    answersCount?: number | undefined;
    dateQuestionOptions?: DateQuestionOptionsDto | undefined;
    fileQuestionOptions?: FileQuestionOptionsDto | undefined;
    multiChoicesOptions?: MultiChoicesOptionsDto[] | undefined;
}

export class DateQuestionOptionsDto implements IDateQuestionOptionsDto {
    isMultiDate?: boolean;

    constructor(data?: IDateQuestionOptionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isMultiDate = _data["isMultiDate"];
        }
    }

    static fromJS(data: any): DateQuestionOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateQuestionOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isMultiDate"] = this.isMultiDate;
        return data; 
    }
}

export interface IDateQuestionOptionsDto {
    isMultiDate?: boolean;
}

export class FileQuestionOptionsDto implements IFileQuestionOptionsDto {
    documentFileType?: DocumentFileType;

    constructor(data?: IFileQuestionOptionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentFileType = _data["documentFileType"];
        }
    }

    static fromJS(data: any): FileQuestionOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileQuestionOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentFileType"] = this.documentFileType;
        return data; 
    }
}

export interface IFileQuestionOptionsDto {
    documentFileType?: DocumentFileType;
}

export class MultiChoicesOptionsDto implements IMultiChoicesOptionsDto {
    choice?: LanguageString | undefined;

    constructor(data?: IMultiChoicesOptionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.choice = _data["choice"] ? LanguageString.fromJS(_data["choice"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MultiChoicesOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new MultiChoicesOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["choice"] = this.choice ? this.choice.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMultiChoicesOptionsDto {
    choice?: LanguageString | undefined;
}

export class EditFormCommand extends CreateFormCommand implements IEditFormCommand {
    id?: number;

    constructor(data?: IEditFormCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditFormCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditFormCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditFormCommand extends ICreateFormCommand {
    id?: number;
}

export class RemoveFormCommand implements IRemoveFormCommand {
    id?: number;

    constructor(data?: IRemoveFormCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveFormCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveFormCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveFormCommand {
    id?: number;
}

export class CreateDocumentTemplateCommand implements ICreateDocumentTemplateCommand {
    name?: LanguageString | undefined;
    documentTemplateTypeId?: number;
    documentTemplateFileTypes?: DocumentFileType[] | undefined;
    hasValidationDate?: boolean;
    forms?: number[] | undefined;

    constructor(data?: ICreateDocumentTemplateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] ? LanguageString.fromJS(_data["name"]) : <any>undefined;
            this.documentTemplateTypeId = _data["documentTemplateTypeId"];
            if (Array.isArray(_data["documentTemplateFileTypes"])) {
                this.documentTemplateFileTypes = [] as any;
                for (let item of _data["documentTemplateFileTypes"])
                    this.documentTemplateFileTypes!.push(item);
            }
            this.hasValidationDate = _data["hasValidationDate"];
            if (Array.isArray(_data["forms"])) {
                this.forms = [] as any;
                for (let item of _data["forms"])
                    this.forms!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateDocumentTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDocumentTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name ? this.name.toJSON() : <any>undefined;
        data["documentTemplateTypeId"] = this.documentTemplateTypeId;
        if (Array.isArray(this.documentTemplateFileTypes)) {
            data["documentTemplateFileTypes"] = [];
            for (let item of this.documentTemplateFileTypes)
                data["documentTemplateFileTypes"].push(item);
        }
        data["hasValidationDate"] = this.hasValidationDate;
        if (Array.isArray(this.forms)) {
            data["forms"] = [];
            for (let item of this.forms)
                data["forms"].push(item);
        }
        return data; 
    }
}

export interface ICreateDocumentTemplateCommand {
    name?: LanguageString | undefined;
    documentTemplateTypeId?: number;
    documentTemplateFileTypes?: DocumentFileType[] | undefined;
    hasValidationDate?: boolean;
    forms?: number[] | undefined;
}

export class ApplicationResponseOfGetDocumentTemplateDto implements IApplicationResponseOfGetDocumentTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: GetDocumentTemplateDto | undefined;

    constructor(data?: IApplicationResponseOfGetDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? GetDocumentTemplateDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfGetDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfGetDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfGetDocumentTemplateDto {
    isError?: boolean;
    message?: string | undefined;
    result?: GetDocumentTemplateDto | undefined;
}

export class GetDocumentTemplateDto extends BasicDocumentTemplateDto implements IGetDocumentTemplateDto {
    hasValidationDate?: boolean;
    documentTemplateTypeId?: number;
    documentTemplateFileTypes?: DocumentFileType[] | undefined;
    forms?: number[] | undefined;

    constructor(data?: IGetDocumentTemplateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hasValidationDate = _data["hasValidationDate"];
            this.documentTemplateTypeId = _data["documentTemplateTypeId"];
            if (Array.isArray(_data["documentTemplateFileTypes"])) {
                this.documentTemplateFileTypes = [] as any;
                for (let item of _data["documentTemplateFileTypes"])
                    this.documentTemplateFileTypes!.push(item);
            }
            if (Array.isArray(_data["forms"])) {
                this.forms = [] as any;
                for (let item of _data["forms"])
                    this.forms!.push(item);
            }
        }
    }

    static fromJS(data: any): GetDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasValidationDate"] = this.hasValidationDate;
        data["documentTemplateTypeId"] = this.documentTemplateTypeId;
        if (Array.isArray(this.documentTemplateFileTypes)) {
            data["documentTemplateFileTypes"] = [];
            for (let item of this.documentTemplateFileTypes)
                data["documentTemplateFileTypes"].push(item);
        }
        if (Array.isArray(this.forms)) {
            data["forms"] = [];
            for (let item of this.forms)
                data["forms"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetDocumentTemplateDto extends IBasicDocumentTemplateDto {
    hasValidationDate?: boolean;
    documentTemplateTypeId?: number;
    documentTemplateFileTypes?: DocumentFileType[] | undefined;
    forms?: number[] | undefined;
}

export class ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString implements IApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfKeyValuePairOfIntegerAndString | undefined;

    constructor(data?: IApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.result = _data["result"] ? TableResponseModelOfKeyValuePairOfIntegerAndString.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IApplicationResponseOfTableResponseModelOfKeyValuePairOfIntegerAndString {
    isError?: boolean;
    message?: string | undefined;
    result?: TableResponseModelOfKeyValuePairOfIntegerAndString | undefined;
}

export class TableResponseModelOfKeyValuePairOfIntegerAndString implements ITableResponseModelOfKeyValuePairOfIntegerAndString {
    data?: KeyValuePairOfIntegerAndString[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;

    constructor(data?: ITableResponseModelOfKeyValuePairOfIntegerAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(KeyValuePairOfIntegerAndString.fromJS(item));
            }
            this.pageCount = _data["pageCount"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalRowCount = _data["totalRowCount"];
        }
    }

    static fromJS(data: any): TableResponseModelOfKeyValuePairOfIntegerAndString {
        data = typeof data === 'object' ? data : {};
        let result = new TableResponseModelOfKeyValuePairOfIntegerAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageCount"] = this.pageCount;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalRowCount"] = this.totalRowCount;
        return data; 
    }
}

export interface ITableResponseModelOfKeyValuePairOfIntegerAndString {
    data?: KeyValuePairOfIntegerAndString[] | undefined;
    pageCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalRowCount?: number;
}

export class KeyValuePairOfIntegerAndString implements IKeyValuePairOfIntegerAndString {
    key?: number;
    value?: string;

    constructor(data?: IKeyValuePairOfIntegerAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfIntegerAndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfIntegerAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IKeyValuePairOfIntegerAndString {
    key?: number;
    value?: string;
}

export class EditDocumentTemplateCommand extends CreateDocumentTemplateCommand implements IEditDocumentTemplateCommand {
    id?: number;

    constructor(data?: IEditDocumentTemplateCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EditDocumentTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditDocumentTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        super.toJSON(data);
        return data; 
    }
}

export interface IEditDocumentTemplateCommand extends ICreateDocumentTemplateCommand {
    id?: number;
}

export class RemoveDocumentTemplateCommand implements IRemoveDocumentTemplateCommand {
    id?: number;

    constructor(data?: IRemoveDocumentTemplateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveDocumentTemplateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveDocumentTemplateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveDocumentTemplateCommand {
    id?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}