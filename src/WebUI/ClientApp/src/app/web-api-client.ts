/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICategoryClient {
    getCategories(): Observable<GetCategoryDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CategoryClient implements ICategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCategories() : Observable<GetCategoryDto[]> {
        let url_ = this.baseUrl + "/api/Category/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategories(<any>response_);
                } catch (e) {
                    return <Observable<GetCategoryDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCategoryDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategories(response: HttpResponseBase): Observable<GetCategoryDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetCategoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCategoryDto[]>(<any>null);
    }
}

export interface ICommonClient {
    getCountries(): Observable<FileResponse>;
    getCities(countryId: number): Observable<FileResponse>;
    getCities2(cityId: number): Observable<FileResponse>;
    getPoiNationalities(): Observable<NationalityResultDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CommonClient implements ICommonClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCountries() : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Common/Countries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountries(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountries(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getCities(countryId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Common/Cities/{CountryId}";
        if (countryId === undefined || countryId === null)
            throw new Error("The parameter 'countryId' must be defined.");
        url_ = url_.replace("{CountryId}", encodeURIComponent("" + countryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCities(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCities(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCities(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getCities2(cityId: number) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Common/Districts/{CityId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{CityId}", encodeURIComponent("" + cityId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCities2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCities2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCities2(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getPoiNationalities() : Observable<NationalityResultDto> {
        let url_ = this.baseUrl + "/api/Common/PoiNationalities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPoiNationalities(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPoiNationalities(<any>response_);
                } catch (e) {
                    return <Observable<NationalityResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NationalityResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPoiNationalities(response: HttpResponseBase): Observable<NationalityResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NationalityResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NationalityResultDto>(<any>null);
    }
}

export interface ICondoLifeClient {
    updateUser(updateCondolifeUserCommand: UpdateCondolifeUserCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class CondoLifeClient implements ICondoLifeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    updateUser(updateCondolifeUserCommand: UpdateCondolifeUserCommand) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/CondoLife/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateCondolifeUserCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ICustomerClient {
    checkUser(cardNo: string | null | undefined, mobileNo: string | null | undefined, integration: RequestIntegrationType | undefined): Observable<CheckCustomerResultDto>;
    createUser(createCustomerCommand: CreateCustomerCommand): Observable<CreateIntegrationUserResulDto>;
    getCustomerInfo(customerId: string | null | undefined, integration: RequestIntegrationType | undefined): Observable<GetIntegrationCustomerRegisterInfoDto>;
    getRights(cardNumber: string | null | undefined): Observable<GetPoiUserRights>;
    getQrdata(userId: string | null | undefined): Observable<QrCodeResponseDto>;
    sendOtp(sendOtpToCustomerCommand: SendOtpToCustomerCommand): Observable<SendOtpMessageResult>;
    confirmOtpMessage(confirmOtpCommand: ConfirmOtpCommand): Observable<GetIntegrationCustomerRegisterInfoDto>;
    getCusomerAdvantages(integrationUserId: string | null | undefined): Observable<GetCustomerAdvantagesDto[]>;
    checkCustomerBy(mobileNo: string | null | undefined, email: string | null | undefined, identityNumber: string | null | undefined): Observable<CheckCustomerByResultDto>;
}

@Injectable({
    providedIn: 'root'
})
export class CustomerClient implements ICustomerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    checkUser(cardNo: string | null | undefined, mobileNo: string | null | undefined, integration: RequestIntegrationType | undefined) : Observable<CheckCustomerResultDto> {
        let url_ = this.baseUrl + "/api/Customer/CheckUser?";
        if (cardNo !== undefined && cardNo !== null)
            url_ += "CardNo=" + encodeURIComponent("" + cardNo) + "&";
        if (mobileNo !== undefined && mobileNo !== null)
            url_ += "MobileNo=" + encodeURIComponent("" + mobileNo) + "&";
        if (integration === null)
            throw new Error("The parameter 'integration' cannot be null.");
        else if (integration !== undefined)
            url_ += "Integration=" + encodeURIComponent("" + integration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckUser(<any>response_);
                } catch (e) {
                    return <Observable<CheckCustomerResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CheckCustomerResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCheckUser(response: HttpResponseBase): Observable<CheckCustomerResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CheckCustomerResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CheckCustomerResultDto>(<any>null);
    }

    createUser(createCustomerCommand: CreateCustomerCommand) : Observable<CreateIntegrationUserResulDto> {
        let url_ = this.baseUrl + "/api/Customer/CreateIntegrationUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createCustomerCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(<any>response_);
                } catch (e) {
                    return <Observable<CreateIntegrationUserResulDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateIntegrationUserResulDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<CreateIntegrationUserResulDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateIntegrationUserResulDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateIntegrationUserResulDto>(<any>null);
    }

    getCustomerInfo(customerId: string | null | undefined, integration: RequestIntegrationType | undefined) : Observable<GetIntegrationCustomerRegisterInfoDto> {
        let url_ = this.baseUrl + "/api/Customer/GetUserInfo?";
        if (customerId !== undefined && customerId !== null)
            url_ += "CustomerId=" + encodeURIComponent("" + customerId) + "&";
        if (integration === null)
            throw new Error("The parameter 'integration' cannot be null.");
        else if (integration !== undefined)
            url_ += "Integration=" + encodeURIComponent("" + integration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomerInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomerInfo(<any>response_);
                } catch (e) {
                    return <Observable<GetIntegrationCustomerRegisterInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetIntegrationCustomerRegisterInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomerInfo(response: HttpResponseBase): Observable<GetIntegrationCustomerRegisterInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetIntegrationCustomerRegisterInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetIntegrationCustomerRegisterInfoDto>(<any>null);
    }

    getRights(cardNumber: string | null | undefined) : Observable<GetPoiUserRights> {
        let url_ = this.baseUrl + "/api/Customer/Rights?";
        if (cardNumber !== undefined && cardNumber !== null)
            url_ += "CardNumber=" + encodeURIComponent("" + cardNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRights(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRights(<any>response_);
                } catch (e) {
                    return <Observable<GetPoiUserRights>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetPoiUserRights>><any>_observableThrow(response_);
        }));
    }

    protected processGetRights(response: HttpResponseBase): Observable<GetPoiUserRights> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetPoiUserRights.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetPoiUserRights>(<any>null);
    }

    getQrdata(userId: string | null | undefined) : Observable<QrCodeResponseDto> {
        let url_ = this.baseUrl + "/api/Customer/GetQrPass?";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQrdata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQrdata(<any>response_);
                } catch (e) {
                    return <Observable<QrCodeResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<QrCodeResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetQrdata(response: HttpResponseBase): Observable<QrCodeResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QrCodeResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QrCodeResponseDto>(<any>null);
    }

    sendOtp(sendOtpToCustomerCommand: SendOtpToCustomerCommand) : Observable<SendOtpMessageResult> {
        let url_ = this.baseUrl + "/api/Customer/SendOtpMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sendOtpToCustomerCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendOtp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendOtp(<any>response_);
                } catch (e) {
                    return <Observable<SendOtpMessageResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SendOtpMessageResult>><any>_observableThrow(response_);
        }));
    }

    protected processSendOtp(response: HttpResponseBase): Observable<SendOtpMessageResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SendOtpMessageResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SendOtpMessageResult>(<any>null);
    }

    confirmOtpMessage(confirmOtpCommand: ConfirmOtpCommand) : Observable<GetIntegrationCustomerRegisterInfoDto> {
        let url_ = this.baseUrl + "/api/Customer/ConfirmOtpMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(confirmOtpCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmOtpMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmOtpMessage(<any>response_);
                } catch (e) {
                    return <Observable<GetIntegrationCustomerRegisterInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetIntegrationCustomerRegisterInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processConfirmOtpMessage(response: HttpResponseBase): Observable<GetIntegrationCustomerRegisterInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetIntegrationCustomerRegisterInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorResponseModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetIntegrationCustomerRegisterInfoDto>(<any>null);
    }

    getCusomerAdvantages(integrationUserId: string | null | undefined) : Observable<GetCustomerAdvantagesDto[]> {
        let url_ = this.baseUrl + "/api/Customer/Advantages?";
        if (integrationUserId !== undefined && integrationUserId !== null)
            url_ += "IntegrationUserId=" + encodeURIComponent("" + integrationUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCusomerAdvantages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCusomerAdvantages(<any>response_);
                } catch (e) {
                    return <Observable<GetCustomerAdvantagesDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCustomerAdvantagesDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCusomerAdvantages(response: HttpResponseBase): Observable<GetCustomerAdvantagesDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetCustomerAdvantagesDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCustomerAdvantagesDto[]>(<any>null);
    }

    checkCustomerBy(mobileNo: string | null | undefined, email: string | null | undefined, identityNumber: string | null | undefined) : Observable<CheckCustomerByResultDto> {
        let url_ = this.baseUrl + "/api/Customer/CheckCustomerBy?";
        if (mobileNo !== undefined && mobileNo !== null)
            url_ += "MobileNo=" + encodeURIComponent("" + mobileNo) + "&";
        if (email !== undefined && email !== null)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (identityNumber !== undefined && identityNumber !== null)
            url_ += "IdentityNumber=" + encodeURIComponent("" + identityNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckCustomerBy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckCustomerBy(<any>response_);
                } catch (e) {
                    return <Observable<CheckCustomerByResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CheckCustomerByResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCheckCustomerBy(response: HttpResponseBase): Observable<CheckCustomerByResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CheckCustomerByResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CheckCustomerByResultDto>(<any>null);
    }
}

export interface IHotelClient {
    getArrivalAutoComplete(query: GetArrivalAutoCompleteQuery): Observable<GetArrivalAutoCompleteResponseDto>;
    priceSearchLocation(query: PriceSearchLocationQuery): Observable<PriceSearchResponseDto>;
    priceSearchHotel(query: PriceSearchHotelQuery): Observable<PriceSearchResponseDto>;
    getProductInfo(query: GetProductInfoQuery): Observable<GetProductInfoResponseDto>;
    getOffers(query: GetOffersQuery): Observable<GetOffersResponseDto>;
    getOffers2(query: GetOfferDetailsQuery): Observable<GetOfferDetailsResponseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class HotelClient implements IHotelClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getArrivalAutoComplete(query: GetArrivalAutoCompleteQuery) : Observable<GetArrivalAutoCompleteResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/GetArrivalAutoComplete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetArrivalAutoComplete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetArrivalAutoComplete(<any>response_);
                } catch (e) {
                    return <Observable<GetArrivalAutoCompleteResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetArrivalAutoCompleteResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetArrivalAutoComplete(response: HttpResponseBase): Observable<GetArrivalAutoCompleteResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetArrivalAutoCompleteResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetArrivalAutoCompleteResponseDto>(<any>null);
    }

    priceSearchLocation(query: PriceSearchLocationQuery) : Observable<PriceSearchResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/PriceSearchLocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPriceSearchLocation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPriceSearchLocation(<any>response_);
                } catch (e) {
                    return <Observable<PriceSearchResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PriceSearchResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processPriceSearchLocation(response: HttpResponseBase): Observable<PriceSearchResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PriceSearchResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PriceSearchResponseDto>(<any>null);
    }

    priceSearchHotel(query: PriceSearchHotelQuery) : Observable<PriceSearchResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/PriceSearchHotel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPriceSearchHotel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPriceSearchHotel(<any>response_);
                } catch (e) {
                    return <Observable<PriceSearchResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PriceSearchResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processPriceSearchHotel(response: HttpResponseBase): Observable<PriceSearchResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PriceSearchResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PriceSearchResponseDto>(<any>null);
    }

    getProductInfo(query: GetProductInfoQuery) : Observable<GetProductInfoResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/GetProductInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductInfo(<any>response_);
                } catch (e) {
                    return <Observable<GetProductInfoResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProductInfoResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductInfo(response: HttpResponseBase): Observable<GetProductInfoResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetProductInfoResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProductInfoResponseDto>(<any>null);
    }

    getOffers(query: GetOffersQuery) : Observable<GetOffersResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/GetOffers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOffers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOffers(<any>response_);
                } catch (e) {
                    return <Observable<GetOffersResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetOffersResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOffers(response: HttpResponseBase): Observable<GetOffersResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetOffersResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetOffersResponseDto>(<any>null);
    }

    getOffers2(query: GetOfferDetailsQuery) : Observable<GetOfferDetailsResponseDto> {
        let url_ = this.baseUrl + "/api/Hotel/GetOfferDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOffers2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOffers2(<any>response_);
                } catch (e) {
                    return <Observable<GetOfferDetailsResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetOfferDetailsResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOffers2(response: HttpResponseBase): Observable<GetOfferDetailsResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetOfferDetailsResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetOfferDetailsResponseDto>(<any>null);
    }
}

export interface IIntegrationParametersClient {
    loadIntegrationCountries(): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class IntegrationParametersClient implements IIntegrationParametersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    loadIntegrationCountries() : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/IntegrationParameters/LoadIntegrationCountries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoadIntegrationCountries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoadIntegrationCountries(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processLoadIntegrationCountries(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IIntegrationServicesClient {
    getTransferZones(): Observable<TransferZoneDto[]>;
    getTransferStartPoints(zoneId: number | undefined): Observable<TransferStartPointDto[]>;
    getTransferEndPoints(startPoint: string | null | undefined): Observable<TransferEndPointDto[]>;
    searchTransfer(transferSearchRequestDto: TransferSearchRequestDto): Observable<TransferSearchResultDto>;
    cartTransfer(preCheckoutTransferCommand: PreCheckoutTransferCommand): Observable<CartTransferResultDto>;
    checkoutTransfer(checkoutTransferCommand: CheckoutTransferCommand): Observable<CreateTransferOrderResponseDto>;
    cancelTransfer(transferCancelRequestDto: TransferCancelRequestDto): Observable<CancelTransferResultDto>;
    updateTransfer(transferSaveRequestDto: TransferSaveRequestDto): Observable<UpdateTransferResult>;
    getBasket(): Observable<GetBasketDto>;
    deleteTransferFromBasket(removeBasketCommand: RemoveBasketCommand): Observable<RemoveTransferFromBasketResultDto>;
    addInvoice(addInvoiceCommand: AddInvoiceCommand): Observable<AddInvoiceAddressResultDto>;
}

@Injectable({
    providedIn: 'root'
})
export class IntegrationServicesClient implements IIntegrationServicesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTransferZones() : Observable<TransferZoneDto[]> {
        let url_ = this.baseUrl + "/api/IntegrationServices/TransferZones";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransferZones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransferZones(<any>response_);
                } catch (e) {
                    return <Observable<TransferZoneDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferZoneDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransferZones(response: HttpResponseBase): Observable<TransferZoneDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TransferZoneDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferZoneDto[]>(<any>null);
    }

    getTransferStartPoints(zoneId: number | undefined) : Observable<TransferStartPointDto[]> {
        let url_ = this.baseUrl + "/api/IntegrationServices/TransferStartPoints?";
        if (zoneId === null)
            throw new Error("The parameter 'zoneId' cannot be null.");
        else if (zoneId !== undefined)
            url_ += "ZoneId=" + encodeURIComponent("" + zoneId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransferStartPoints(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransferStartPoints(<any>response_);
                } catch (e) {
                    return <Observable<TransferStartPointDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferStartPointDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransferStartPoints(response: HttpResponseBase): Observable<TransferStartPointDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TransferStartPointDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferStartPointDto[]>(<any>null);
    }

    getTransferEndPoints(startPoint: string | null | undefined) : Observable<TransferEndPointDto[]> {
        let url_ = this.baseUrl + "/api/IntegrationServices/TransferEndPoints?";
        if (startPoint !== undefined && startPoint !== null)
            url_ += "StartPoint=" + encodeURIComponent("" + startPoint) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransferEndPoints(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransferEndPoints(<any>response_);
                } catch (e) {
                    return <Observable<TransferEndPointDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferEndPointDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransferEndPoints(response: HttpResponseBase): Observable<TransferEndPointDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TransferEndPointDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferEndPointDto[]>(<any>null);
    }

    searchTransfer(transferSearchRequestDto: TransferSearchRequestDto) : Observable<TransferSearchResultDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/SearchTransfer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transferSearchRequestDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchTransfer(<any>response_);
                } catch (e) {
                    return <Observable<TransferSearchResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransferSearchResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearchTransfer(response: HttpResponseBase): Observable<TransferSearchResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransferSearchResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransferSearchResultDto>(<any>null);
    }

    cartTransfer(preCheckoutTransferCommand: PreCheckoutTransferCommand) : Observable<CartTransferResultDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/CreateReservation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(preCheckoutTransferCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCartTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCartTransfer(<any>response_);
                } catch (e) {
                    return <Observable<CartTransferResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CartTransferResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCartTransfer(response: HttpResponseBase): Observable<CartTransferResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CartTransferResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CartTransferResultDto>(<any>null);
    }

    checkoutTransfer(checkoutTransferCommand: CheckoutTransferCommand) : Observable<CreateTransferOrderResponseDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/CreateOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(checkoutTransferCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckoutTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckoutTransfer(<any>response_);
                } catch (e) {
                    return <Observable<CreateTransferOrderResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateTransferOrderResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCheckoutTransfer(response: HttpResponseBase): Observable<CreateTransferOrderResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateTransferOrderResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateTransferOrderResponseDto>(<any>null);
    }

    cancelTransfer(transferCancelRequestDto: TransferCancelRequestDto) : Observable<CancelTransferResultDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/CancelTransfer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transferCancelRequestDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelTransfer(<any>response_);
                } catch (e) {
                    return <Observable<CancelTransferResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CancelTransferResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCancelTransfer(response: HttpResponseBase): Observable<CancelTransferResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CancelTransferResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CancelTransferResultDto>(<any>null);
    }

    updateTransfer(transferSaveRequestDto: TransferSaveRequestDto) : Observable<UpdateTransferResult> {
        let url_ = this.baseUrl + "/api/IntegrationServices/UpdateTransfer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transferSaveRequestDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTransfer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTransfer(<any>response_);
                } catch (e) {
                    return <Observable<UpdateTransferResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpdateTransferResult>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTransfer(response: HttpResponseBase): Observable<UpdateTransferResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateTransferResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpdateTransferResult>(<any>null);
    }

    getBasket() : Observable<GetBasketDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/Basket";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBasket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBasket(<any>response_);
                } catch (e) {
                    return <Observable<GetBasketDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetBasketDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBasket(response: HttpResponseBase): Observable<GetBasketDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBasketDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetBasketDto>(<any>null);
    }

    deleteTransferFromBasket(removeBasketCommand: RemoveBasketCommand) : Observable<RemoveTransferFromBasketResultDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/RemoveTransferFromBasket";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(removeBasketCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTransferFromBasket(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTransferFromBasket(<any>response_);
                } catch (e) {
                    return <Observable<RemoveTransferFromBasketResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RemoveTransferFromBasketResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTransferFromBasket(response: HttpResponseBase): Observable<RemoveTransferFromBasketResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RemoveTransferFromBasketResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RemoveTransferFromBasketResultDto>(<any>null);
    }

    addInvoice(addInvoiceCommand: AddInvoiceCommand) : Observable<AddInvoiceAddressResultDto> {
        let url_ = this.baseUrl + "/api/IntegrationServices/AddInvoiceAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addInvoiceCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddInvoice(<any>response_);
                } catch (e) {
                    return <Observable<AddInvoiceAddressResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AddInvoiceAddressResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddInvoice(response: HttpResponseBase): Observable<AddInvoiceAddressResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddInvoiceAddressResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponseModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddInvoiceAddressResultDto>(<any>null);
    }
}

export interface IMembershipClient {
    getPrice(membershipId: number | undefined): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class MembershipClient implements IMembershipClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPrice(membershipId: number | undefined) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Membership/GetPrice?";
        if (membershipId === null)
            throw new Error("The parameter 'membershipId' cannot be null.");
        else if (membershipId !== undefined)
            url_ += "membershipId=" + encodeURIComponent("" + membershipId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPrice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPrice(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetPrice(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IOrderClient {
    create(createOrderCommand: CreateCartOrderCommand): Observable<CreateCartOrderResultDto>;
    setOrderStatus(setOrderStatusDto: SetOrderStatusDto): Observable<SetOrderStatusResponseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class OrderClient implements IOrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(createOrderCommand: CreateCartOrderCommand) : Observable<CreateCartOrderResultDto> {
        let url_ = this.baseUrl + "/api/Order/PrepareCartOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createOrderCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<CreateCartOrderResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateCartOrderResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CreateCartOrderResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateCartOrderResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateCartOrderResultDto>(<any>null);
    }

    setOrderStatus(setOrderStatusDto: SetOrderStatusDto) : Observable<SetOrderStatusResponseDto> {
        let url_ = this.baseUrl + "/api/Order/SetOrderStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(setOrderStatusDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetOrderStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetOrderStatus(<any>response_);
                } catch (e) {
                    return <Observable<SetOrderStatusResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SetOrderStatusResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processSetOrderStatus(response: HttpResponseBase): Observable<SetOrderStatusResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SetOrderStatusResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SetOrderStatusResponseDto>(<any>null);
    }
}

export interface IProductClient {
    getProducts(integrationType: RequestIntegrationType | undefined): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductClient implements IProductClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProducts(integrationType: RequestIntegrationType | undefined) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Product/GetProducts?";
        if (integrationType === null)
            throw new Error("The parameter 'integrationType' cannot be null.");
        else if (integrationType !== undefined)
            url_ += "IntegrationType=" + encodeURIComponent("" + integrationType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IReportClient {
    getTransferReport(startDate: Date | undefined, dateTime: Date | undefined): Observable<ReportResultDto>;
    getRequestedServiceCategoriesReport(startDate: Date | undefined, endDate: Date | undefined, integrationType: RequestIntegrationType | undefined): Observable<ReportResultDto>;
}

@Injectable({
    providedIn: 'root'
})
export class ReportClient implements IReportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTransferReport(startDate: Date | undefined, dateTime: Date | undefined) : Observable<ReportResultDto> {
        let url_ = this.baseUrl + "/api/Report/TransferReport?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (dateTime === null)
            throw new Error("The parameter 'dateTime' cannot be null.");
        else if (dateTime !== undefined)
            url_ += "DateTime=" + encodeURIComponent(dateTime ? "" + dateTime.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransferReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransferReport(<any>response_);
                } catch (e) {
                    return <Observable<ReportResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReportResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransferReport(response: HttpResponseBase): Observable<ReportResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReportResultDto>(<any>null);
    }

    getRequestedServiceCategoriesReport(startDate: Date | undefined, endDate: Date | undefined, integrationType: RequestIntegrationType | undefined) : Observable<ReportResultDto> {
        let url_ = this.baseUrl + "/api/Report/RequestedServiceCategoriesReport?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (integrationType === null)
            throw new Error("The parameter 'integrationType' cannot be null.");
        else if (integrationType !== undefined)
            url_ += "IntegrationType=" + encodeURIComponent("" + integrationType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRequestedServiceCategoriesReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRequestedServiceCategoriesReport(<any>response_);
                } catch (e) {
                    return <Observable<ReportResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReportResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRequestedServiceCategoriesReport(response: HttpResponseBase): Observable<ReportResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReportResultDto>(<any>null);
    }
}

export interface ITransactionClient {
    getTransactions(status: TransactionStatus | undefined, pageNumber: number | undefined, pageSize: number | undefined, startDate: Date | undefined, endDate: Date | undefined): Observable<GetTransactionsDto[]>;
    getPassedTransactions(pageNumber: number | undefined, userId: string | null | undefined): Observable<GetPassedTransactionDto[]>;
    getPassedTransactionsForCms(pageNumber: number | undefined, userId: string | null | undefined): Observable<GetPassedTransactionDto[]>;
    getTransactionDetail(id: string | null | undefined): Observable<GetTransactionDetailDto>;
    getOrderPropertyDetails(query: GetOrderPropertyDetailQuery): Observable<PaginatedListOfOrderPropertyDetailsDto>;
}

@Injectable({
    providedIn: 'root'
})
export class TransactionClient implements ITransactionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTransactions(status: TransactionStatus | undefined, pageNumber: number | undefined, pageSize: number | undefined, startDate: Date | undefined, endDate: Date | undefined) : Observable<GetTransactionsDto[]> {
        let url_ = this.baseUrl + "/api/Transaction/Transactions?";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransactions(<any>response_);
                } catch (e) {
                    return <Observable<GetTransactionsDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTransactionsDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransactions(response: HttpResponseBase): Observable<GetTransactionsDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetTransactionsDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTransactionsDto[]>(<any>null);
    }

    getPassedTransactions(pageNumber: number | undefined, userId: string | null | undefined) : Observable<GetPassedTransactionDto[]> {
        let url_ = this.baseUrl + "/api/Transaction/PassedTransactions?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPassedTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPassedTransactions(<any>response_);
                } catch (e) {
                    return <Observable<GetPassedTransactionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetPassedTransactionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPassedTransactions(response: HttpResponseBase): Observable<GetPassedTransactionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetPassedTransactionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetPassedTransactionDto[]>(<any>null);
    }

    getPassedTransactionsForCms(pageNumber: number | undefined, userId: string | null | undefined) : Observable<GetPassedTransactionDto[]> {
        let url_ = this.baseUrl + "/api/Transaction/PassedTransactionsForCms?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPassedTransactionsForCms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPassedTransactionsForCms(<any>response_);
                } catch (e) {
                    return <Observable<GetPassedTransactionDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetPassedTransactionDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPassedTransactionsForCms(response: HttpResponseBase): Observable<GetPassedTransactionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetPassedTransactionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetPassedTransactionDto[]>(<any>null);
    }

    getTransactionDetail(id: string | null | undefined) : Observable<GetTransactionDetailDto> {
        let url_ = this.baseUrl + "/api/Transaction/TransactionDetail?";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransactionDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransactionDetail(<any>response_);
                } catch (e) {
                    return <Observable<GetTransactionDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTransactionDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransactionDetail(response: HttpResponseBase): Observable<GetTransactionDetailDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTransactionDetailDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTransactionDetailDto>(<any>null);
    }

    getOrderPropertyDetails(query: GetOrderPropertyDetailQuery) : Observable<PaginatedListOfOrderPropertyDetailsDto> {
        let url_ = this.baseUrl + "/api/Transaction/OrderPropertyDetailFilter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderPropertyDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderPropertyDetails(<any>response_);
                } catch (e) {
                    return <Observable<PaginatedListOfOrderPropertyDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaginatedListOfOrderPropertyDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrderPropertyDetails(response: HttpResponseBase): Observable<PaginatedListOfOrderPropertyDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfOrderPropertyDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfOrderPropertyDetailsDto>(<any>null);
    }
}

export interface IVerisoftClient {
    updateCustomer(updateCustomerCommand: UpdateVerisoftCustomerCommand): Observable<FileResponse>;
    sendNotification(sendNotificationCommand: SendNotificationCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class VerisoftClient implements IVerisoftClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    updateCustomer(updateCustomerCommand: UpdateVerisoftCustomerCommand) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Verisoft/UpdateCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateCustomerCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCustomer(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCustomer(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    sendNotification(sendNotificationCommand: SendNotificationCommand) : Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Verisoft/SendNotification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sendNotificationCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendNotification(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSendNotification(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class GetCategoryDto implements IGetCategoryDto {
    id?: number;
    name?: string | undefined;
    imageUrl?: string | undefined;
    hasProcuct?: boolean;

    constructor(data?: IGetCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.hasProcuct = _data["hasProcuct"];
        }
    }

    static fromJS(data: any): GetCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["hasProcuct"] = this.hasProcuct;
        return data; 
    }
}

export interface IGetCategoryDto {
    id?: number;
    name?: string | undefined;
    imageUrl?: string | undefined;
    hasProcuct?: boolean;
}

export class NationalityResultDto implements INationalityResultDto {
    country_id?: number;
    country_code?: string | undefined;
    country_name?: string | undefined;
    country_name_tr?: string | undefined;
    country_name_en?: string | undefined;

    constructor(data?: INationalityResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country_id = _data["country_id"];
            this.country_code = _data["country_code"];
            this.country_name = _data["country_name"];
            this.country_name_tr = _data["country_name_tr"];
            this.country_name_en = _data["country_name_en"];
        }
    }

    static fromJS(data: any): NationalityResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new NationalityResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country_id"] = this.country_id;
        data["country_code"] = this.country_code;
        data["country_name"] = this.country_name;
        data["country_name_tr"] = this.country_name_tr;
        data["country_name_en"] = this.country_name_en;
        return data; 
    }
}

export interface INationalityResultDto {
    country_id?: number;
    country_code?: string | undefined;
    country_name?: string | undefined;
    country_name_tr?: string | undefined;
    country_name_en?: string | undefined;
}

export class UpdateCondolifeUserCommand implements IUpdateCondolifeUserCommand {
    userId?: string;
    integrationUserId?: string | undefined;
    email?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    birthDate?: Date | undefined;
    genderName?: string | undefined;
    citizenNumber?: string | undefined;
    maritialStatus?: boolean;
    maritialDate?: Date;
    countryId?: number | undefined;

    constructor(data?: IUpdateCondolifeUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.integrationUserId = _data["integrationUserId"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.genderName = _data["genderName"];
            this.citizenNumber = _data["citizenNumber"];
            this.maritialStatus = _data["maritialStatus"];
            this.maritialDate = _data["maritialDate"] ? new Date(_data["maritialDate"].toString()) : <any>undefined;
            this.countryId = _data["countryId"];
        }
    }

    static fromJS(data: any): UpdateCondolifeUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCondolifeUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["integrationUserId"] = this.integrationUserId;
        data["email"] = this.email;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["genderName"] = this.genderName;
        data["citizenNumber"] = this.citizenNumber;
        data["maritialStatus"] = this.maritialStatus;
        data["maritialDate"] = this.maritialDate ? this.maritialDate.toISOString() : <any>undefined;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface IUpdateCondolifeUserCommand {
    userId?: string;
    integrationUserId?: string | undefined;
    email?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    birthDate?: Date | undefined;
    genderName?: string | undefined;
    citizenNumber?: string | undefined;
    maritialStatus?: boolean;
    maritialDate?: Date;
    countryId?: number | undefined;
}

export class CheckCustomerResultDto implements ICheckCustomerResultDto {
    customer_ID?: number;
    token?: string | undefined;
    customerStatus_ID?: VerisoftTAVCustomerStatus;

    constructor(data?: ICheckCustomerResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer_ID = _data["customer_ID"];
            this.token = _data["token"];
            this.customerStatus_ID = _data["customerStatus_ID"];
        }
    }

    static fromJS(data: any): CheckCustomerResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CheckCustomerResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer_ID"] = this.customer_ID;
        data["token"] = this.token;
        data["customerStatus_ID"] = this.customerStatus_ID;
        return data; 
    }
}

export interface ICheckCustomerResultDto {
    customer_ID?: number;
    token?: string | undefined;
    customerStatus_ID?: VerisoftTAVCustomerStatus;
}

export enum VerisoftTAVCustomerStatus {
    Active = 1,
    Cancel = 3,
    Refund = 5,
    Passive = 7,
}

export class ErrorResponseModel implements IErrorResponseModel {
    message?: string | undefined;

    constructor(data?: IErrorResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ErrorResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IErrorResponseModel {
    message?: string | undefined;
}

export enum RequestIntegrationType {
    TAV = 1,
}

export class CreateIntegrationUserResulDto implements ICreateIntegrationUserResulDto {
    id?: string | undefined;
    membershipType?: MembershipType;

    constructor(data?: ICreateIntegrationUserResulDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.membershipType = _data["membershipType"];
        }
    }

    static fromJS(data: any): CreateIntegrationUserResulDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIntegrationUserResulDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["membershipType"] = this.membershipType;
        return data; 
    }
}

export interface ICreateIntegrationUserResulDto {
    id?: string | undefined;
    membershipType?: MembershipType;
}

export enum MembershipType {
    CLASSIC = 1,
    EDITION = 2,
}

export class CreateCustomerCommand implements ICreateCustomerCommand {
    customer?: CreateIntegrationCustomerDto | undefined;
    integration?: RequestIntegrationType;

    constructor(data?: ICreateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer = _data["customer"] ? CreateIntegrationCustomerDto.fromJS(_data["customer"]) : <any>undefined;
            this.integration = _data["integration"];
        }
    }

    static fromJS(data: any): CreateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["integration"] = this.integration;
        return data; 
    }
}

export interface ICreateCustomerCommand {
    customer?: CreateIntegrationCustomerDto | undefined;
    integration?: RequestIntegrationType;
}

export class CreateIntegrationCustomerDto implements ICreateIntegrationCustomerDto {
    firstName?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    workAddress?: string | undefined;
    genderId?: VerisoftGender;
    password?: string | undefined;
    kvkkPermissionAccept?: boolean;
    postCode?: string | undefined;
    cityId?: number;
    districtId?: number;
    address?: string | undefined;
    homePhoneNumber?: string | undefined;
    faks?: string | undefined;
    dateOfMarriage?: Date;
    maritialStatus?: VerisoftMaritialStatus;
    agreementTextAccept?: boolean;
    identityNumber?: string | undefined;
    countryPhoneCode?: string | undefined;
    integrationUserId?: string | undefined;
    birthDate?: Date;
    tavPassportNo?: string | undefined;
    electronicMessagePermission?: boolean;

    constructor(data?: ICreateIntegrationCustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.surname = _data["surname"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.workAddress = _data["workAddress"];
            this.genderId = _data["genderId"];
            this.password = _data["password"];
            this.kvkkPermissionAccept = _data["kvkkPermissionAccept"];
            this.postCode = _data["postCode"];
            this.cityId = _data["cityId"];
            this.districtId = _data["districtId"];
            this.address = _data["address"];
            this.homePhoneNumber = _data["homePhoneNumber"];
            this.faks = _data["faks"];
            this.dateOfMarriage = _data["dateOfMarriage"] ? new Date(_data["dateOfMarriage"].toString()) : <any>undefined;
            this.maritialStatus = _data["maritialStatus"];
            this.agreementTextAccept = _data["agreementTextAccept"];
            this.identityNumber = _data["identityNumber"];
            this.countryPhoneCode = _data["countryPhoneCode"];
            this.integrationUserId = _data["integrationUserId"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.tavPassportNo = _data["tavPassportNo"];
            this.electronicMessagePermission = _data["electronicMessagePermission"];
        }
    }

    static fromJS(data: any): CreateIntegrationCustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIntegrationCustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["workAddress"] = this.workAddress;
        data["genderId"] = this.genderId;
        data["password"] = this.password;
        data["kvkkPermissionAccept"] = this.kvkkPermissionAccept;
        data["postCode"] = this.postCode;
        data["cityId"] = this.cityId;
        data["districtId"] = this.districtId;
        data["address"] = this.address;
        data["homePhoneNumber"] = this.homePhoneNumber;
        data["faks"] = this.faks;
        data["dateOfMarriage"] = this.dateOfMarriage ? this.dateOfMarriage.toISOString() : <any>undefined;
        data["maritialStatus"] = this.maritialStatus;
        data["agreementTextAccept"] = this.agreementTextAccept;
        data["identityNumber"] = this.identityNumber;
        data["countryPhoneCode"] = this.countryPhoneCode;
        data["integrationUserId"] = this.integrationUserId;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["tavPassportNo"] = this.tavPassportNo;
        data["electronicMessagePermission"] = this.electronicMessagePermission;
        return data; 
    }
}

export interface ICreateIntegrationCustomerDto {
    firstName?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    workAddress?: string | undefined;
    genderId?: VerisoftGender;
    password?: string | undefined;
    kvkkPermissionAccept?: boolean;
    postCode?: string | undefined;
    cityId?: number;
    districtId?: number;
    address?: string | undefined;
    homePhoneNumber?: string | undefined;
    faks?: string | undefined;
    dateOfMarriage?: Date;
    maritialStatus?: VerisoftMaritialStatus;
    agreementTextAccept?: boolean;
    identityNumber?: string | undefined;
    countryPhoneCode?: string | undefined;
    integrationUserId?: string | undefined;
    birthDate?: Date;
    tavPassportNo?: string | undefined;
    electronicMessagePermission?: boolean;
}

export enum VerisoftGender {
    Female = 0,
    Male = 1,
}

export enum VerisoftMaritialStatus {
    Single = 0,
    Married = 1,
}

export class GetIntegrationCustomerRegisterInfoDto implements IGetIntegrationCustomerRegisterInfoDto {
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    cardNo?: string | undefined;
    phone?: string | undefined;
    identityNumber?: string | undefined;
    gender?: VerisoftGender;
    birthDate?: Date;

    constructor(data?: IGetIntegrationCustomerRegisterInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.email = _data["email"];
            this.cardNo = _data["cardNo"];
            this.phone = _data["phone"];
            this.identityNumber = _data["identityNumber"];
            this.gender = _data["gender"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetIntegrationCustomerRegisterInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetIntegrationCustomerRegisterInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["cardNo"] = this.cardNo;
        data["phone"] = this.phone;
        data["identityNumber"] = this.identityNumber;
        data["gender"] = this.gender;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetIntegrationCustomerRegisterInfoDto {
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    cardNo?: string | undefined;
    phone?: string | undefined;
    identityNumber?: string | undefined;
    gender?: VerisoftGender;
    birthDate?: Date;
}

export class GetPoiUserRights implements IGetPoiUserRights {
    card_type?: string | undefined;
    free_transfer?: number;

    constructor(data?: IGetPoiUserRights) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.card_type = _data["card_type"];
            this.free_transfer = _data["free_transfer"];
        }
    }

    static fromJS(data: any): GetPoiUserRights {
        data = typeof data === 'object' ? data : {};
        let result = new GetPoiUserRights();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["card_type"] = this.card_type;
        data["free_transfer"] = this.free_transfer;
        return data; 
    }
}

export interface IGetPoiUserRights {
    card_type?: string | undefined;
    free_transfer?: number;
}

export class QrCodeResponseDto implements IQrCodeResponseDto {
    qrData?: string | undefined;

    constructor(data?: IQrCodeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.qrData = _data["qrData"];
        }
    }

    static fromJS(data: any): QrCodeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new QrCodeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrData"] = this.qrData;
        return data; 
    }
}

export interface IQrCodeResponseDto {
    qrData?: string | undefined;
}

export class SendOtpMessageResult implements ISendOtpMessageResult {
    result?: boolean;

    constructor(data?: ISendOtpMessageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): SendOtpMessageResult {
        data = typeof data === 'object' ? data : {};
        let result = new SendOtpMessageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface ISendOtpMessageResult {
    result?: boolean;
}

export class SendOtpToCustomerCommand implements ISendOtpToCustomerCommand {
    token?: string | undefined;
    customerId?: number;
    phoneNumber?: string | undefined;
    integrationType?: RequestIntegrationType;

    constructor(data?: ISendOtpToCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.customerId = _data["customerId"];
            this.phoneNumber = _data["phoneNumber"];
            this.integrationType = _data["integrationType"];
        }
    }

    static fromJS(data: any): SendOtpToCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendOtpToCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["customerId"] = this.customerId;
        data["phoneNumber"] = this.phoneNumber;
        data["integrationType"] = this.integrationType;
        return data; 
    }
}

export interface ISendOtpToCustomerCommand {
    token?: string | undefined;
    customerId?: number;
    phoneNumber?: string | undefined;
    integrationType?: RequestIntegrationType;
}

export class ConfirmOtpCommand implements IConfirmOtpCommand {
    message?: string | undefined;
    customerId?: string | undefined;
    integration?: RequestIntegrationType;

    constructor(data?: IConfirmOtpCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.customerId = _data["customerId"];
            this.integration = _data["integration"];
        }
    }

    static fromJS(data: any): ConfirmOtpCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmOtpCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["customerId"] = this.customerId;
        data["integration"] = this.integration;
        return data; 
    }
}

export interface IConfirmOtpCommand {
    message?: string | undefined;
    customerId?: string | undefined;
    integration?: RequestIntegrationType;
}

export class GetCustomerAdvantagesDto implements IGetCustomerAdvantagesDto {
    advantageName?: string | undefined;
    count?: string | undefined;

    constructor(data?: IGetCustomerAdvantagesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.advantageName = _data["advantageName"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): GetCustomerAdvantagesDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCustomerAdvantagesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["advantageName"] = this.advantageName;
        data["count"] = this.count;
        return data; 
    }
}

export interface IGetCustomerAdvantagesDto {
    advantageName?: string | undefined;
    count?: string | undefined;
}

export class CheckCustomerByResultDto implements ICheckCustomerByResultDto {
    found?: boolean;

    constructor(data?: ICheckCustomerByResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.found = _data["found"];
        }
    }

    static fromJS(data: any): CheckCustomerByResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CheckCustomerByResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["found"] = this.found;
        return data; 
    }
}

export interface ICheckCustomerByResultDto {
    found?: boolean;
}

export class GetArrivalAutoCompleteResponseDto implements IGetArrivalAutoCompleteResponseDto {
    header?: Header | undefined;
    body?: Body | undefined;

    constructor(data?: IGetArrivalAutoCompleteResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? Header.fromJS(_data["header"]) : <any>undefined;
            this.body = _data["body"] ? Body.fromJS(_data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetArrivalAutoCompleteResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetArrivalAutoCompleteResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetArrivalAutoCompleteResponseDto {
    header?: Header | undefined;
    body?: Body | undefined;
}

export class Header implements IHeader {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message[] | undefined;

    constructor(data?: IHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.success = _data["success"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Header {
        data = typeof data === 'object' ? data : {};
        let result = new Header();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["success"] = this.success;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHeader {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message[] | undefined;
}

export class Message implements IMessage {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.messageType = _data["messageType"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["messageType"] = this.messageType;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessage {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;
}

export class Body implements IBody {
    items?: Item[] | undefined;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBody {
    items?: Item[] | undefined;
}

export class Item implements IItem {
    type?: number;
    geolocation?: Geolocation | undefined;
    country?: Country | undefined;
    state?: State | undefined;
    city?: City | undefined;
    giataInfo?: GiataInfo | undefined;
    provider?: number;

    constructor(data?: IItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.geolocation = _data["geolocation"] ? Geolocation.fromJS(_data["geolocation"]) : <any>undefined;
            this.country = _data["country"] ? Country.fromJS(_data["country"]) : <any>undefined;
            this.state = _data["state"] ? State.fromJS(_data["state"]) : <any>undefined;
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.giataInfo = _data["giataInfo"] ? GiataInfo.fromJS(_data["giataInfo"]) : <any>undefined;
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): Item {
        data = typeof data === 'object' ? data : {};
        let result = new Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["geolocation"] = this.geolocation ? this.geolocation.toJSON() : <any>undefined;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["state"] = this.state ? this.state.toJSON() : <any>undefined;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["giataInfo"] = this.giataInfo ? this.giataInfo.toJSON() : <any>undefined;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface IItem {
    type?: number;
    geolocation?: Geolocation | undefined;
    country?: Country | undefined;
    state?: State | undefined;
    city?: City | undefined;
    giataInfo?: GiataInfo | undefined;
    provider?: number;
}

export class Geolocation implements IGeolocation {
    longitude?: string | undefined;
    latitude?: string | undefined;

    constructor(data?: IGeolocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): Geolocation {
        data = typeof data === 'object' ? data : {};
        let result = new Geolocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data; 
    }
}

export interface IGeolocation {
    longitude?: string | undefined;
    latitude?: string | undefined;
}

export class Country implements ICountry {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICountry {
    id?: string | undefined;
    name?: string | undefined;
}

export class State implements IState {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): State {
        data = typeof data === 'object' ? data : {};
        let result = new State();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IState {
    id?: string | undefined;
    name?: string | undefined;
}

export class City implements ICity {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICity {
    id?: string | undefined;
    name?: string | undefined;
}

export class GiataInfo implements IGiataInfo {
    hotelId?: string | undefined;
    destinationId?: string | undefined;

    constructor(data?: IGiataInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.destinationId = _data["destinationId"];
        }
    }

    static fromJS(data: any): GiataInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GiataInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["destinationId"] = this.destinationId;
        return data; 
    }
}

export interface IGiataInfo {
    hotelId?: string | undefined;
    destinationId?: string | undefined;
}

export class GetArrivalAutoCompleteQuery implements IGetArrivalAutoCompleteQuery {
    productType?: number;
    query?: string | undefined;
    culture?: string | undefined;

    constructor(data?: IGetArrivalAutoCompleteQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productType = _data["productType"];
            this.query = _data["query"];
            this.culture = _data["culture"];
        }
    }

    static fromJS(data: any): GetArrivalAutoCompleteQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetArrivalAutoCompleteQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productType"] = this.productType;
        data["query"] = this.query;
        data["culture"] = this.culture;
        return data; 
    }
}

export interface IGetArrivalAutoCompleteQuery {
    productType?: number;
    query?: string | undefined;
    culture?: string | undefined;
}

export class PriceSearchResponseDto implements IPriceSearchResponseDto {
    header?: Header2 | undefined;
    body?: Body2 | undefined;

    constructor(data?: IPriceSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? Header2.fromJS(_data["header"]) : <any>undefined;
            this.body = _data["body"] ? Body2.fromJS(_data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PriceSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriceSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPriceSearchResponseDto {
    header?: Header2 | undefined;
    body?: Body2 | undefined;
}

export class Header2 implements IHeader2 {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message2[] | undefined;

    constructor(data?: IHeader2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.success = _data["success"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Header2 {
        data = typeof data === 'object' ? data : {};
        let result = new Header2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["success"] = this.success;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHeader2 {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message2[] | undefined;
}

export class Message2 implements IMessage2 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;

    constructor(data?: IMessage2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.messageType = _data["messageType"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message2 {
        data = typeof data === 'object' ? data : {};
        let result = new Message2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["messageType"] = this.messageType;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessage2 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;
}

export class Body2 implements IBody2 {
    searchId?: string | undefined;
    expiresOn?: Date;
    hotels?: Hotel[] | undefined;
    details?: Details | undefined;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchId = _data["searchId"];
            this.expiresOn = _data["expiresOn"] ? new Date(_data["expiresOn"].toString()) : <any>undefined;
            if (Array.isArray(_data["hotels"])) {
                this.hotels = [] as any;
                for (let item of _data["hotels"])
                    this.hotels!.push(Hotel.fromJS(item));
            }
            this.details = _data["details"] ? Details.fromJS(_data["details"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchId"] = this.searchId;
        data["expiresOn"] = this.expiresOn ? this.expiresOn.toISOString() : <any>undefined;
        if (Array.isArray(this.hotels)) {
            data["hotels"] = [];
            for (let item of this.hotels)
                data["hotels"].push(item.toJSON());
        }
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBody2 {
    searchId?: string | undefined;
    expiresOn?: Date;
    hotels?: Hotel[] | undefined;
    details?: Details | undefined;
}

export class Hotel implements IHotel {
    geolocation?: Geolocation2 | undefined;
    stars?: number;
    themes?: Theme[] | undefined;
    boards?: Board[] | undefined;
    country?: Country2 | undefined;
    city?: City2 | undefined;
    giataInfo?: GiataInfo2 | undefined;
    town?: Town | undefined;
    village?: Village | undefined;
    offers?: Offer[] | undefined;
    address?: string | undefined;
    provider?: number;
    thumbnail?: string | undefined;
    thumbnailFull?: string | undefined;
    description?: Description | undefined;
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.geolocation = _data["geolocation"] ? Geolocation2.fromJS(_data["geolocation"]) : <any>undefined;
            this.stars = _data["stars"];
            if (Array.isArray(_data["themes"])) {
                this.themes = [] as any;
                for (let item of _data["themes"])
                    this.themes!.push(Theme.fromJS(item));
            }
            if (Array.isArray(_data["boards"])) {
                this.boards = [] as any;
                for (let item of _data["boards"])
                    this.boards!.push(Board.fromJS(item));
            }
            this.country = _data["country"] ? Country2.fromJS(_data["country"]) : <any>undefined;
            this.city = _data["city"] ? City2.fromJS(_data["city"]) : <any>undefined;
            this.giataInfo = _data["giataInfo"] ? GiataInfo2.fromJS(_data["giataInfo"]) : <any>undefined;
            this.town = _data["town"] ? Town.fromJS(_data["town"]) : <any>undefined;
            this.village = _data["village"] ? Village.fromJS(_data["village"]) : <any>undefined;
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer.fromJS(item));
            }
            this.address = _data["address"];
            this.provider = _data["provider"];
            this.thumbnail = _data["thumbnail"];
            this.thumbnailFull = _data["thumbnailFull"];
            this.description = _data["description"] ? Description.fromJS(_data["description"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Hotel {
        data = typeof data === 'object' ? data : {};
        let result = new Hotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["geolocation"] = this.geolocation ? this.geolocation.toJSON() : <any>undefined;
        data["stars"] = this.stars;
        if (Array.isArray(this.themes)) {
            data["themes"] = [];
            for (let item of this.themes)
                data["themes"].push(item.toJSON());
        }
        if (Array.isArray(this.boards)) {
            data["boards"] = [];
            for (let item of this.boards)
                data["boards"].push(item.toJSON());
        }
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["giataInfo"] = this.giataInfo ? this.giataInfo.toJSON() : <any>undefined;
        data["town"] = this.town ? this.town.toJSON() : <any>undefined;
        data["village"] = this.village ? this.village.toJSON() : <any>undefined;
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        data["address"] = this.address;
        data["provider"] = this.provider;
        data["thumbnail"] = this.thumbnail;
        data["thumbnailFull"] = this.thumbnailFull;
        data["description"] = this.description ? this.description.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IHotel {
    geolocation?: Geolocation2 | undefined;
    stars?: number;
    themes?: Theme[] | undefined;
    boards?: Board[] | undefined;
    country?: Country2 | undefined;
    city?: City2 | undefined;
    giataInfo?: GiataInfo2 | undefined;
    town?: Town | undefined;
    village?: Village | undefined;
    offers?: Offer[] | undefined;
    address?: string | undefined;
    provider?: number;
    thumbnail?: string | undefined;
    thumbnailFull?: string | undefined;
    description?: Description | undefined;
    id?: string | undefined;
    name?: string | undefined;
}

export class Geolocation2 implements IGeolocation2 {
    longitude?: string | undefined;
    latitude?: string | undefined;

    constructor(data?: IGeolocation2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): Geolocation2 {
        data = typeof data === 'object' ? data : {};
        let result = new Geolocation2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data; 
    }
}

export interface IGeolocation2 {
    longitude?: string | undefined;
    latitude?: string | undefined;
}

export class Theme implements ITheme {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ITheme) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Theme {
        data = typeof data === 'object' ? data : {};
        let result = new Theme();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITheme {
    id?: string | undefined;
    name?: string | undefined;
}

export class Board implements IBoard {
    id?: string | undefined;

    constructor(data?: IBoard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Board {
        data = typeof data === 'object' ? data : {};
        let result = new Board();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IBoard {
    id?: string | undefined;
}

export class Country2 implements ICountry2 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: ICountry2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Country2 {
        data = typeof data === 'object' ? data : {};
        let result = new Country2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICountry2 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class City2 implements ICity2 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: ICity2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): City2 {
        data = typeof data === 'object' ? data : {};
        let result = new City2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICity2 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class GiataInfo2 implements IGiataInfo2 {
    hotelId?: string | undefined;
    destinationId?: string | undefined;

    constructor(data?: IGiataInfo2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.destinationId = _data["destinationId"];
        }
    }

    static fromJS(data: any): GiataInfo2 {
        data = typeof data === 'object' ? data : {};
        let result = new GiataInfo2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["destinationId"] = this.destinationId;
        return data; 
    }
}

export interface IGiataInfo2 {
    hotelId?: string | undefined;
    destinationId?: string | undefined;
}

export class Town implements ITown {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: ITown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Town {
        data = typeof data === 'object' ? data : {};
        let result = new Town();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITown {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class Village implements IVillage {
    name?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: IVillage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Village {
        data = typeof data === 'object' ? data : {};
        let result = new Village();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface IVillage {
    name?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class Offer implements IOffer {
    night?: number;
    isAvailable?: boolean;
    rooms?: Room[] | undefined;
    isRefundable?: boolean;
    offerId?: string | undefined;
    checkIn?: Date;
    price?: Price | undefined;
    ownOffer?: boolean;

    constructor(data?: IOffer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.night = _data["night"];
            this.isAvailable = _data["isAvailable"];
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room.fromJS(item));
            }
            this.isRefundable = _data["isRefundable"];
            this.offerId = _data["offerId"];
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            this.ownOffer = _data["ownOffer"];
        }
    }

    static fromJS(data: any): Offer {
        data = typeof data === 'object' ? data : {};
        let result = new Offer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["night"] = this.night;
        data["isAvailable"] = this.isAvailable;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        data["isRefundable"] = this.isRefundable;
        data["offerId"] = this.offerId;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["ownOffer"] = this.ownOffer;
        return data; 
    }
}

export interface IOffer {
    night?: number;
    isAvailable?: boolean;
    rooms?: Room[] | undefined;
    isRefundable?: boolean;
    offerId?: string | undefined;
    checkIn?: Date;
    price?: Price | undefined;
    ownOffer?: boolean;
}

export class Room implements IRoom {
    roomId?: string | undefined;
    roomName?: string | undefined;
    roomGroups?: any[] | undefined;
    accomId?: string | undefined;
    accomName?: string | undefined;
    boardId?: string | undefined;
    boardName?: string | undefined;
    boardGroups?: any[] | undefined;
    allotment?: number;
    stopSaleGuaranteed?: number;
    stopSaleStandart?: number;
    price?: Price | undefined;
    travellers?: Traveller[] | undefined;

    constructor(data?: IRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"];
            this.roomName = _data["roomName"];
            if (Array.isArray(_data["roomGroups"])) {
                this.roomGroups = [] as any;
                for (let item of _data["roomGroups"])
                    this.roomGroups!.push(item);
            }
            this.accomId = _data["accomId"];
            this.accomName = _data["accomName"];
            this.boardId = _data["boardId"];
            this.boardName = _data["boardName"];
            if (Array.isArray(_data["boardGroups"])) {
                this.boardGroups = [] as any;
                for (let item of _data["boardGroups"])
                    this.boardGroups!.push(item);
            }
            this.allotment = _data["allotment"];
            this.stopSaleGuaranteed = _data["stopSaleGuaranteed"];
            this.stopSaleStandart = _data["stopSaleStandart"];
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            if (Array.isArray(_data["travellers"])) {
                this.travellers = [] as any;
                for (let item of _data["travellers"])
                    this.travellers!.push(Traveller.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Room {
        data = typeof data === 'object' ? data : {};
        let result = new Room();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomName"] = this.roomName;
        if (Array.isArray(this.roomGroups)) {
            data["roomGroups"] = [];
            for (let item of this.roomGroups)
                data["roomGroups"].push(item);
        }
        data["accomId"] = this.accomId;
        data["accomName"] = this.accomName;
        data["boardId"] = this.boardId;
        data["boardName"] = this.boardName;
        if (Array.isArray(this.boardGroups)) {
            data["boardGroups"] = [];
            for (let item of this.boardGroups)
                data["boardGroups"].push(item);
        }
        data["allotment"] = this.allotment;
        data["stopSaleGuaranteed"] = this.stopSaleGuaranteed;
        data["stopSaleStandart"] = this.stopSaleStandart;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        if (Array.isArray(this.travellers)) {
            data["travellers"] = [];
            for (let item of this.travellers)
                data["travellers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoom {
    roomId?: string | undefined;
    roomName?: string | undefined;
    roomGroups?: any[] | undefined;
    accomId?: string | undefined;
    accomName?: string | undefined;
    boardId?: string | undefined;
    boardName?: string | undefined;
    boardGroups?: any[] | undefined;
    allotment?: number;
    stopSaleGuaranteed?: number;
    stopSaleStandart?: number;
    price?: Price | undefined;
    travellers?: Traveller[] | undefined;
}

export class Price implements IPrice {
    amount?: number;
    currency?: string | undefined;

    constructor(data?: IPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): Price {
        data = typeof data === 'object' ? data : {};
        let result = new Price();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IPrice {
    amount?: number;
    currency?: string | undefined;
}

export class Traveller implements ITraveller {
    type?: number;

    constructor(data?: ITraveller) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Traveller {
        data = typeof data === 'object' ? data : {};
        let result = new Traveller();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        return data; 
    }
}

export interface ITraveller {
    type?: number;
}

export class Description implements IDescription {
    text?: string | undefined;

    constructor(data?: IDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): Description {
        data = typeof data === 'object' ? data : {};
        let result = new Description();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data; 
    }
}

export interface IDescription {
    text?: string | undefined;
}

export class Details implements IDetails {
    enablePaging?: boolean;
    getOnlyBestOffers?: boolean;

    constructor(data?: IDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enablePaging = _data["enablePaging"];
            this.getOnlyBestOffers = _data["getOnlyBestOffers"];
        }
    }

    static fromJS(data: any): Details {
        data = typeof data === 'object' ? data : {};
        let result = new Details();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enablePaging"] = this.enablePaging;
        data["getOnlyBestOffers"] = this.getOnlyBestOffers;
        return data; 
    }
}

export interface IDetails {
    enablePaging?: boolean;
    getOnlyBestOffers?: boolean;
}

export class PriceSearchLocationQuery implements IPriceSearchLocationQuery {
    checkAllotment?: boolean;
    checkStopSale?: boolean;
    getOnlyDiscountedPrice?: boolean;
    getOnlyBestOffers?: boolean;
    productType?: number;
    arrivalLocations?: ArrivalLocation[] | undefined;
    roomCriteria?: RoomCriteriaLocation[] | undefined;
    nationality?: string | undefined;
    checkIn?: string | undefined;
    night?: number;
    currency?: string | undefined;
    culture?: string | undefined;

    constructor(data?: IPriceSearchLocationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkAllotment = _data["checkAllotment"];
            this.checkStopSale = _data["checkStopSale"];
            this.getOnlyDiscountedPrice = _data["getOnlyDiscountedPrice"];
            this.getOnlyBestOffers = _data["getOnlyBestOffers"];
            this.productType = _data["productType"];
            if (Array.isArray(_data["arrivalLocations"])) {
                this.arrivalLocations = [] as any;
                for (let item of _data["arrivalLocations"])
                    this.arrivalLocations!.push(ArrivalLocation.fromJS(item));
            }
            if (Array.isArray(_data["roomCriteria"])) {
                this.roomCriteria = [] as any;
                for (let item of _data["roomCriteria"])
                    this.roomCriteria!.push(RoomCriteriaLocation.fromJS(item));
            }
            this.nationality = _data["nationality"];
            this.checkIn = _data["checkIn"];
            this.night = _data["night"];
            this.currency = _data["currency"];
            this.culture = _data["culture"];
        }
    }

    static fromJS(data: any): PriceSearchLocationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PriceSearchLocationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkAllotment"] = this.checkAllotment;
        data["checkStopSale"] = this.checkStopSale;
        data["getOnlyDiscountedPrice"] = this.getOnlyDiscountedPrice;
        data["getOnlyBestOffers"] = this.getOnlyBestOffers;
        data["productType"] = this.productType;
        if (Array.isArray(this.arrivalLocations)) {
            data["arrivalLocations"] = [];
            for (let item of this.arrivalLocations)
                data["arrivalLocations"].push(item.toJSON());
        }
        if (Array.isArray(this.roomCriteria)) {
            data["roomCriteria"] = [];
            for (let item of this.roomCriteria)
                data["roomCriteria"].push(item.toJSON());
        }
        data["nationality"] = this.nationality;
        data["checkIn"] = this.checkIn;
        data["night"] = this.night;
        data["currency"] = this.currency;
        data["culture"] = this.culture;
        return data; 
    }
}

export interface IPriceSearchLocationQuery {
    checkAllotment?: boolean;
    checkStopSale?: boolean;
    getOnlyDiscountedPrice?: boolean;
    getOnlyBestOffers?: boolean;
    productType?: number;
    arrivalLocations?: ArrivalLocation[] | undefined;
    roomCriteria?: RoomCriteriaLocation[] | undefined;
    nationality?: string | undefined;
    checkIn?: string | undefined;
    night?: number;
    currency?: string | undefined;
    culture?: string | undefined;
}

export class ArrivalLocation implements IArrivalLocation {
    id?: string | undefined;
    type?: number;

    constructor(data?: IArrivalLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ArrivalLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ArrivalLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        return data; 
    }
}

export interface IArrivalLocation {
    id?: string | undefined;
    type?: number;
}

export class RoomCriteriaLocation implements IRoomCriteriaLocation {
    adult?: number;
    childAges?: number[] | undefined;

    constructor(data?: IRoomCriteriaLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adult = _data["adult"];
            if (Array.isArray(_data["childAges"])) {
                this.childAges = [] as any;
                for (let item of _data["childAges"])
                    this.childAges!.push(item);
            }
        }
    }

    static fromJS(data: any): RoomCriteriaLocation {
        data = typeof data === 'object' ? data : {};
        let result = new RoomCriteriaLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adult"] = this.adult;
        if (Array.isArray(this.childAges)) {
            data["childAges"] = [];
            for (let item of this.childAges)
                data["childAges"].push(item);
        }
        return data; 
    }
}

export interface IRoomCriteriaLocation {
    adult?: number;
    childAges?: number[] | undefined;
}

export class PriceSearchHotelQuery implements IPriceSearchHotelQuery {
    checkAllotment?: boolean;
    checkStopSale?: boolean;
    getOnlyDiscountedPrice?: boolean;
    getOnlyBestOffers?: boolean;
    productType?: number;
    products?: string[] | undefined;
    roomCriteria?: RoomCriteriaHotel[] | undefined;
    nationality?: string | undefined;
    checkIn?: string | undefined;
    night?: number;
    currency?: string | undefined;
    culture?: string | undefined;

    constructor(data?: IPriceSearchHotelQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkAllotment = _data["checkAllotment"];
            this.checkStopSale = _data["checkStopSale"];
            this.getOnlyDiscountedPrice = _data["getOnlyDiscountedPrice"];
            this.getOnlyBestOffers = _data["getOnlyBestOffers"];
            this.productType = _data["productType"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(item);
            }
            if (Array.isArray(_data["roomCriteria"])) {
                this.roomCriteria = [] as any;
                for (let item of _data["roomCriteria"])
                    this.roomCriteria!.push(RoomCriteriaHotel.fromJS(item));
            }
            this.nationality = _data["nationality"];
            this.checkIn = _data["checkIn"];
            this.night = _data["night"];
            this.currency = _data["currency"];
            this.culture = _data["culture"];
        }
    }

    static fromJS(data: any): PriceSearchHotelQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PriceSearchHotelQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkAllotment"] = this.checkAllotment;
        data["checkStopSale"] = this.checkStopSale;
        data["getOnlyDiscountedPrice"] = this.getOnlyDiscountedPrice;
        data["getOnlyBestOffers"] = this.getOnlyBestOffers;
        data["productType"] = this.productType;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item);
        }
        if (Array.isArray(this.roomCriteria)) {
            data["roomCriteria"] = [];
            for (let item of this.roomCriteria)
                data["roomCriteria"].push(item.toJSON());
        }
        data["nationality"] = this.nationality;
        data["checkIn"] = this.checkIn;
        data["night"] = this.night;
        data["currency"] = this.currency;
        data["culture"] = this.culture;
        return data; 
    }
}

export interface IPriceSearchHotelQuery {
    checkAllotment?: boolean;
    checkStopSale?: boolean;
    getOnlyDiscountedPrice?: boolean;
    getOnlyBestOffers?: boolean;
    productType?: number;
    products?: string[] | undefined;
    roomCriteria?: RoomCriteriaHotel[] | undefined;
    nationality?: string | undefined;
    checkIn?: string | undefined;
    night?: number;
    currency?: string | undefined;
    culture?: string | undefined;
}

export class RoomCriteriaHotel implements IRoomCriteriaHotel {
    adult?: number;

    constructor(data?: IRoomCriteriaHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adult = _data["adult"];
        }
    }

    static fromJS(data: any): RoomCriteriaHotel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomCriteriaHotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adult"] = this.adult;
        return data; 
    }
}

export interface IRoomCriteriaHotel {
    adult?: number;
}

export class GetProductInfoResponseDto implements IGetProductInfoResponseDto {
    header?: Header3 | undefined;
    body?: Body3 | undefined;

    constructor(data?: IGetProductInfoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? Header3.fromJS(_data["header"]) : <any>undefined;
            this.body = _data["body"] ? Body3.fromJS(_data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductInfoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductInfoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductInfoResponseDto {
    header?: Header3 | undefined;
    body?: Body3 | undefined;
}

export class Header3 implements IHeader3 {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message3[] | undefined;

    constructor(data?: IHeader3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.success = _data["success"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Header3 {
        data = typeof data === 'object' ? data : {};
        let result = new Header3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["success"] = this.success;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHeader3 {
    requestId?: string | undefined;
    success?: boolean;
    messages?: Message3[] | undefined;
}

export class Message3 implements IMessage3 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;

    constructor(data?: IMessage3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.messageType = _data["messageType"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message3 {
        data = typeof data === 'object' ? data : {};
        let result = new Message3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["messageType"] = this.messageType;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessage3 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;
}

export class Body3 implements IBody3 {
    hotel?: Hotel2 | undefined;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotel = _data["hotel"] ? Hotel2.fromJS(_data["hotel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBody3 {
    hotel?: Hotel2 | undefined;
}

export class Hotel2 implements IHotel2 {
    seasons?: Season[] | undefined;
    boards?: Board2[] | undefined;
    address?: Address | undefined;
    faxNumber?: string | undefined;
    phoneNumber?: string | undefined;
    homePage?: string | undefined;
    geolocation?: Geolocation3 | undefined;
    stars?: number;
    country?: Country3 | undefined;
    city?: City3 | undefined;
    giataInfo?: GiataInfo3 | undefined;
    thumbnail?: string | undefined;
    thumbnailFull?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IHotel2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["seasons"])) {
                this.seasons = [] as any;
                for (let item of _data["seasons"])
                    this.seasons!.push(Season.fromJS(item));
            }
            if (Array.isArray(_data["boards"])) {
                this.boards = [] as any;
                for (let item of _data["boards"])
                    this.boards!.push(Board2.fromJS(item));
            }
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            this.faxNumber = _data["faxNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.homePage = _data["homePage"];
            this.geolocation = _data["geolocation"] ? Geolocation3.fromJS(_data["geolocation"]) : <any>undefined;
            this.stars = _data["stars"];
            this.country = _data["country"] ? Country3.fromJS(_data["country"]) : <any>undefined;
            this.city = _data["city"] ? City3.fromJS(_data["city"]) : <any>undefined;
            this.giataInfo = _data["giataInfo"] ? GiataInfo3.fromJS(_data["giataInfo"]) : <any>undefined;
            this.thumbnail = _data["thumbnail"];
            this.thumbnailFull = _data["thumbnailFull"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Hotel2 {
        data = typeof data === 'object' ? data : {};
        let result = new Hotel2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.seasons)) {
            data["seasons"] = [];
            for (let item of this.seasons)
                data["seasons"].push(item.toJSON());
        }
        if (Array.isArray(this.boards)) {
            data["boards"] = [];
            for (let item of this.boards)
                data["boards"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["faxNumber"] = this.faxNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["homePage"] = this.homePage;
        data["geolocation"] = this.geolocation ? this.geolocation.toJSON() : <any>undefined;
        data["stars"] = this.stars;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["giataInfo"] = this.giataInfo ? this.giataInfo.toJSON() : <any>undefined;
        data["thumbnail"] = this.thumbnail;
        data["thumbnailFull"] = this.thumbnailFull;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IHotel2 {
    seasons?: Season[] | undefined;
    boards?: Board2[] | undefined;
    address?: Address | undefined;
    faxNumber?: string | undefined;
    phoneNumber?: string | undefined;
    homePage?: string | undefined;
    geolocation?: Geolocation3 | undefined;
    stars?: number;
    country?: Country3 | undefined;
    city?: City3 | undefined;
    giataInfo?: GiataInfo3 | undefined;
    thumbnail?: string | undefined;
    thumbnailFull?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
}

export class Season implements ISeason {
    id?: number;
    name?: string | undefined;
    beginDate?: Date;
    endDate?: Date;
    textCategories?: TextCategory[] | undefined;
    facilityCategories?: FacilityCategory[] | undefined;
    mediaFiles?: MediaFile[] | undefined;
    themes?: Theme2[] | undefined;

    constructor(data?: ISeason) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.beginDate = _data["beginDate"] ? new Date(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["textCategories"])) {
                this.textCategories = [] as any;
                for (let item of _data["textCategories"])
                    this.textCategories!.push(TextCategory.fromJS(item));
            }
            if (Array.isArray(_data["facilityCategories"])) {
                this.facilityCategories = [] as any;
                for (let item of _data["facilityCategories"])
                    this.facilityCategories!.push(FacilityCategory.fromJS(item));
            }
            if (Array.isArray(_data["mediaFiles"])) {
                this.mediaFiles = [] as any;
                for (let item of _data["mediaFiles"])
                    this.mediaFiles!.push(MediaFile.fromJS(item));
            }
            if (Array.isArray(_data["themes"])) {
                this.themes = [] as any;
                for (let item of _data["themes"])
                    this.themes!.push(Theme2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Season {
        data = typeof data === 'object' ? data : {};
        let result = new Season();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        if (Array.isArray(this.textCategories)) {
            data["textCategories"] = [];
            for (let item of this.textCategories)
                data["textCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.facilityCategories)) {
            data["facilityCategories"] = [];
            for (let item of this.facilityCategories)
                data["facilityCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.mediaFiles)) {
            data["mediaFiles"] = [];
            for (let item of this.mediaFiles)
                data["mediaFiles"].push(item.toJSON());
        }
        if (Array.isArray(this.themes)) {
            data["themes"] = [];
            for (let item of this.themes)
                data["themes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISeason {
    id?: number;
    name?: string | undefined;
    beginDate?: Date;
    endDate?: Date;
    textCategories?: TextCategory[] | undefined;
    facilityCategories?: FacilityCategory[] | undefined;
    mediaFiles?: MediaFile[] | undefined;
    themes?: Theme2[] | undefined;
}

export class TextCategory implements ITextCategory {
    code?: string | undefined;
    name?: string | undefined;
    presentations?: Presentation[] | undefined;

    constructor(data?: ITextCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            if (Array.isArray(_data["presentations"])) {
                this.presentations = [] as any;
                for (let item of _data["presentations"])
                    this.presentations!.push(Presentation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TextCategory {
        data = typeof data === 'object' ? data : {};
        let result = new TextCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        if (Array.isArray(this.presentations)) {
            data["presentations"] = [];
            for (let item of this.presentations)
                data["presentations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITextCategory {
    code?: string | undefined;
    name?: string | undefined;
    presentations?: Presentation[] | undefined;
}

export class Presentation implements IPresentation {
    textType?: number;
    text?: string | undefined;

    constructor(data?: IPresentation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.textType = _data["textType"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): Presentation {
        data = typeof data === 'object' ? data : {};
        let result = new Presentation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textType"] = this.textType;
        data["text"] = this.text;
        return data; 
    }
}

export interface IPresentation {
    textType?: number;
    text?: string | undefined;
}

export class FacilityCategory implements IFacilityCategory {
    name?: string | undefined;
    facilities?: Facility[] | undefined;

    constructor(data?: IFacilityCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(Facility.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FacilityCategory {
        data = typeof data === 'object' ? data : {};
        let result = new FacilityCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFacilityCategory {
    name?: string | undefined;
    facilities?: Facility[] | undefined;
}

export class Facility implements IFacility {
    id?: string | undefined;
    name?: string | undefined;
    note?: string | undefined;
    isPriced?: boolean;

    constructor(data?: IFacility) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.note = _data["note"];
            this.isPriced = _data["isPriced"];
        }
    }

    static fromJS(data: any): Facility {
        data = typeof data === 'object' ? data : {};
        let result = new Facility();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["note"] = this.note;
        data["isPriced"] = this.isPriced;
        return data; 
    }
}

export interface IFacility {
    id?: string | undefined;
    name?: string | undefined;
    note?: string | undefined;
    isPriced?: boolean;
}

export class MediaFile implements IMediaFile {
    fileType?: number;
    url?: string | undefined;
    urlFull?: string | undefined;

    constructor(data?: IMediaFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileType = _data["fileType"];
            this.url = _data["url"];
            this.urlFull = _data["urlFull"];
        }
    }

    static fromJS(data: any): MediaFile {
        data = typeof data === 'object' ? data : {};
        let result = new MediaFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileType"] = this.fileType;
        data["url"] = this.url;
        data["urlFull"] = this.urlFull;
        return data; 
    }
}

export interface IMediaFile {
    fileType?: number;
    url?: string | undefined;
    urlFull?: string | undefined;
}

export class Theme2 implements ITheme2 {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: ITheme2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Theme2 {
        data = typeof data === 'object' ? data : {};
        let result = new Theme2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITheme2 {
    id?: string | undefined;
    name?: string | undefined;
}

export class Board2 implements IBoard2 {
    id?: string | undefined;

    constructor(data?: IBoard2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Board2 {
        data = typeof data === 'object' ? data : {};
        let result = new Board2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IBoard2 {
    id?: string | undefined;
}

export class Address implements IAddress {
    addressLines?: string[] | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["addressLines"])) {
                this.addressLines = [] as any;
                for (let item of _data["addressLines"])
                    this.addressLines!.push(item);
            }
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.addressLines)) {
            data["addressLines"] = [];
            for (let item of this.addressLines)
                data["addressLines"].push(item);
        }
        return data; 
    }
}

export interface IAddress {
    addressLines?: string[] | undefined;
}

export class Geolocation3 implements IGeolocation3 {
    longitude?: string | undefined;
    latitude?: string | undefined;

    constructor(data?: IGeolocation3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
        }
    }

    static fromJS(data: any): Geolocation3 {
        data = typeof data === 'object' ? data : {};
        let result = new Geolocation3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        return data; 
    }
}

export interface IGeolocation3 {
    longitude?: string | undefined;
    latitude?: string | undefined;
}

export class Country3 implements ICountry3 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: ICountry3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Country3 {
        data = typeof data === 'object' ? data : {};
        let result = new Country3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICountry3 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class City3 implements ICity3 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;

    constructor(data?: ICity3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.provider = _data["provider"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): City3 {
        data = typeof data === 'object' ? data : {};
        let result = new City3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["provider"] = this.provider;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICity3 {
    name?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
    provider?: number;
    id?: string | undefined;
}

export class GiataInfo3 implements IGiataInfo3 {
    hotelId?: string | undefined;
    destinationId?: string | undefined;

    constructor(data?: IGiataInfo3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.destinationId = _data["destinationId"];
        }
    }

    static fromJS(data: any): GiataInfo3 {
        data = typeof data === 'object' ? data : {};
        let result = new GiataInfo3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["destinationId"] = this.destinationId;
        return data; 
    }
}

export interface IGiataInfo3 {
    hotelId?: string | undefined;
    destinationId?: string | undefined;
}

export class GetProductInfoQuery implements IGetProductInfoQuery {
    productType?: number;
    ownerProvider?: number;
    product?: string | undefined;
    culture?: string | undefined;

    constructor(data?: IGetProductInfoQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productType = _data["productType"];
            this.ownerProvider = _data["ownerProvider"];
            this.product = _data["product"];
            this.culture = _data["culture"];
        }
    }

    static fromJS(data: any): GetProductInfoQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductInfoQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productType"] = this.productType;
        data["ownerProvider"] = this.ownerProvider;
        data["product"] = this.product;
        data["culture"] = this.culture;
        return data; 
    }
}

export interface IGetProductInfoQuery {
    productType?: number;
    ownerProvider?: number;
    product?: string | undefined;
    culture?: string | undefined;
}

export class GetOffersResponseDto implements IGetOffersResponseDto {
    header?: Header4 | undefined;
    body?: Body4 | undefined;

    constructor(data?: IGetOffersResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? Header4.fromJS(_data["header"]) : <any>undefined;
            this.body = _data["body"] ? Body4.fromJS(_data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOffersResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetOffersResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetOffersResponseDto {
    header?: Header4 | undefined;
    body?: Body4 | undefined;
}

export class Header4 implements IHeader4 {
    requestId?: string | undefined;
    success?: boolean;
    responseTime?: Date;
    messages?: Message4[] | undefined;

    constructor(data?: IHeader4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.success = _data["success"];
            this.responseTime = _data["responseTime"] ? new Date(_data["responseTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Header4 {
        data = typeof data === 'object' ? data : {};
        let result = new Header4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["success"] = this.success;
        data["responseTime"] = this.responseTime ? this.responseTime.toISOString() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHeader4 {
    requestId?: string | undefined;
    success?: boolean;
    responseTime?: Date;
    messages?: Message4[] | undefined;
}

export class Message4 implements IMessage4 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;

    constructor(data?: IMessage4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.messageType = _data["messageType"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message4 {
        data = typeof data === 'object' ? data : {};
        let result = new Message4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["messageType"] = this.messageType;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessage4 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;
}

export class Body4 implements IBody4 {
    offers?: Offer2[] | undefined;
    information?: Information | undefined;
    productId?: string | undefined;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer2.fromJS(item));
            }
            this.information = _data["information"] ? Information.fromJS(_data["information"]) : <any>undefined;
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        data["information"] = this.information ? this.information.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        return data; 
    }
}

export interface IBody4 {
    offers?: Offer2[] | undefined;
    information?: Information | undefined;
    productId?: string | undefined;
}

export class Offer2 implements IOffer2 {
    night?: number;
    isAvailable?: boolean;
    availability?: number;
    rooms?: Room2[] | undefined;
    isRefundable?: boolean;
    cancellationPolicies?: CancellationPolicy[] | undefined;
    priceBreakdowns?: PriceBreakdown[] | undefined;
    expiresOn?: Date;
    offerId?: string | undefined;
    checkIn?: Date;
    price?: Price2 | undefined;
    ownOffer?: boolean;
    provider?: number;

    constructor(data?: IOffer2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.night = _data["night"];
            this.isAvailable = _data["isAvailable"];
            this.availability = _data["availability"];
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
            this.isRefundable = _data["isRefundable"];
            if (Array.isArray(_data["cancellationPolicies"])) {
                this.cancellationPolicies = [] as any;
                for (let item of _data["cancellationPolicies"])
                    this.cancellationPolicies!.push(CancellationPolicy.fromJS(item));
            }
            if (Array.isArray(_data["priceBreakdowns"])) {
                this.priceBreakdowns = [] as any;
                for (let item of _data["priceBreakdowns"])
                    this.priceBreakdowns!.push(PriceBreakdown.fromJS(item));
            }
            this.expiresOn = _data["expiresOn"] ? new Date(_data["expiresOn"].toString()) : <any>undefined;
            this.offerId = _data["offerId"];
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price2.fromJS(_data["price"]) : <any>undefined;
            this.ownOffer = _data["ownOffer"];
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): Offer2 {
        data = typeof data === 'object' ? data : {};
        let result = new Offer2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["night"] = this.night;
        data["isAvailable"] = this.isAvailable;
        data["availability"] = this.availability;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        data["isRefundable"] = this.isRefundable;
        if (Array.isArray(this.cancellationPolicies)) {
            data["cancellationPolicies"] = [];
            for (let item of this.cancellationPolicies)
                data["cancellationPolicies"].push(item.toJSON());
        }
        if (Array.isArray(this.priceBreakdowns)) {
            data["priceBreakdowns"] = [];
            for (let item of this.priceBreakdowns)
                data["priceBreakdowns"].push(item.toJSON());
        }
        data["expiresOn"] = this.expiresOn ? this.expiresOn.toISOString() : <any>undefined;
        data["offerId"] = this.offerId;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["ownOffer"] = this.ownOffer;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface IOffer2 {
    night?: number;
    isAvailable?: boolean;
    availability?: number;
    rooms?: Room2[] | undefined;
    isRefundable?: boolean;
    cancellationPolicies?: CancellationPolicy[] | undefined;
    priceBreakdowns?: PriceBreakdown[] | undefined;
    expiresOn?: Date;
    offerId?: string | undefined;
    checkIn?: Date;
    price?: Price2 | undefined;
    ownOffer?: boolean;
    provider?: number;
}

export class Room2 implements IRoom2 {
    roomId?: string | undefined;
    roomName?: string | undefined;
    boardId?: string | undefined;
    boardName?: string | undefined;
    boardGroups?: BoardGroup[] | undefined;
    stopSaleGuaranteed?: number;
    stopSaleStandart?: number;
    travellers?: Traveller2[] | undefined;

    constructor(data?: IRoom2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"];
            this.roomName = _data["roomName"];
            this.boardId = _data["boardId"];
            this.boardName = _data["boardName"];
            if (Array.isArray(_data["boardGroups"])) {
                this.boardGroups = [] as any;
                for (let item of _data["boardGroups"])
                    this.boardGroups!.push(BoardGroup.fromJS(item));
            }
            this.stopSaleGuaranteed = _data["stopSaleGuaranteed"];
            this.stopSaleStandart = _data["stopSaleStandart"];
            if (Array.isArray(_data["travellers"])) {
                this.travellers = [] as any;
                for (let item of _data["travellers"])
                    this.travellers!.push(Traveller2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Room2 {
        data = typeof data === 'object' ? data : {};
        let result = new Room2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomName"] = this.roomName;
        data["boardId"] = this.boardId;
        data["boardName"] = this.boardName;
        if (Array.isArray(this.boardGroups)) {
            data["boardGroups"] = [];
            for (let item of this.boardGroups)
                data["boardGroups"].push(item.toJSON());
        }
        data["stopSaleGuaranteed"] = this.stopSaleGuaranteed;
        data["stopSaleStandart"] = this.stopSaleStandart;
        if (Array.isArray(this.travellers)) {
            data["travellers"] = [];
            for (let item of this.travellers)
                data["travellers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoom2 {
    roomId?: string | undefined;
    roomName?: string | undefined;
    boardId?: string | undefined;
    boardName?: string | undefined;
    boardGroups?: BoardGroup[] | undefined;
    stopSaleGuaranteed?: number;
    stopSaleStandart?: number;
    travellers?: Traveller2[] | undefined;
}

export class BoardGroup implements IBoardGroup {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IBoardGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BoardGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BoardGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IBoardGroup {
    id?: string | undefined;
    name?: string | undefined;
}

export class Traveller2 implements ITraveller2 {
    type?: number;
    age?: number;
    nationality?: string | undefined;
    minAge?: number;
    maxAge?: number;

    constructor(data?: ITraveller2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.age = _data["age"];
            this.nationality = _data["nationality"];
            this.minAge = _data["minAge"];
            this.maxAge = _data["maxAge"];
        }
    }

    static fromJS(data: any): Traveller2 {
        data = typeof data === 'object' ? data : {};
        let result = new Traveller2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["age"] = this.age;
        data["nationality"] = this.nationality;
        data["minAge"] = this.minAge;
        data["maxAge"] = this.maxAge;
        return data; 
    }
}

export interface ITraveller2 {
    type?: number;
    age?: number;
    nationality?: string | undefined;
    minAge?: number;
    maxAge?: number;
}

export class CancellationPolicy implements ICancellationPolicy {
    dueDate?: Date;
    price?: Price2 | undefined;
    provider?: number;

    constructor(data?: ICancellationPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price2.fromJS(_data["price"]) : <any>undefined;
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): CancellationPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new CancellationPolicy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ICancellationPolicy {
    dueDate?: Date;
    price?: Price2 | undefined;
    provider?: number;
}

export class Price2 implements IPrice2 {
    amount?: number;
    currency?: string | undefined;

    constructor(data?: IPrice2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): Price2 {
        data = typeof data === 'object' ? data : {};
        let result = new Price2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IPrice2 {
    amount?: number;
    currency?: string | undefined;
}

export class PriceBreakdown implements IPriceBreakdown {
    productType?: number;
    priceBreakdowns?: PriceBreakdown[] | undefined;
    roomNumber?: string | undefined;
    date?: Date;
    price?: Price2 | undefined;

    constructor(data?: IPriceBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productType = _data["productType"];
            if (Array.isArray(_data["priceBreakdowns"])) {
                this.priceBreakdowns = [] as any;
                for (let item of _data["priceBreakdowns"])
                    this.priceBreakdowns!.push(PriceBreakdown.fromJS(item));
            }
            this.roomNumber = _data["roomNumber"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price2.fromJS(_data["price"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PriceBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new PriceBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productType"] = this.productType;
        if (Array.isArray(this.priceBreakdowns)) {
            data["priceBreakdowns"] = [];
            for (let item of this.priceBreakdowns)
                data["priceBreakdowns"].push(item.toJSON());
        }
        data["roomNumber"] = this.roomNumber;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPriceBreakdown {
    productType?: number;
    priceBreakdowns?: PriceBreakdown[] | undefined;
    roomNumber?: string | undefined;
    date?: Date;
    price?: Price2 | undefined;
}

export class Information implements IInformation {
    total?: number;

    constructor(data?: IInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): Information {
        data = typeof data === 'object' ? data : {};
        let result = new Information();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        return data; 
    }
}

export interface IInformation {
    total?: number;
}

export class GetOffersQuery implements IGetOffersQuery {
    searchId?: string | undefined;
    offerId?: string | undefined;
    productType?: number;
    productId?: string | undefined;
    currency?: string | undefined;
    culture?: string | undefined;

    constructor(data?: IGetOffersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchId = _data["searchId"];
            this.offerId = _data["offerId"];
            this.productType = _data["productType"];
            this.productId = _data["productId"];
            this.currency = _data["currency"];
            this.culture = _data["culture"];
        }
    }

    static fromJS(data: any): GetOffersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOffersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchId"] = this.searchId;
        data["offerId"] = this.offerId;
        data["productType"] = this.productType;
        data["productId"] = this.productId;
        data["currency"] = this.currency;
        data["culture"] = this.culture;
        return data; 
    }
}

export interface IGetOffersQuery {
    searchId?: string | undefined;
    offerId?: string | undefined;
    productType?: number;
    productId?: string | undefined;
    currency?: string | undefined;
    culture?: string | undefined;
}

export class GetOfferDetailsResponseDto implements IGetOfferDetailsResponseDto {
    header?: Header5 | undefined;
    body?: Body5 | undefined;

    constructor(data?: IGetOfferDetailsResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? Header5.fromJS(_data["header"]) : <any>undefined;
            this.body = _data["body"] ? Body5.fromJS(_data["body"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOfferDetailsResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetOfferDetailsResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetOfferDetailsResponseDto {
    header?: Header5 | undefined;
    body?: Body5 | undefined;
}

export class Header5 implements IHeader5 {
    requestId?: string | undefined;
    success?: boolean;
    responseTime?: Date;
    messages?: Message5[] | undefined;

    constructor(data?: IHeader5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.success = _data["success"];
            this.responseTime = _data["responseTime"] ? new Date(_data["responseTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Header5 {
        data = typeof data === 'object' ? data : {};
        let result = new Header5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["success"] = this.success;
        data["responseTime"] = this.responseTime ? this.responseTime.toISOString() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHeader5 {
    requestId?: string | undefined;
    success?: boolean;
    responseTime?: Date;
    messages?: Message5[] | undefined;
}

export class Message5 implements IMessage5 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;

    constructor(data?: IMessage5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.messageType = _data["messageType"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Message5 {
        data = typeof data === 'object' ? data : {};
        let result = new Message5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["messageType"] = this.messageType;
        data["message"] = this.message;
        return data; 
    }
}

export interface IMessage5 {
    id?: number;
    code?: string | undefined;
    messageType?: number;
    message?: string | undefined;
}

export class Body5 implements IBody5 {
    offerDetails?: OfferDetail[] | undefined;

    constructor(data?: IBody5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["offerDetails"])) {
                this.offerDetails = [] as any;
                for (let item of _data["offerDetails"])
                    this.offerDetails!.push(OfferDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body5 {
        data = typeof data === 'object' ? data : {};
        let result = new Body5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.offerDetails)) {
            data["offerDetails"] = [];
            for (let item of this.offerDetails)
                data["offerDetails"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBody5 {
    offerDetails?: OfferDetail[] | undefined;
}

export class OfferDetail implements IOfferDetail {
    expiresOn?: Date;
    offerId?: string | undefined;
    checkIn?: Date;
    checkOut?: Date;
    isSpecial?: boolean;
    isAvailable?: boolean;
    isRefundable?: boolean;
    passengerAmountToPay?: PassengerAmountToPay | undefined;
    agencyCommission?: AgencyCommission | undefined;
    agencySupplementCommission?: AgencySupplementCommission | undefined;
    hotels?: any[] | undefined;
    extraServices?: ExtraService[] | undefined;
    cancellationPolicies?: CancellationPolicy2[] | undefined;
    priceBreakdowns?: PriceBreakDown[] | undefined;
    provider?: number;
    paymentDetail?: PaymentDetail | undefined;

    constructor(data?: IOfferDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expiresOn = _data["expiresOn"] ? new Date(_data["expiresOn"].toString()) : <any>undefined;
            this.offerId = _data["offerId"];
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.checkOut = _data["checkOut"] ? new Date(_data["checkOut"].toString()) : <any>undefined;
            this.isSpecial = _data["isSpecial"];
            this.isAvailable = _data["isAvailable"];
            this.isRefundable = _data["isRefundable"];
            this.passengerAmountToPay = _data["passengerAmountToPay"] ? PassengerAmountToPay.fromJS(_data["passengerAmountToPay"]) : <any>undefined;
            this.agencyCommission = _data["agencyCommission"] ? AgencyCommission.fromJS(_data["agencyCommission"]) : <any>undefined;
            this.agencySupplementCommission = _data["agencySupplementCommission"] ? AgencySupplementCommission.fromJS(_data["agencySupplementCommission"]) : <any>undefined;
            if (Array.isArray(_data["hotels"])) {
                this.hotels = [] as any;
                for (let item of _data["hotels"])
                    this.hotels!.push(item);
            }
            if (Array.isArray(_data["extraServices"])) {
                this.extraServices = [] as any;
                for (let item of _data["extraServices"])
                    this.extraServices!.push(ExtraService.fromJS(item));
            }
            if (Array.isArray(_data["cancellationPolicies"])) {
                this.cancellationPolicies = [] as any;
                for (let item of _data["cancellationPolicies"])
                    this.cancellationPolicies!.push(CancellationPolicy2.fromJS(item));
            }
            if (Array.isArray(_data["priceBreakdowns"])) {
                this.priceBreakdowns = [] as any;
                for (let item of _data["priceBreakdowns"])
                    this.priceBreakdowns!.push(PriceBreakDown.fromJS(item));
            }
            this.provider = _data["provider"];
            this.paymentDetail = _data["paymentDetail"] ? PaymentDetail.fromJS(_data["paymentDetail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OfferDetail {
        data = typeof data === 'object' ? data : {};
        let result = new OfferDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expiresOn"] = this.expiresOn ? this.expiresOn.toISOString() : <any>undefined;
        data["offerId"] = this.offerId;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>undefined;
        data["isSpecial"] = this.isSpecial;
        data["isAvailable"] = this.isAvailable;
        data["isRefundable"] = this.isRefundable;
        data["passengerAmountToPay"] = this.passengerAmountToPay ? this.passengerAmountToPay.toJSON() : <any>undefined;
        data["agencyCommission"] = this.agencyCommission ? this.agencyCommission.toJSON() : <any>undefined;
        data["agencySupplementCommission"] = this.agencySupplementCommission ? this.agencySupplementCommission.toJSON() : <any>undefined;
        if (Array.isArray(this.hotels)) {
            data["hotels"] = [];
            for (let item of this.hotels)
                data["hotels"].push(item);
        }
        if (Array.isArray(this.extraServices)) {
            data["extraServices"] = [];
            for (let item of this.extraServices)
                data["extraServices"].push(item.toJSON());
        }
        if (Array.isArray(this.cancellationPolicies)) {
            data["cancellationPolicies"] = [];
            for (let item of this.cancellationPolicies)
                data["cancellationPolicies"].push(item.toJSON());
        }
        if (Array.isArray(this.priceBreakdowns)) {
            data["priceBreakdowns"] = [];
            for (let item of this.priceBreakdowns)
                data["priceBreakdowns"].push(item.toJSON());
        }
        data["provider"] = this.provider;
        data["paymentDetail"] = this.paymentDetail ? this.paymentDetail.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOfferDetail {
    expiresOn?: Date;
    offerId?: string | undefined;
    checkIn?: Date;
    checkOut?: Date;
    isSpecial?: boolean;
    isAvailable?: boolean;
    isRefundable?: boolean;
    passengerAmountToPay?: PassengerAmountToPay | undefined;
    agencyCommission?: AgencyCommission | undefined;
    agencySupplementCommission?: AgencySupplementCommission | undefined;
    hotels?: any[] | undefined;
    extraServices?: ExtraService[] | undefined;
    cancellationPolicies?: CancellationPolicy2[] | undefined;
    priceBreakdowns?: PriceBreakDown[] | undefined;
    provider?: number;
    paymentDetail?: PaymentDetail | undefined;
}

export class PassengerAmountToPay implements IPassengerAmountToPay {
    amount?: number;
    currency?: string | undefined;

    constructor(data?: IPassengerAmountToPay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): PassengerAmountToPay {
        data = typeof data === 'object' ? data : {};
        let result = new PassengerAmountToPay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IPassengerAmountToPay {
    amount?: number;
    currency?: string | undefined;
}

export class AgencyCommission implements IAgencyCommission {
    percent?: number;
    amount?: number;
    currency?: string | undefined;

    constructor(data?: IAgencyCommission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.percent = _data["percent"];
            this.amount = _data["amount"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): AgencyCommission {
        data = typeof data === 'object' ? data : {};
        let result = new AgencyCommission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["percent"] = this.percent;
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IAgencyCommission {
    percent?: number;
    amount?: number;
    currency?: string | undefined;
}

export class AgencySupplementCommission implements IAgencySupplementCommission {
    percent?: number;
    amount?: number;
    currency?: string | undefined;

    constructor(data?: IAgencySupplementCommission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.percent = _data["percent"];
            this.amount = _data["amount"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): AgencySupplementCommission {
        data = typeof data === 'object' ? data : {};
        let result = new AgencySupplementCommission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["percent"] = this.percent;
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IAgencySupplementCommission {
    percent?: number;
    amount?: number;
    currency?: string | undefined;
}

export class ExtraService implements IExtraService {
    compulsory?: boolean;
    free?: boolean;
    offers?: Offer3[] | undefined;
    code?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IExtraService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.compulsory = _data["compulsory"];
            this.free = _data["free"];
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(Offer3.fromJS(item));
            }
            this.code = _data["code"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExtraService {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["compulsory"] = this.compulsory;
        data["free"] = this.free;
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        data["code"] = this.code;
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IExtraService {
    compulsory?: boolean;
    free?: boolean;
    offers?: Offer3[] | undefined;
    code?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
}

export class Offer3 implements IOffer3 {
    priceBreakDown?: PriceBreakDown | undefined;
    willBePayAt?: number;
    checkIn?: Date;
    price?: Price3 | undefined;

    constructor(data?: IOffer3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.priceBreakDown = _data["priceBreakDown"] ? PriceBreakDown.fromJS(_data["priceBreakDown"]) : <any>undefined;
            this.willBePayAt = _data["willBePayAt"];
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price3.fromJS(_data["price"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Offer3 {
        data = typeof data === 'object' ? data : {};
        let result = new Offer3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["priceBreakDown"] = this.priceBreakDown ? this.priceBreakDown.toJSON() : <any>undefined;
        data["willBePayAt"] = this.willBePayAt;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOffer3 {
    priceBreakDown?: PriceBreakDown | undefined;
    willBePayAt?: number;
    checkIn?: Date;
    price?: Price3 | undefined;
}

export class PriceBreakDown implements IPriceBreakDown {
    items?: Item2[] | undefined;

    constructor(data?: IPriceBreakDown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Item2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PriceBreakDown {
        data = typeof data === 'object' ? data : {};
        let result = new PriceBreakDown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPriceBreakDown {
    items?: Item2[] | undefined;
}

export class Item2 implements IItem2 {
    type?: number;
    price?: Price3 | undefined;

    constructor(data?: IItem2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.price = _data["price"] ? Price3.fromJS(_data["price"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Item2 {
        data = typeof data === 'object' ? data : {};
        let result = new Item2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IItem2 {
    type?: number;
    price?: Price3 | undefined;
}

export class Price3 implements IPrice3 {
    amount?: number;
    currency?: string | undefined;
    percent?: number;

    constructor(data?: IPrice3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.percent = _data["percent"];
        }
    }

    static fromJS(data: any): Price3 {
        data = typeof data === 'object' ? data : {};
        let result = new Price3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["percent"] = this.percent;
        return data; 
    }
}

export interface IPrice3 {
    amount?: number;
    currency?: string | undefined;
    percent?: number;
}

export class CancellationPolicy2 implements ICancellationPolicy2 {
    roomNumber?: string | undefined;
    beginDate?: Date;
    dueDate?: Date;
    price?: Price3 | undefined;
    provider?: number;

    constructor(data?: ICancellationPolicy2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomNumber = _data["roomNumber"];
            this.beginDate = _data["beginDate"] ? new Date(_data["beginDate"].toString()) : <any>undefined;
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price3.fromJS(_data["price"]) : <any>undefined;
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): CancellationPolicy2 {
        data = typeof data === 'object' ? data : {};
        let result = new CancellationPolicy2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomNumber"] = this.roomNumber;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ICancellationPolicy2 {
    roomNumber?: string | undefined;
    beginDate?: Date;
    dueDate?: Date;
    price?: Price3 | undefined;
    provider?: number;
}

export class PaymentDetail implements IPaymentDetail {
    paymentPlan?: PaymentPlan[] | undefined;
    paymentInfo?: any[] | undefined;

    constructor(data?: IPaymentDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["paymentPlan"])) {
                this.paymentPlan = [] as any;
                for (let item of _data["paymentPlan"])
                    this.paymentPlan!.push(PaymentPlan.fromJS(item));
            }
            if (Array.isArray(_data["paymentInfo"])) {
                this.paymentInfo = [] as any;
                for (let item of _data["paymentInfo"])
                    this.paymentInfo!.push(item);
            }
        }
    }

    static fromJS(data: any): PaymentDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.paymentPlan)) {
            data["paymentPlan"] = [];
            for (let item of this.paymentPlan)
                data["paymentPlan"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentInfo)) {
            data["paymentInfo"] = [];
            for (let item of this.paymentInfo)
                data["paymentInfo"].push(item);
        }
        return data; 
    }
}

export interface IPaymentDetail {
    paymentPlan?: PaymentPlan[] | undefined;
    paymentInfo?: any[] | undefined;
}

export class PaymentPlan implements IPaymentPlan {
    paymentNo?: number;
    dueDate?: Date;
    price?: Price3 | undefined;
    paymentStatus?: boolean;

    constructor(data?: IPaymentPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentNo = _data["paymentNo"];
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : <any>undefined;
            this.price = _data["price"] ? Price3.fromJS(_data["price"]) : <any>undefined;
            this.paymentStatus = _data["paymentStatus"];
        }
    }

    static fromJS(data: any): PaymentPlan {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentNo"] = this.paymentNo;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["paymentStatus"] = this.paymentStatus;
        return data; 
    }
}

export interface IPaymentPlan {
    paymentNo?: number;
    dueDate?: Date;
    price?: Price3 | undefined;
    paymentStatus?: boolean;
}

export class GetOfferDetailsQuery implements IGetOfferDetailsQuery {
    offerIds?: string[] | undefined;
    currency?: string | undefined;

    constructor(data?: IGetOfferDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["offerIds"])) {
                this.offerIds = [] as any;
                for (let item of _data["offerIds"])
                    this.offerIds!.push(item);
            }
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): GetOfferDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOfferDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.offerIds)) {
            data["offerIds"] = [];
            for (let item of this.offerIds)
                data["offerIds"].push(item);
        }
        data["currency"] = this.currency;
        return data; 
    }
}

export interface IGetOfferDetailsQuery {
    offerIds?: string[] | undefined;
    currency?: string | undefined;
}

export class TransferZoneDto implements ITransferZoneDto {
    zone_id?: number;
    country_id?: number;
    country?: string | undefined;
    img?: string | undefined;
    zone?: string | undefined;

    constructor(data?: ITransferZoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zone_id = _data["zone_id"];
            this.country_id = _data["country_id"];
            this.country = _data["country"];
            this.img = _data["img"];
            this.zone = _data["zone"];
        }
    }

    static fromJS(data: any): TransferZoneDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferZoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zone_id"] = this.zone_id;
        data["country_id"] = this.country_id;
        data["country"] = this.country;
        data["img"] = this.img;
        data["zone"] = this.zone;
        return data; 
    }
}

export interface ITransferZoneDto {
    zone_id?: number;
    country_id?: number;
    country?: string | undefined;
    img?: string | undefined;
    zone?: string | undefined;
}

export class TransferStartPointDto implements ITransferStartPointDto {
    fr?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;

    constructor(data?: ITransferStartPointDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fr = _data["fr"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): TransferStartPointDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferStartPointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fr"] = this.fr;
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }
}

export interface ITransferStartPointDto {
    fr?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
}

export class TransferEndPointDto implements ITransferEndPointDto {
    to?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;

    constructor(data?: ITransferEndPointDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.to = _data["to"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): TransferEndPointDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferEndPointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["to"] = this.to;
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }
}

export interface ITransferEndPointDto {
    to?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
}

export class TransferSearchResultDto implements ITransferSearchResultDto {
    suid?: string | undefined;
    info_?: InfoDto | undefined;
    lvtd_?: LvtdDto[] | undefined;

    constructor(data?: ITransferSearchResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.suid = _data["suid"];
            this.info_ = _data["info_"] ? InfoDto.fromJS(_data["info_"]) : <any>undefined;
            if (Array.isArray(_data["lvtd_"])) {
                this.lvtd_ = [] as any;
                for (let item of _data["lvtd_"])
                    this.lvtd_!.push(LvtdDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransferSearchResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferSearchResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["suid"] = this.suid;
        data["info_"] = this.info_ ? this.info_.toJSON() : <any>undefined;
        if (Array.isArray(this.lvtd_)) {
            data["lvtd_"] = [];
            for (let item of this.lvtd_)
                data["lvtd_"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITransferSearchResultDto {
    suid?: string | undefined;
    info_?: InfoDto | undefined;
    lvtd_?: LvtdDto[] | undefined;
}

export class InfoDto implements IInfoDto {
    fr_point_id?: number;
    frR?: string | undefined;
    frName?: string | undefined;
    toName?: string | undefined;
    fr_type?: string | undefined;
    to_point_id?: number;
    toR?: string | undefined;
    to_type?: string | undefined;
    distance?: number;
    duration?: number;
    date?: Date;
    zone_id?: number;

    constructor(data?: IInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fr_point_id = _data["fr_point_id"];
            this.frR = _data["frR"];
            this.frName = _data["frName"];
            this.toName = _data["toName"];
            this.fr_type = _data["fr_type"];
            this.to_point_id = _data["to_point_id"];
            this.toR = _data["toR"];
            this.to_type = _data["to_type"];
            this.distance = _data["distance"];
            this.duration = _data["duration"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.zone_id = _data["zone_id"];
        }
    }

    static fromJS(data: any): InfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fr_point_id"] = this.fr_point_id;
        data["frR"] = this.frR;
        data["frName"] = this.frName;
        data["toName"] = this.toName;
        data["fr_type"] = this.fr_type;
        data["to_point_id"] = this.to_point_id;
        data["toR"] = this.toR;
        data["to_type"] = this.to_type;
        data["distance"] = this.distance;
        data["duration"] = this.duration;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["zone_id"] = this.zone_id;
        return data; 
    }
}

export interface IInfoDto {
    fr_point_id?: number;
    frR?: string | undefined;
    frName?: string | undefined;
    toName?: string | undefined;
    fr_type?: string | undefined;
    to_point_id?: number;
    toR?: string | undefined;
    to_type?: string | undefined;
    distance?: number;
    duration?: number;
    date?: Date;
    zone_id?: number;
}

export class LvtdDto implements ILvtdDto {
    id?: number;
    vehicle_id?: number;
    vehicle_?: VehicleDto | undefined;
    vehiclePC_?: VehiclePCDto | undefined;
    vehicleViewPC_?: VehicleViewDto | undefined;
    vehicleGain_?: VehicleGainDto | undefined;
    discount_?: DiscountDto | undefined;
    number_of_free_rights?: number;
    extser_?: ExtraServiceDto[] | undefined;

    constructor(data?: ILvtdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.vehicle_id = _data["vehicle_id"];
            this.vehicle_ = _data["vehicle_"] ? VehicleDto.fromJS(_data["vehicle_"]) : <any>undefined;
            this.vehiclePC_ = _data["vehiclePC_"] ? VehiclePCDto.fromJS(_data["vehiclePC_"]) : <any>undefined;
            this.vehicleViewPC_ = _data["vehicleViewPC_"] ? VehicleViewDto.fromJS(_data["vehicleViewPC_"]) : <any>undefined;
            this.vehicleGain_ = _data["vehicleGain_"] ? VehicleGainDto.fromJS(_data["vehicleGain_"]) : <any>undefined;
            this.discount_ = _data["discount_"] ? DiscountDto.fromJS(_data["discount_"]) : <any>undefined;
            this.number_of_free_rights = _data["number_of_free_rights"];
            if (Array.isArray(_data["extser_"])) {
                this.extser_ = [] as any;
                for (let item of _data["extser_"])
                    this.extser_!.push(ExtraServiceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LvtdDto {
        data = typeof data === 'object' ? data : {};
        let result = new LvtdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicle_id"] = this.vehicle_id;
        data["vehicle_"] = this.vehicle_ ? this.vehicle_.toJSON() : <any>undefined;
        data["vehiclePC_"] = this.vehiclePC_ ? this.vehiclePC_.toJSON() : <any>undefined;
        data["vehicleViewPC_"] = this.vehicleViewPC_ ? this.vehicleViewPC_.toJSON() : <any>undefined;
        data["vehicleGain_"] = this.vehicleGain_ ? this.vehicleGain_.toJSON() : <any>undefined;
        data["discount_"] = this.discount_ ? this.discount_.toJSON() : <any>undefined;
        data["number_of_free_rights"] = this.number_of_free_rights;
        if (Array.isArray(this.extser_)) {
            data["extser_"] = [];
            for (let item of this.extser_)
                data["extser_"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILvtdDto {
    id?: number;
    vehicle_id?: number;
    vehicle_?: VehicleDto | undefined;
    vehiclePC_?: VehiclePCDto | undefined;
    vehicleViewPC_?: VehicleViewDto | undefined;
    vehicleGain_?: VehicleGainDto | undefined;
    discount_?: DiscountDto | undefined;
    number_of_free_rights?: number;
    extser_?: ExtraServiceDto[] | undefined;
}

export class VehicleDto implements IVehicleDto {
    carrier_id?: number;
    type?: string | undefined;
    typeR?: string | undefined;
    title?: string | undefined;
    maxpax?: number;
    photo_?: PhotoDto | undefined;
    info_?: VehicleInfoDto | undefined;
    spec_?: VehicleSpecDto | undefined;
    hour_?: VehicleHourDto | undefined;
    img?: string | undefined;

    constructor(data?: IVehicleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.carrier_id = _data["carrier_id"];
            this.type = _data["type"];
            this.typeR = _data["typeR"];
            this.title = _data["title"];
            this.maxpax = _data["maxpax"];
            this.photo_ = _data["photo_"] ? PhotoDto.fromJS(_data["photo_"]) : <any>undefined;
            this.info_ = _data["info_"] ? VehicleInfoDto.fromJS(_data["info_"]) : <any>undefined;
            this.spec_ = _data["spec_"] ? VehicleSpecDto.fromJS(_data["spec_"]) : <any>undefined;
            this.hour_ = _data["hour_"] ? VehicleHourDto.fromJS(_data["hour_"]) : <any>undefined;
            this.img = _data["img"];
        }
    }

    static fromJS(data: any): VehicleDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrier_id"] = this.carrier_id;
        data["type"] = this.type;
        data["typeR"] = this.typeR;
        data["title"] = this.title;
        data["maxpax"] = this.maxpax;
        data["photo_"] = this.photo_ ? this.photo_.toJSON() : <any>undefined;
        data["info_"] = this.info_ ? this.info_.toJSON() : <any>undefined;
        data["spec_"] = this.spec_ ? this.spec_.toJSON() : <any>undefined;
        data["hour_"] = this.hour_ ? this.hour_.toJSON() : <any>undefined;
        data["img"] = this.img;
        return data; 
    }
}

export interface IVehicleDto {
    carrier_id?: number;
    type?: string | undefined;
    typeR?: string | undefined;
    title?: string | undefined;
    maxpax?: number;
    photo_?: PhotoDto | undefined;
    info_?: VehicleInfoDto | undefined;
    spec_?: VehicleSpecDto | undefined;
    hour_?: VehicleHourDto | undefined;
    img?: string | undefined;
}

export class PhotoDto implements IPhotoDto {
    big?: string | undefined;
    small?: string | undefined;

    constructor(data?: IPhotoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.big = _data["big"];
            this.small = _data["small"];
        }
    }

    static fromJS(data: any): PhotoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["big"] = this.big;
        data["small"] = this.small;
        return data; 
    }
}

export interface IPhotoDto {
    big?: string | undefined;
    small?: string | undefined;
}

export class VehicleInfoDto implements IVehicleInfoDto {
    descr?: string | undefined;
    suitcase?: string | undefined;

    constructor(data?: IVehicleInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.descr = _data["descr"];
            this.suitcase = _data["suitcase"];
        }
    }

    static fromJS(data: any): VehicleInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descr"] = this.descr;
        data["suitcase"] = this.suitcase;
        return data; 
    }
}

export interface IVehicleInfoDto {
    descr?: string | undefined;
    suitcase?: string | undefined;
}

export class VehicleSpecDto implements IVehicleSpecDto {
    aircon?: string | undefined;
    gpsflw?: string | undefined;

    constructor(data?: IVehicleSpecDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aircon = _data["aircon"];
            this.gpsflw = _data["gpsflw"];
        }
    }

    static fromJS(data: any): VehicleSpecDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleSpecDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aircon"] = this.aircon;
        data["gpsflw"] = this.gpsflw;
        return data; 
    }
}

export interface IVehicleSpecDto {
    aircon?: string | undefined;
    gpsflw?: string | undefined;
}

export class VehicleHourDto implements IVehicleHourDto {
    freeCancel?: string | undefined;
    freeChange?: string | undefined;
    booking?: string | undefined;

    constructor(data?: IVehicleHourDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.freeCancel = _data["freeCancel"];
            this.freeChange = _data["freeChange"];
            this.booking = _data["booking"];
        }
    }

    static fromJS(data: any): VehicleHourDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleHourDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["freeCancel"] = this.freeCancel;
        data["freeChange"] = this.freeChange;
        data["booking"] = this.booking;
        return data; 
    }
}

export interface IVehicleHourDto {
    freeCancel?: string | undefined;
    freeChange?: string | undefined;
    booking?: string | undefined;
}

export class VehiclePCDto implements IVehiclePCDto {
    prc?: number;
    cid?: number;

    constructor(data?: IVehiclePCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): VehiclePCDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehiclePCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IVehiclePCDto {
    prc?: number;
    cid?: number;
}

export class VehicleViewDto implements IVehicleViewDto {
    prc?: number;
    cid?: number;

    constructor(data?: IVehicleViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): VehicleViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IVehicleViewDto {
    prc?: number;
    cid?: number;
}

export class VehicleGainDto implements IVehicleGainDto {
    pr?: number;
    cr?: number;

    constructor(data?: IVehicleGainDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pr = _data["pr"];
            this.cr = _data["cr"];
        }
    }

    static fromJS(data: any): VehicleGainDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleGainDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pr"] = this.pr;
        data["cr"] = this.cr;
        return data; 
    }
}

export interface IVehicleGainDto {
    pr?: number;
    cr?: number;
}

export class DiscountDto implements IDiscountDto {
    prc_wod?: number;
    pct?: number;
    real_pct?: number;

    constructor(data?: IDiscountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc_wod = _data["prc_wod"];
            this.pct = _data["pct"];
            this.real_pct = _data["real_pct"];
        }
    }

    static fromJS(data: any): DiscountDto {
        data = typeof data === 'object' ? data : {};
        let result = new DiscountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc_wod"] = this.prc_wod;
        data["pct"] = this.pct;
        data["real_pct"] = this.real_pct;
        return data; 
    }
}

export interface IDiscountDto {
    prc_wod?: number;
    pct?: number;
    real_pct?: number;
}

export class ExtraServiceDto implements IExtraServiceDto {
    id?: number;
    name?: string | undefined;
    title?: string | undefined;
    info_?: ExtraServiceInfoDto | undefined;
    pc_?: ExtraServicePCDto | undefined;
    view_pc_?: ExtraServiceViewPCDto | undefined;
    uid?: string | undefined;
    gain_?: ExtraServiceGainDto | undefined;
    number_of_free_rights?: number;

    constructor(data?: IExtraServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.info_ = _data["info_"] ? ExtraServiceInfoDto.fromJS(_data["info_"]) : <any>undefined;
            this.pc_ = _data["pc_"] ? ExtraServicePCDto.fromJS(_data["pc_"]) : <any>undefined;
            this.view_pc_ = _data["view_pc_"] ? ExtraServiceViewPCDto.fromJS(_data["view_pc_"]) : <any>undefined;
            this.uid = _data["uid"];
            this.gain_ = _data["gain_"] ? ExtraServiceGainDto.fromJS(_data["gain_"]) : <any>undefined;
            this.number_of_free_rights = _data["number_of_free_rights"];
        }
    }

    static fromJS(data: any): ExtraServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["title"] = this.title;
        data["info_"] = this.info_ ? this.info_.toJSON() : <any>undefined;
        data["pc_"] = this.pc_ ? this.pc_.toJSON() : <any>undefined;
        data["view_pc_"] = this.view_pc_ ? this.view_pc_.toJSON() : <any>undefined;
        data["uid"] = this.uid;
        data["gain_"] = this.gain_ ? this.gain_.toJSON() : <any>undefined;
        data["number_of_free_rights"] = this.number_of_free_rights;
        return data; 
    }
}

export interface IExtraServiceDto {
    id?: number;
    name?: string | undefined;
    title?: string | undefined;
    info_?: ExtraServiceInfoDto | undefined;
    pc_?: ExtraServicePCDto | undefined;
    view_pc_?: ExtraServiceViewPCDto | undefined;
    uid?: string | undefined;
    gain_?: ExtraServiceGainDto | undefined;
    number_of_free_rights?: number;
}

export class ExtraServiceInfoDto implements IExtraServiceInfoDto {
    text?: string | undefined;
    hint?: string | undefined;

    constructor(data?: IExtraServiceInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.hint = _data["hint"];
        }
    }

    static fromJS(data: any): ExtraServiceInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraServiceInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["hint"] = this.hint;
        return data; 
    }
}

export interface IExtraServiceInfoDto {
    text?: string | undefined;
    hint?: string | undefined;
}

export class ExtraServicePCDto implements IExtraServicePCDto {
    prc?: number;
    cid?: number;

    constructor(data?: IExtraServicePCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): ExtraServicePCDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraServicePCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IExtraServicePCDto {
    prc?: number;
    cid?: number;
}

export class ExtraServiceViewPCDto implements IExtraServiceViewPCDto {
    prc?: number;
    cid?: number;

    constructor(data?: IExtraServiceViewPCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): ExtraServiceViewPCDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraServiceViewPCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IExtraServiceViewPCDto {
    prc?: number;
    cid?: number;
}

export class ExtraServiceGainDto implements IExtraServiceGainDto {
    pr?: number;
    cr?: number;

    constructor(data?: IExtraServiceGainDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pr = _data["pr"];
            this.cr = _data["cr"];
        }
    }

    static fromJS(data: any): ExtraServiceGainDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraServiceGainDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pr"] = this.pr;
        data["cr"] = this.cr;
        return data; 
    }
}

export interface IExtraServiceGainDto {
    pr?: number;
    cr?: number;
}

export class TransferSearchRequestDto implements ITransferSearchRequestDto {
    fr?: string | undefined;
    to?: string | undefined;
    date?: Date;

    constructor(data?: ITransferSearchRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fr = _data["fr"];
            this.to = _data["to"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TransferSearchRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferSearchRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fr"] = this.fr;
        data["to"] = this.to;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITransferSearchRequestDto {
    fr?: string | undefined;
    to?: string | undefined;
    date?: Date;
}

export class CartTransferResultDto implements ICartTransferResultDto {
    cuid?: string | undefined;
    payment_?: PaymentDto | undefined;
    urinv_?: UrinvDto[] | undefined;

    constructor(data?: ICartTransferResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cuid = _data["cuid"];
            this.payment_ = _data["payment_"] ? PaymentDto.fromJS(_data["payment_"]) : <any>undefined;
            if (Array.isArray(_data["urinv_"])) {
                this.urinv_ = [] as any;
                for (let item of _data["urinv_"])
                    this.urinv_!.push(UrinvDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CartTransferResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartTransferResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cuid"] = this.cuid;
        data["payment_"] = this.payment_ ? this.payment_.toJSON() : <any>undefined;
        if (Array.isArray(this.urinv_)) {
            data["urinv_"] = [];
            for (let item of this.urinv_)
                data["urinv_"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICartTransferResultDto {
    cuid?: string | undefined;
    payment_?: PaymentDto | undefined;
    urinv_?: UrinvDto[] | undefined;
}

export class PaymentDto implements IPaymentDto {
    item_?: ItemDto | undefined;
    coupon_?: CouponDto | undefined;
    ttlPC_?: TtlPCDto | undefined;
    method_?: MethodDto | undefined;
    mT_?: MTDto | undefined;

    constructor(data?: IPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item_ = _data["item_"] ? ItemDto.fromJS(_data["item_"]) : <any>undefined;
            this.coupon_ = _data["coupon_"] ? CouponDto.fromJS(_data["coupon_"]) : <any>undefined;
            this.ttlPC_ = _data["ttlPC_"] ? TtlPCDto.fromJS(_data["ttlPC_"]) : <any>undefined;
            this.method_ = _data["method_"] ? MethodDto.fromJS(_data["method_"]) : <any>undefined;
            this.mT_ = _data["mT_"] ? MTDto.fromJS(_data["mT_"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item_"] = this.item_ ? this.item_.toJSON() : <any>undefined;
        data["coupon_"] = this.coupon_ ? this.coupon_.toJSON() : <any>undefined;
        data["ttlPC_"] = this.ttlPC_ ? this.ttlPC_.toJSON() : <any>undefined;
        data["method_"] = this.method_ ? this.method_.toJSON() : <any>undefined;
        data["mT_"] = this.mT_ ? this.mT_.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPaymentDto {
    item_?: ItemDto | undefined;
    coupon_?: CouponDto | undefined;
    ttlPC_?: TtlPCDto | undefined;
    method_?: MethodDto | undefined;
    mT_?: MTDto | undefined;
}

export class ItemDto implements IItemDto {
    vehiclePC_?: ItemVehiclePCDto | undefined;
    extser_?: ItemExtraServicePCDto[] | undefined;

    constructor(data?: IItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vehiclePC_ = _data["vehiclePC_"] ? ItemVehiclePCDto.fromJS(_data["vehiclePC_"]) : <any>undefined;
            if (Array.isArray(_data["extser_"])) {
                this.extser_ = [] as any;
                for (let item of _data["extser_"])
                    this.extser_!.push(ItemExtraServicePCDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehiclePC_"] = this.vehiclePC_ ? this.vehiclePC_.toJSON() : <any>undefined;
        if (Array.isArray(this.extser_)) {
            data["extser_"] = [];
            for (let item of this.extser_)
                data["extser_"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IItemDto {
    vehiclePC_?: ItemVehiclePCDto | undefined;
    extser_?: ItemExtraServicePCDto[] | undefined;
}

export class ItemVehiclePCDto implements IItemVehiclePCDto {
    prc?: number;
    cid?: number;

    constructor(data?: IItemVehiclePCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): ItemVehiclePCDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemVehiclePCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IItemVehiclePCDto {
    prc?: number;
    cid?: number;
}

export class ItemExtraServicePCDto implements IItemExtraServicePCDto {
    extser_id?: number;
    prc?: number;
    cid?: number;

    constructor(data?: IItemExtraServicePCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.extser_id = _data["extser_id"];
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): ItemExtraServicePCDto {
        data = typeof data === 'object' ? data : {};
        let result = new ItemExtraServicePCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extser_id"] = this.extser_id;
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IItemExtraServicePCDto {
    extser_id?: number;
    prc?: number;
    cid?: number;
}

export class CouponDto implements ICouponDto {
    discount?: string | undefined;
    pc_?: PcDto | undefined;
    coupon_code?: string | undefined;
    coupon_pgl?: string | undefined;
    coupon_pc_?: CouponPCDto | undefined;

    constructor(data?: ICouponDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.discount = _data["discount"];
            this.pc_ = _data["pc_"] ? PcDto.fromJS(_data["pc_"]) : <any>undefined;
            this.coupon_code = _data["coupon_code"];
            this.coupon_pgl = _data["coupon_pgl"];
            this.coupon_pc_ = _data["coupon_pc_"] ? CouponPCDto.fromJS(_data["coupon_pc_"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CouponDto {
        data = typeof data === 'object' ? data : {};
        let result = new CouponDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discount"] = this.discount;
        data["pc_"] = this.pc_ ? this.pc_.toJSON() : <any>undefined;
        data["coupon_code"] = this.coupon_code;
        data["coupon_pgl"] = this.coupon_pgl;
        data["coupon_pc_"] = this.coupon_pc_ ? this.coupon_pc_.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICouponDto {
    discount?: string | undefined;
    pc_?: PcDto | undefined;
    coupon_code?: string | undefined;
    coupon_pgl?: string | undefined;
    coupon_pc_?: CouponPCDto | undefined;
}

export class PcDto implements IPcDto {
    prc?: number;
    cid?: number;

    constructor(data?: IPcDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): PcDto {
        data = typeof data === 'object' ? data : {};
        let result = new PcDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface IPcDto {
    prc?: number;
    cid?: number;
}

export class CouponPCDto implements ICouponPCDto {
    prc?: number;
    cid?: number;

    constructor(data?: ICouponPCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): CouponPCDto {
        data = typeof data === 'object' ? data : {};
        let result = new CouponPCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface ICouponPCDto {
    prc?: number;
    cid?: number;
}

export class TtlPCDto implements ITtlPCDto {
    prc?: number;
    cid?: number;

    constructor(data?: ITtlPCDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prc = _data["prc"];
            this.cid = _data["cid"];
        }
    }

    static fromJS(data: any): TtlPCDto {
        data = typeof data === 'object' ? data : {};
        let result = new TtlPCDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prc"] = this.prc;
        data["cid"] = this.cid;
        return data; 
    }
}

export interface ITtlPCDto {
    prc?: number;
    cid?: number;
}

export class MethodDto implements IMethodDto {
    cc?: boolean;
    mt?: boolean;

    constructor(data?: IMethodDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cc = _data["cc"];
            this.mt = _data["mt"];
        }
    }

    static fromJS(data: any): MethodDto {
        data = typeof data === 'object' ? data : {};
        let result = new MethodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cc"] = this.cc;
        data["mt"] = this.mt;
        return data; 
    }
}

export interface IMethodDto {
    cc?: boolean;
    mt?: boolean;
}

export class MTDto implements IMTDto {
    bacc_?: BaccDto[] | undefined;

    constructor(data?: IMTDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["bacc_"])) {
                this.bacc_ = [] as any;
                for (let item of _data["bacc_"])
                    this.bacc_!.push(BaccDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MTDto {
        data = typeof data === 'object' ? data : {};
        let result = new MTDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.bacc_)) {
            data["bacc_"] = [];
            for (let item of this.bacc_)
                data["bacc_"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMTDto {
    bacc_?: BaccDto[] | undefined;
}

export class BaccDto implements IBaccDto {
    name?: string | undefined;
    suko?: string | undefined;
    heno?: string | undefined;
    iban?: string | undefined;
    cuco?: string | undefined;
    code?: string | undefined;

    constructor(data?: IBaccDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.suko = _data["suko"];
            this.heno = _data["heno"];
            this.iban = _data["iban"];
            this.cuco = _data["cuco"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): BaccDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaccDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["suko"] = this.suko;
        data["heno"] = this.heno;
        data["iban"] = this.iban;
        data["cuco"] = this.cuco;
        data["code"] = this.code;
        return data; 
    }
}

export interface IBaccDto {
    name?: string | undefined;
    suko?: string | undefined;
    heno?: string | undefined;
    iban?: string | undefined;
    cuco?: string | undefined;
    code?: string | undefined;
}

export class UrinvDto implements IUrinvDto {
    urinv_id?: number;
    title?: string | undefined;
    taxid?: string | undefined;
    taxof?: string | undefined;
    adr?: string | undefined;
    adra?: string | undefined;
    adrb?: string | undefined;
    email?: string | undefined;
    type?: string | undefined;
    typeR?: string | undefined;

    constructor(data?: IUrinvDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.urinv_id = _data["urinv_id"];
            this.title = _data["title"];
            this.taxid = _data["taxid"];
            this.taxof = _data["taxof"];
            this.adr = _data["adr"];
            this.adra = _data["adra"];
            this.adrb = _data["adrb"];
            this.email = _data["email"];
            this.type = _data["type"];
            this.typeR = _data["typeR"];
        }
    }

    static fromJS(data: any): UrinvDto {
        data = typeof data === 'object' ? data : {};
        let result = new UrinvDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["urinv_id"] = this.urinv_id;
        data["title"] = this.title;
        data["taxid"] = this.taxid;
        data["taxof"] = this.taxof;
        data["adr"] = this.adr;
        data["adra"] = this.adra;
        data["adrb"] = this.adrb;
        data["email"] = this.email;
        data["type"] = this.type;
        data["typeR"] = this.typeR;
        return data; 
    }
}

export interface IUrinvDto {
    urinv_id?: number;
    title?: string | undefined;
    taxid?: string | undefined;
    taxof?: string | undefined;
    adr?: string | undefined;
    adra?: string | undefined;
    adrb?: string | undefined;
    email?: string | undefined;
    type?: string | undefined;
    typeR?: string | undefined;
}

export class PreCheckoutTransferCommand implements IPreCheckoutTransferCommand {
    preCheckoutInfo?: CartTransferRequestDtoUi | undefined;
    sendNotificationToPax?: boolean;
    fr_a?: string | undefined;
    fr_b?: string | undefined;
    to_a?: string | undefined;
    to_b?: string | undefined;
    pax_name?: string | undefined;
    pax_email?: string | undefined;
    pax_phone?: string | undefined;
    pax_idno?: string | undefined;
    pax_nationality?: string | undefined;
    pax_?: PaxDto[] | undefined;
    pax_adult?: number | undefined;
    pax_child?: number | undefined;
    pax_baby?: number | undefined;
    note_ur?: string | undefined;
    price?: number;

    constructor(data?: IPreCheckoutTransferCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preCheckoutInfo = _data["preCheckoutInfo"] ? CartTransferRequestDtoUi.fromJS(_data["preCheckoutInfo"]) : <any>undefined;
            this.sendNotificationToPax = _data["sendNotificationToPax"];
            this.fr_a = _data["fr_a"];
            this.fr_b = _data["fr_b"];
            this.to_a = _data["to_a"];
            this.to_b = _data["to_b"];
            this.pax_name = _data["pax_name"];
            this.pax_email = _data["pax_email"];
            this.pax_phone = _data["pax_phone"];
            this.pax_idno = _data["pax_idno"];
            this.pax_nationality = _data["pax_nationality"];
            if (Array.isArray(_data["pax_"])) {
                this.pax_ = [] as any;
                for (let item of _data["pax_"])
                    this.pax_!.push(PaxDto.fromJS(item));
            }
            this.pax_adult = _data["pax_adult"];
            this.pax_child = _data["pax_child"];
            this.pax_baby = _data["pax_baby"];
            this.note_ur = _data["note_ur"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): PreCheckoutTransferCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PreCheckoutTransferCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preCheckoutInfo"] = this.preCheckoutInfo ? this.preCheckoutInfo.toJSON() : <any>undefined;
        data["sendNotificationToPax"] = this.sendNotificationToPax;
        data["fr_a"] = this.fr_a;
        data["fr_b"] = this.fr_b;
        data["to_a"] = this.to_a;
        data["to_b"] = this.to_b;
        data["pax_name"] = this.pax_name;
        data["pax_email"] = this.pax_email;
        data["pax_phone"] = this.pax_phone;
        data["pax_idno"] = this.pax_idno;
        data["pax_nationality"] = this.pax_nationality;
        if (Array.isArray(this.pax_)) {
            data["pax_"] = [];
            for (let item of this.pax_)
                data["pax_"].push(item.toJSON());
        }
        data["pax_adult"] = this.pax_adult;
        data["pax_child"] = this.pax_child;
        data["pax_baby"] = this.pax_baby;
        data["note_ur"] = this.note_ur;
        data["price"] = this.price;
        return data; 
    }
}

export interface IPreCheckoutTransferCommand {
    preCheckoutInfo?: CartTransferRequestDtoUi | undefined;
    sendNotificationToPax?: boolean;
    fr_a?: string | undefined;
    fr_b?: string | undefined;
    to_a?: string | undefined;
    to_b?: string | undefined;
    pax_name?: string | undefined;
    pax_email?: string | undefined;
    pax_phone?: string | undefined;
    pax_idno?: string | undefined;
    pax_nationality?: string | undefined;
    pax_?: PaxDto[] | undefined;
    pax_adult?: number | undefined;
    pax_child?: number | undefined;
    pax_baby?: number | undefined;
    note_ur?: string | undefined;
    price?: number;
}

export class CartTransferRequestDtoUi implements ICartTransferRequestDtoUi {
    suid?: string | undefined;
    lvtd_id?: number;
    extsers?: ExtserDto[] | undefined;
    coupon?: string | undefined;

    constructor(data?: ICartTransferRequestDtoUi) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.suid = _data["suid"];
            this.lvtd_id = _data["lvtd_id"];
            if (Array.isArray(_data["extsers"])) {
                this.extsers = [] as any;
                for (let item of _data["extsers"])
                    this.extsers!.push(ExtserDto.fromJS(item));
            }
            this.coupon = _data["coupon"];
        }
    }

    static fromJS(data: any): CartTransferRequestDtoUi {
        data = typeof data === 'object' ? data : {};
        let result = new CartTransferRequestDtoUi();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["suid"] = this.suid;
        data["lvtd_id"] = this.lvtd_id;
        if (Array.isArray(this.extsers)) {
            data["extsers"] = [];
            for (let item of this.extsers)
                data["extsers"].push(item.toJSON());
        }
        data["coupon"] = this.coupon;
        return data; 
    }
}

export interface ICartTransferRequestDtoUi {
    suid?: string | undefined;
    lvtd_id?: number;
    extsers?: ExtserDto[] | undefined;
    coupon?: string | undefined;
}

export class ExtserDto implements IExtserDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IExtserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExtserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IExtserDto {
    id?: number;
    name?: string | undefined;
}

export class PaxDto implements IPaxDto {
    name?: string | undefined;
    idno?: string | undefined;
    type?: string | undefined;
    nationality?: string | undefined;

    constructor(data?: IPaxDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.idno = _data["idno"];
            this.type = _data["type"];
            this.nationality = _data["nationality"];
        }
    }

    static fromJS(data: any): PaxDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaxDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["idno"] = this.idno;
        data["type"] = this.type;
        data["nationality"] = this.nationality;
        return data; 
    }
}

export interface IPaxDto {
    name?: string | undefined;
    idno?: string | undefined;
    type?: string | undefined;
    nationality?: string | undefined;
}

export class CreateTransferOrderResponseDto implements ICreateTransferOrderResponseDto {
    trackingId?: string | undefined;

    constructor(data?: ICreateTransferOrderResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trackingId = _data["trackingId"];
        }
    }

    static fromJS(data: any): CreateTransferOrderResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTransferOrderResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackingId"] = this.trackingId;
        return data; 
    }
}

export interface ICreateTransferOrderResponseDto {
    trackingId?: string | undefined;
}

export class CheckoutTransferCommand implements ICheckoutTransferCommand {
    basketId?: string | undefined;

    constructor(data?: ICheckoutTransferCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.basketId = _data["basketId"];
        }
    }

    static fromJS(data: any): CheckoutTransferCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CheckoutTransferCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basketId"] = this.basketId;
        return data; 
    }
}

export interface ICheckoutTransferCommand {
    basketId?: string | undefined;
}

export class CancelTransferResultDto implements ICancelTransferResultDto {
    result?: boolean;

    constructor(data?: ICancelTransferResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): CancelTransferResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelTransferResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface ICancelTransferResultDto {
    result?: boolean;
}

export class TransferCancelRequestDto implements ITransferCancelRequestDto {
    trnsfr_code?: string | undefined;
    extser?: string | undefined;

    constructor(data?: ITransferCancelRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trnsfr_code = _data["trnsfr_code"];
            this.extser = _data["extser"];
        }
    }

    static fromJS(data: any): TransferCancelRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferCancelRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trnsfr_code"] = this.trnsfr_code;
        data["extser"] = this.extser;
        return data; 
    }
}

export interface ITransferCancelRequestDto {
    trnsfr_code?: string | undefined;
    extser?: string | undefined;
}

export class UpdateTransferResult implements IUpdateTransferResult {
    result?: boolean;

    constructor(data?: IUpdateTransferResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): UpdateTransferResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTransferResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface IUpdateTransferResult {
    result?: boolean;
}

export class TransferSaveRequestDto implements ITransferSaveRequestDto {
    trnsfr_code?: string | undefined;
    cart_code_?: ExtserDto[] | undefined;
    fr_a?: string | undefined;
    fr_b?: string | undefined;
    to_a?: string | undefined;
    to_b?: string | undefined;
    date?: Date;
    pax_name?: string | undefined;
    pax_email?: string | undefined;
    pax_phone?: string | undefined;
    pax_idno?: string | undefined;
    pax_nationality?: string | undefined;
    pax_?: PaxDto[] | undefined;
    note_ur?: string | undefined;

    constructor(data?: ITransferSaveRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trnsfr_code = _data["trnsfr_code"];
            if (Array.isArray(_data["cart_code_"])) {
                this.cart_code_ = [] as any;
                for (let item of _data["cart_code_"])
                    this.cart_code_!.push(ExtserDto.fromJS(item));
            }
            this.fr_a = _data["fr_a"];
            this.fr_b = _data["fr_b"];
            this.to_a = _data["to_a"];
            this.to_b = _data["to_b"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.pax_name = _data["pax_name"];
            this.pax_email = _data["pax_email"];
            this.pax_phone = _data["pax_phone"];
            this.pax_idno = _data["pax_idno"];
            this.pax_nationality = _data["pax_nationality"];
            if (Array.isArray(_data["pax_"])) {
                this.pax_ = [] as any;
                for (let item of _data["pax_"])
                    this.pax_!.push(PaxDto.fromJS(item));
            }
            this.note_ur = _data["note_ur"];
        }
    }

    static fromJS(data: any): TransferSaveRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransferSaveRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trnsfr_code"] = this.trnsfr_code;
        if (Array.isArray(this.cart_code_)) {
            data["cart_code_"] = [];
            for (let item of this.cart_code_)
                data["cart_code_"].push(item.toJSON());
        }
        data["fr_a"] = this.fr_a;
        data["fr_b"] = this.fr_b;
        data["to_a"] = this.to_a;
        data["to_b"] = this.to_b;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["pax_name"] = this.pax_name;
        data["pax_email"] = this.pax_email;
        data["pax_phone"] = this.pax_phone;
        data["pax_idno"] = this.pax_idno;
        data["pax_nationality"] = this.pax_nationality;
        if (Array.isArray(this.pax_)) {
            data["pax_"] = [];
            for (let item of this.pax_)
                data["pax_"].push(item.toJSON());
        }
        data["note_ur"] = this.note_ur;
        return data; 
    }
}

export interface ITransferSaveRequestDto {
    trnsfr_code?: string | undefined;
    cart_code_?: ExtserDto[] | undefined;
    fr_a?: string | undefined;
    fr_b?: string | undefined;
    to_a?: string | undefined;
    to_b?: string | undefined;
    date?: Date;
    pax_name?: string | undefined;
    pax_email?: string | undefined;
    pax_phone?: string | undefined;
    pax_idno?: string | undefined;
    pax_nationality?: string | undefined;
    pax_?: PaxDto[] | undefined;
    note_ur?: string | undefined;
}

export class GetBasketDto implements IGetBasketDto {
    uniqueBasketId?: string | undefined;
    basketDetail?: BasketDetailDto[] | undefined;

    constructor(data?: IGetBasketDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uniqueBasketId = _data["uniqueBasketId"];
            if (Array.isArray(_data["basketDetail"])) {
                this.basketDetail = [] as any;
                for (let item of _data["basketDetail"])
                    this.basketDetail!.push(BasketDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBasketDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBasketDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uniqueBasketId"] = this.uniqueBasketId;
        if (Array.isArray(this.basketDetail)) {
            data["basketDetail"] = [];
            for (let item of this.basketDetail)
                data["basketDetail"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBasketDto {
    uniqueBasketId?: string | undefined;
    basketDetail?: BasketDetailDto[] | undefined;
}

export class BasketDetailDto implements IBasketDetailDto {
    id?: string | undefined;
    startPoint?: string | undefined;
    endpoint?: string | undefined;
    date?: Date;
    serviceName?: string | undefined;
    detail?: string | undefined;
    price?: number;
    discountPrice?: number;
    imageUrl?: string | undefined;

    constructor(data?: IBasketDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startPoint = _data["startPoint"];
            this.endpoint = _data["endpoint"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.serviceName = _data["serviceName"];
            this.detail = _data["detail"];
            this.price = _data["price"];
            this.discountPrice = _data["discountPrice"];
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): BasketDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new BasketDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startPoint"] = this.startPoint;
        data["endpoint"] = this.endpoint;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["serviceName"] = this.serviceName;
        data["detail"] = this.detail;
        data["price"] = this.price;
        data["discountPrice"] = this.discountPrice;
        data["imageUrl"] = this.imageUrl;
        return data; 
    }
}

export interface IBasketDetailDto {
    id?: string | undefined;
    startPoint?: string | undefined;
    endpoint?: string | undefined;
    date?: Date;
    serviceName?: string | undefined;
    detail?: string | undefined;
    price?: number;
    discountPrice?: number;
    imageUrl?: string | undefined;
}

export class RemoveTransferFromBasketResultDto implements IRemoveTransferFromBasketResultDto {
    result?: boolean;

    constructor(data?: IRemoveTransferFromBasketResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): RemoveTransferFromBasketResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveTransferFromBasketResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface IRemoveTransferFromBasketResultDto {
    result?: boolean;
}

export class RemoveBasketCommand implements IRemoveBasketCommand {
    id?: string | undefined;

    constructor(data?: IRemoveBasketCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveBasketCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveBasketCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemoveBasketCommand {
    id?: string | undefined;
}

export class AddInvoiceAddressResultDto implements IAddInvoiceAddressResultDto {
    result?: boolean;

    constructor(data?: IAddInvoiceAddressResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): AddInvoiceAddressResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddInvoiceAddressResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data; 
    }
}

export interface IAddInvoiceAddressResultDto {
    result?: boolean;
}

export class AddInvoiceCommand implements IAddInvoiceCommand {
    id?: string | undefined;
    taxNo?: string | undefined;
    title?: string | undefined;
    taxoffice?: string | undefined;
    province?: string | undefined;
    district?: string | undefined;
    invoiceAddress?: string | undefined;
    addressDetail?: string | undefined;
    email?: string | undefined;
    type?: string | undefined;

    constructor(data?: IAddInvoiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.taxNo = _data["taxNo"];
            this.title = _data["title"];
            this.taxoffice = _data["taxoffice"];
            this.province = _data["province"];
            this.district = _data["district"];
            this.invoiceAddress = _data["invoiceAddress"];
            this.addressDetail = _data["addressDetail"];
            this.email = _data["email"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AddInvoiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddInvoiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["taxNo"] = this.taxNo;
        data["title"] = this.title;
        data["taxoffice"] = this.taxoffice;
        data["province"] = this.province;
        data["district"] = this.district;
        data["invoiceAddress"] = this.invoiceAddress;
        data["addressDetail"] = this.addressDetail;
        data["email"] = this.email;
        data["type"] = this.type;
        return data; 
    }
}

export interface IAddInvoiceCommand {
    id?: string | undefined;
    taxNo?: string | undefined;
    title?: string | undefined;
    taxoffice?: string | undefined;
    province?: string | undefined;
    district?: string | undefined;
    invoiceAddress?: string | undefined;
    addressDetail?: string | undefined;
    email?: string | undefined;
    type?: string | undefined;
}

export class CreateCartOrderResultDto implements ICreateCartOrderResultDto {
    trackingId?: string | undefined;

    constructor(data?: ICreateCartOrderResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trackingId = _data["trackingId"];
        }
    }

    static fromJS(data: any): CreateCartOrderResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCartOrderResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackingId"] = this.trackingId;
        return data; 
    }
}

export interface ICreateCartOrderResultDto {
    trackingId?: string | undefined;
}

export class CreateCartOrderCommand implements ICreateCartOrderCommand {
    buyCartDto?: BuyCartDto | undefined;
    integration?: RequestIntegrationType;

    constructor(data?: ICreateCartOrderCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buyCartDto = _data["buyCartDto"] ? BuyCartDto.fromJS(_data["buyCartDto"]) : <any>undefined;
            this.integration = _data["integration"];
        }
    }

    static fromJS(data: any): CreateCartOrderCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCartOrderCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buyCartDto"] = this.buyCartDto ? this.buyCartDto.toJSON() : <any>undefined;
        data["integration"] = this.integration;
        return data; 
    }
}

export interface ICreateCartOrderCommand {
    buyCartDto?: BuyCartDto | undefined;
    integration?: RequestIntegrationType;
}

export class BuyCartDto implements IBuyCartDto {
    userId?: string | undefined;
    nationalityId?: number | undefined;
    invoiceType?: InvoiceType | undefined;
    companyAddress?: CompanyInvoiceAddressDto | undefined;
    personalAddress?: PersonalInvoiceAddressDto | undefined;
    address?: AddressDto | undefined;
    homePhoneNumber?: string | undefined;
    fax?: string | undefined;
    isMarried?: boolean;
    marriedDate?: Date | undefined;
    isInvoiceAndDeliveryAddressSame?: boolean;
    membershipId?: number;
    price?: number;
    discountedPrice?: number;
    electronicMessagePermission?: boolean;
    agreementTextAccept?: boolean;

    constructor(data?: IBuyCartDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.nationalityId = _data["nationalityId"];
            this.invoiceType = _data["invoiceType"];
            this.companyAddress = _data["companyAddress"] ? CompanyInvoiceAddressDto.fromJS(_data["companyAddress"]) : <any>undefined;
            this.personalAddress = _data["personalAddress"] ? PersonalInvoiceAddressDto.fromJS(_data["personalAddress"]) : <any>undefined;
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : <any>undefined;
            this.homePhoneNumber = _data["homePhoneNumber"];
            this.fax = _data["fax"];
            this.isMarried = _data["isMarried"];
            this.marriedDate = _data["marriedDate"] ? new Date(_data["marriedDate"].toString()) : <any>undefined;
            this.isInvoiceAndDeliveryAddressSame = _data["isInvoiceAndDeliveryAddressSame"];
            this.membershipId = _data["membershipId"];
            this.price = _data["price"];
            this.discountedPrice = _data["discountedPrice"];
            this.electronicMessagePermission = _data["electronicMessagePermission"];
            this.agreementTextAccept = _data["agreementTextAccept"];
        }
    }

    static fromJS(data: any): BuyCartDto {
        data = typeof data === 'object' ? data : {};
        let result = new BuyCartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["nationalityId"] = this.nationalityId;
        data["invoiceType"] = this.invoiceType;
        data["companyAddress"] = this.companyAddress ? this.companyAddress.toJSON() : <any>undefined;
        data["personalAddress"] = this.personalAddress ? this.personalAddress.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["homePhoneNumber"] = this.homePhoneNumber;
        data["fax"] = this.fax;
        data["isMarried"] = this.isMarried;
        data["marriedDate"] = this.marriedDate ? this.marriedDate.toISOString() : <any>undefined;
        data["isInvoiceAndDeliveryAddressSame"] = this.isInvoiceAndDeliveryAddressSame;
        data["membershipId"] = this.membershipId;
        data["price"] = this.price;
        data["discountedPrice"] = this.discountedPrice;
        data["electronicMessagePermission"] = this.electronicMessagePermission;
        data["agreementTextAccept"] = this.agreementTextAccept;
        return data; 
    }
}

export interface IBuyCartDto {
    userId?: string | undefined;
    nationalityId?: number | undefined;
    invoiceType?: InvoiceType | undefined;
    companyAddress?: CompanyInvoiceAddressDto | undefined;
    personalAddress?: PersonalInvoiceAddressDto | undefined;
    address?: AddressDto | undefined;
    homePhoneNumber?: string | undefined;
    fax?: string | undefined;
    isMarried?: boolean;
    marriedDate?: Date | undefined;
    isInvoiceAndDeliveryAddressSame?: boolean;
    membershipId?: number;
    price?: number;
    discountedPrice?: number;
    electronicMessagePermission?: boolean;
    agreementTextAccept?: boolean;
}

export enum InvoiceType {
    Company = 1,
    Personal = 2,
}

export class AddressDto implements IAddressDto {
    countryId?: number;
    cityId?: number;
    districtId?: number;
    address?: string | undefined;
    postCode?: string | undefined;
    email?: string | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryId = _data["countryId"];
            this.cityId = _data["cityId"];
            this.districtId = _data["districtId"];
            this.address = _data["address"];
            this.postCode = _data["postCode"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryId"] = this.countryId;
        data["cityId"] = this.cityId;
        data["districtId"] = this.districtId;
        data["address"] = this.address;
        data["postCode"] = this.postCode;
        data["email"] = this.email;
        return data; 
    }
}

export interface IAddressDto {
    countryId?: number;
    cityId?: number;
    districtId?: number;
    address?: string | undefined;
    postCode?: string | undefined;
    email?: string | undefined;
}

export class CompanyInvoiceAddressDto extends AddressDto implements ICompanyInvoiceAddressDto {
    companyName?: string | undefined;
    taxOffice?: string | undefined;
    taxNumber?: string | undefined;
    email?: string | undefined;

    constructor(data?: ICompanyInvoiceAddressDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.companyName = _data["companyName"];
            this.taxOffice = _data["taxOffice"];
            this.taxNumber = _data["taxNumber"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CompanyInvoiceAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyInvoiceAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["taxOffice"] = this.taxOffice;
        data["taxNumber"] = this.taxNumber;
        data["email"] = this.email;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompanyInvoiceAddressDto extends IAddressDto {
    companyName?: string | undefined;
    taxOffice?: string | undefined;
    taxNumber?: string | undefined;
    email?: string | undefined;
}

export class PersonalInvoiceAddressDto extends AddressDto implements IPersonalInvoiceAddressDto {
    email?: string | undefined;
    identityNumber?: string | undefined;

    constructor(data?: IPersonalInvoiceAddressDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.email = _data["email"];
            this.identityNumber = _data["identityNumber"];
        }
    }

    static fromJS(data: any): PersonalInvoiceAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalInvoiceAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["identityNumber"] = this.identityNumber;
        super.toJSON(data);
        return data; 
    }
}

export interface IPersonalInvoiceAddressDto extends IAddressDto {
    email?: string | undefined;
    identityNumber?: string | undefined;
}

export class SetOrderStatusResponseDto implements ISetOrderStatusResponseDto {
    response?: boolean;

    constructor(data?: ISetOrderStatusResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): SetOrderStatusResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetOrderStatusResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        return data; 
    }
}

export interface ISetOrderStatusResponseDto {
    response?: boolean;
}

export class SetOrderStatusDto implements ISetOrderStatusDto {
    trackingNumber?: string | undefined;
    posResponse?: string | undefined;
    status?: CondoOrderStatusEnum;
    orderNo?: string | undefined;
    key?: string | undefined;

    constructor(data?: ISetOrderStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.trackingNumber = _data["trackingNumber"];
            this.posResponse = _data["posResponse"];
            this.status = _data["status"];
            this.orderNo = _data["orderNo"];
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): SetOrderStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetOrderStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackingNumber"] = this.trackingNumber;
        data["posResponse"] = this.posResponse;
        data["status"] = this.status;
        data["orderNo"] = this.orderNo;
        data["key"] = this.key;
        return data; 
    }
}

export interface ISetOrderStatusDto {
    trackingNumber?: string | undefined;
    posResponse?: string | undefined;
    status?: CondoOrderStatusEnum;
    orderNo?: string | undefined;
    key?: string | undefined;
}

export enum CondoOrderStatusEnum {
    Prepared = 1,
    Completed = 2,
    CommitFailed = 3,
    Refunded = 4,
    Void = 5,
    RefundFailed = 6,
    Unknown = 7,
}

export class ReportResultDto implements IReportResultDto {
    entries?: ReportEntry[] | undefined;

    constructor(data?: IReportResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entries"])) {
                this.entries = [] as any;
                for (let item of _data["entries"])
                    this.entries!.push(ReportEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReportResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entries)) {
            data["entries"] = [];
            for (let item of this.entries)
                data["entries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReportResultDto {
    entries?: ReportEntry[] | undefined;
}

export class ReportEntry implements IReportEntry {
    name?: string | undefined;
    series?: ReportSerie[] | undefined;

    constructor(data?: IReportEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["series"])) {
                this.series = [] as any;
                for (let item of _data["series"])
                    this.series!.push(ReportSerie.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ReportEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.series)) {
            data["series"] = [];
            for (let item of this.series)
                data["series"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReportEntry {
    name?: string | undefined;
    series?: ReportSerie[] | undefined;
}

export class ReportSerie implements IReportSerie {
    name?: string | undefined;
    value?: number;

    constructor(data?: IReportSerie) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ReportSerie {
        data = typeof data === 'object' ? data : {};
        let result = new ReportSerie();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface IReportSerie {
    name?: string | undefined;
    value?: number;
}

export class GetTransactionsDto implements IGetTransactionsDto {
    id?: string | undefined;
    name?: string | undefined;
    dateTime?: Date;
    price?: number;
    imageUrl?: string | undefined;
    transactionDetail?: string | undefined;
    userName?: string | undefined;
    userSurname?: string | undefined;
    phone?: string | undefined;
    status?: string | undefined;

    constructor(data?: IGetTransactionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.imageUrl = _data["imageUrl"];
            this.transactionDetail = _data["transactionDetail"];
            this.userName = _data["userName"];
            this.userSurname = _data["userSurname"];
            this.phone = _data["phone"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GetTransactionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransactionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["imageUrl"] = this.imageUrl;
        data["transactionDetail"] = this.transactionDetail;
        data["userName"] = this.userName;
        data["userSurname"] = this.userSurname;
        data["phone"] = this.phone;
        data["status"] = this.status;
        return data; 
    }
}

export interface IGetTransactionsDto {
    id?: string | undefined;
    name?: string | undefined;
    dateTime?: Date;
    price?: number;
    imageUrl?: string | undefined;
    transactionDetail?: string | undefined;
    userName?: string | undefined;
    userSurname?: string | undefined;
    phone?: string | undefined;
    status?: string | undefined;
}

export enum TransactionStatus {
    Planned = 1,
    Completed = 2,
    Cancelled = 3,
}

export class GetPassedTransactionDto implements IGetPassedTransactionDto {
    name?: string | undefined;
    price?: number;
    date?: Date;

    constructor(data?: IGetPassedTransactionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPassedTransactionDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetPassedTransactionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetPassedTransactionDto {
    name?: string | undefined;
    price?: number;
    date?: Date;
}

export class GetTransactionDetailDto implements IGetTransactionDetailDto {
    transactionDetailNo?: string | undefined;
    bookingNumber?: string | undefined;
    status?: string | undefined;
    userNote?: string | undefined;
    vehicleTitle?: string | undefined;
    userName?: string | undefined;
    userPhoneNumber?: string | undefined;
    userIdentityNo?: string | undefined;
    userSurname?: string | undefined;
    startPoint?: string | undefined;
    spDetail?: string | undefined;
    spDescription?: string | undefined;
    endPoint?: string | undefined;
    epDetail?: string | undefined;
    epDescription?: string | undefined;
    siteName?: string | undefined;
    date?: Date;
    dateR?: string | undefined;
    userEmail?: string | undefined;
    transactionName?: string | undefined;
    carImage?: string | undefined;
    carTypeR?: string | undefined;
    driverName?: string | undefined;
    carPlateNumber?: string | undefined;
    driverPhoneNumber?: string | undefined;
    isCanCancel?: boolean;
    isCanChange?: boolean;
    passengers?: PassengerDto[] | undefined;
    paymentDetail?: PaymentDetailDto | undefined;
    extras?: ExtraDto[] | undefined;

    constructor(data?: IGetTransactionDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionDetailNo = _data["transactionDetailNo"];
            this.bookingNumber = _data["bookingNumber"];
            this.status = _data["status"];
            this.userNote = _data["userNote"];
            this.vehicleTitle = _data["vehicleTitle"];
            this.userName = _data["userName"];
            this.userPhoneNumber = _data["userPhoneNumber"];
            this.userIdentityNo = _data["userIdentityNo"];
            this.userSurname = _data["userSurname"];
            this.startPoint = _data["startPoint"];
            this.spDetail = _data["spDetail"];
            this.spDescription = _data["spDescription"];
            this.endPoint = _data["endPoint"];
            this.epDetail = _data["epDetail"];
            this.epDescription = _data["epDescription"];
            this.siteName = _data["siteName"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.dateR = _data["dateR"];
            this.userEmail = _data["userEmail"];
            this.transactionName = _data["transactionName"];
            this.carImage = _data["carImage"];
            this.carTypeR = _data["carTypeR"];
            this.driverName = _data["driverName"];
            this.carPlateNumber = _data["carPlateNumber"];
            this.driverPhoneNumber = _data["driverPhoneNumber"];
            this.isCanCancel = _data["isCanCancel"];
            this.isCanChange = _data["isCanChange"];
            if (Array.isArray(_data["passengers"])) {
                this.passengers = [] as any;
                for (let item of _data["passengers"])
                    this.passengers!.push(PassengerDto.fromJS(item));
            }
            this.paymentDetail = _data["paymentDetail"] ? PaymentDetailDto.fromJS(_data["paymentDetail"]) : <any>undefined;
            if (Array.isArray(_data["extras"])) {
                this.extras = [] as any;
                for (let item of _data["extras"])
                    this.extras!.push(ExtraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTransactionDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransactionDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionDetailNo"] = this.transactionDetailNo;
        data["bookingNumber"] = this.bookingNumber;
        data["status"] = this.status;
        data["userNote"] = this.userNote;
        data["vehicleTitle"] = this.vehicleTitle;
        data["userName"] = this.userName;
        data["userPhoneNumber"] = this.userPhoneNumber;
        data["userIdentityNo"] = this.userIdentityNo;
        data["userSurname"] = this.userSurname;
        data["startPoint"] = this.startPoint;
        data["spDetail"] = this.spDetail;
        data["spDescription"] = this.spDescription;
        data["endPoint"] = this.endPoint;
        data["epDetail"] = this.epDetail;
        data["epDescription"] = this.epDescription;
        data["siteName"] = this.siteName;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dateR"] = this.dateR;
        data["userEmail"] = this.userEmail;
        data["transactionName"] = this.transactionName;
        data["carImage"] = this.carImage;
        data["carTypeR"] = this.carTypeR;
        data["driverName"] = this.driverName;
        data["carPlateNumber"] = this.carPlateNumber;
        data["driverPhoneNumber"] = this.driverPhoneNumber;
        data["isCanCancel"] = this.isCanCancel;
        data["isCanChange"] = this.isCanChange;
        if (Array.isArray(this.passengers)) {
            data["passengers"] = [];
            for (let item of this.passengers)
                data["passengers"].push(item.toJSON());
        }
        data["paymentDetail"] = this.paymentDetail ? this.paymentDetail.toJSON() : <any>undefined;
        if (Array.isArray(this.extras)) {
            data["extras"] = [];
            for (let item of this.extras)
                data["extras"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTransactionDetailDto {
    transactionDetailNo?: string | undefined;
    bookingNumber?: string | undefined;
    status?: string | undefined;
    userNote?: string | undefined;
    vehicleTitle?: string | undefined;
    userName?: string | undefined;
    userPhoneNumber?: string | undefined;
    userIdentityNo?: string | undefined;
    userSurname?: string | undefined;
    startPoint?: string | undefined;
    spDetail?: string | undefined;
    spDescription?: string | undefined;
    endPoint?: string | undefined;
    epDetail?: string | undefined;
    epDescription?: string | undefined;
    siteName?: string | undefined;
    date?: Date;
    dateR?: string | undefined;
    userEmail?: string | undefined;
    transactionName?: string | undefined;
    carImage?: string | undefined;
    carTypeR?: string | undefined;
    driverName?: string | undefined;
    carPlateNumber?: string | undefined;
    driverPhoneNumber?: string | undefined;
    isCanCancel?: boolean;
    isCanChange?: boolean;
    passengers?: PassengerDto[] | undefined;
    paymentDetail?: PaymentDetailDto | undefined;
    extras?: ExtraDto[] | undefined;
}

export class PassengerDto implements IPassengerDto {
    name?: string | undefined;
    identityNumber?: string | undefined;
    phone?: string | undefined;
    country?: string | undefined;
    note?: string | undefined;

    constructor(data?: IPassengerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.identityNumber = _data["identityNumber"];
            this.phone = _data["phone"];
            this.country = _data["country"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): PassengerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PassengerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["identityNumber"] = this.identityNumber;
        data["phone"] = this.phone;
        data["country"] = this.country;
        data["note"] = this.note;
        return data; 
    }
}

export interface IPassengerDto {
    name?: string | undefined;
    identityNumber?: string | undefined;
    phone?: string | undefined;
    country?: string | undefined;
    note?: string | undefined;
}

export class PaymentDetailDto implements IPaymentDetailDto {
    paymentType?: string | undefined;
    userName?: string | undefined;
    userSurname?: string | undefined;
    email?: string | undefined;
    note?: string | undefined;
    invoiceAddress?: string | undefined;
    invoiceUserName?: string | undefined;
    invoiceUserSurname?: string | undefined;
    date?: Date;
    revervationTime?: Date;
    invoicePhoneNumber?: string | undefined;
    totalPrice?: number;
    price?: number;

    constructor(data?: IPaymentDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentType = _data["paymentType"];
            this.userName = _data["userName"];
            this.userSurname = _data["userSurname"];
            this.email = _data["email"];
            this.note = _data["note"];
            this.invoiceAddress = _data["invoiceAddress"];
            this.invoiceUserName = _data["invoiceUserName"];
            this.invoiceUserSurname = _data["invoiceUserSurname"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.revervationTime = _data["revervationTime"] ? new Date(_data["revervationTime"].toString()) : <any>undefined;
            this.invoicePhoneNumber = _data["invoicePhoneNumber"];
            this.totalPrice = _data["totalPrice"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): PaymentDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentType"] = this.paymentType;
        data["userName"] = this.userName;
        data["userSurname"] = this.userSurname;
        data["email"] = this.email;
        data["note"] = this.note;
        data["invoiceAddress"] = this.invoiceAddress;
        data["invoiceUserName"] = this.invoiceUserName;
        data["invoiceUserSurname"] = this.invoiceUserSurname;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["revervationTime"] = this.revervationTime ? this.revervationTime.toISOString() : <any>undefined;
        data["invoicePhoneNumber"] = this.invoicePhoneNumber;
        data["totalPrice"] = this.totalPrice;
        data["price"] = this.price;
        return data; 
    }
}

export interface IPaymentDetailDto {
    paymentType?: string | undefined;
    userName?: string | undefined;
    userSurname?: string | undefined;
    email?: string | undefined;
    note?: string | undefined;
    invoiceAddress?: string | undefined;
    invoiceUserName?: string | undefined;
    invoiceUserSurname?: string | undefined;
    date?: Date;
    revervationTime?: Date;
    invoicePhoneNumber?: string | undefined;
    totalPrice?: number;
    price?: number;
}

export class ExtraDto implements IExtraDto {
    name?: string | undefined;
    price?: number;
    count?: number;
    value?: string | undefined;
    description?: string | undefined;

    constructor(data?: IExtraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.count = _data["count"];
            this.value = _data["value"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ExtraDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["count"] = this.count;
        data["value"] = this.value;
        data["description"] = this.description;
        return data; 
    }
}

export interface IExtraDto {
    name?: string | undefined;
    price?: number;
    count?: number;
    value?: string | undefined;
    description?: string | undefined;
}

export class PaginatedListOfOrderPropertyDetailsDto implements IPaginatedListOfOrderPropertyDetailsDto {
    items?: OrderPropertyDetailsDto[] | undefined;
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfOrderPropertyDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderPropertyDetailsDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfOrderPropertyDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfOrderPropertyDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data; 
    }
}

export interface IPaginatedListOfOrderPropertyDetailsDto {
    items?: OrderPropertyDetailsDto[] | undefined;
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class OrderPropertyDetailsDto implements IOrderPropertyDetailsDto {
    transactionNo?: string | undefined;
    serviceName?: string | undefined;
    transactionDate?: Date;
    customerName?: string | undefined;
    customerPhoneNumber?: string | undefined;
    price?: number;
    detail?: OrderDetailDto | undefined;

    constructor(data?: IOrderPropertyDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionNo = _data["transactionNo"];
            this.serviceName = _data["serviceName"];
            this.transactionDate = _data["transactionDate"] ? new Date(_data["transactionDate"].toString()) : <any>undefined;
            this.customerName = _data["customerName"];
            this.customerPhoneNumber = _data["customerPhoneNumber"];
            this.price = _data["price"];
            this.detail = _data["detail"] ? OrderDetailDto.fromJS(_data["detail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderPropertyDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderPropertyDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionNo"] = this.transactionNo;
        data["serviceName"] = this.serviceName;
        data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : <any>undefined;
        data["customerName"] = this.customerName;
        data["customerPhoneNumber"] = this.customerPhoneNumber;
        data["price"] = this.price;
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderPropertyDetailsDto {
    transactionNo?: string | undefined;
    serviceName?: string | undefined;
    transactionDate?: Date;
    customerName?: string | undefined;
    customerPhoneNumber?: string | undefined;
    price?: number;
    detail?: OrderDetailDto | undefined;
}

export class OrderDetailDto implements IOrderDetailDto {
    status?: TransactionStatus;
    reservationNo?: string | undefined;
    customerPhoto?: string | undefined;
    customerSegment?: string | undefined;
    customerEmail?: string | undefined;
    nationality?: string | undefined;
    customerId?: string | undefined;
    startPoint?: string | undefined;
    startPointDescription?: string | undefined;
    startPointDetail?: string | undefined;
    endPoint?: string | undefined;
    endPointDescription?: string | undefined;
    endPointDetail?: string | undefined;
    carDetail?: LvtdDto | undefined;
    citizenNumber?: string | undefined;
    transferNote?: string | undefined;
    reservationDate?: Date | undefined;
    extras?: ExtraDto[] | undefined;

    constructor(data?: IOrderDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.reservationNo = _data["reservationNo"];
            this.customerPhoto = _data["customerPhoto"];
            this.customerSegment = _data["customerSegment"];
            this.customerEmail = _data["customerEmail"];
            this.nationality = _data["nationality"];
            this.customerId = _data["customerId"];
            this.startPoint = _data["startPoint"];
            this.startPointDescription = _data["startPointDescription"];
            this.startPointDetail = _data["startPointDetail"];
            this.endPoint = _data["endPoint"];
            this.endPointDescription = _data["endPointDescription"];
            this.endPointDetail = _data["endPointDetail"];
            this.carDetail = _data["carDetail"] ? LvtdDto.fromJS(_data["carDetail"]) : <any>undefined;
            this.citizenNumber = _data["citizenNumber"];
            this.transferNote = _data["transferNote"];
            this.reservationDate = _data["reservationDate"] ? new Date(_data["reservationDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["extras"])) {
                this.extras = [] as any;
                for (let item of _data["extras"])
                    this.extras!.push(ExtraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["reservationNo"] = this.reservationNo;
        data["customerPhoto"] = this.customerPhoto;
        data["customerSegment"] = this.customerSegment;
        data["customerEmail"] = this.customerEmail;
        data["nationality"] = this.nationality;
        data["customerId"] = this.customerId;
        data["startPoint"] = this.startPoint;
        data["startPointDescription"] = this.startPointDescription;
        data["startPointDetail"] = this.startPointDetail;
        data["endPoint"] = this.endPoint;
        data["endPointDescription"] = this.endPointDescription;
        data["endPointDetail"] = this.endPointDetail;
        data["carDetail"] = this.carDetail ? this.carDetail.toJSON() : <any>undefined;
        data["citizenNumber"] = this.citizenNumber;
        data["transferNote"] = this.transferNote;
        data["reservationDate"] = this.reservationDate ? this.reservationDate.toISOString() : <any>undefined;
        if (Array.isArray(this.extras)) {
            data["extras"] = [];
            for (let item of this.extras)
                data["extras"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderDetailDto {
    status?: TransactionStatus;
    reservationNo?: string | undefined;
    customerPhoto?: string | undefined;
    customerSegment?: string | undefined;
    customerEmail?: string | undefined;
    nationality?: string | undefined;
    customerId?: string | undefined;
    startPoint?: string | undefined;
    startPointDescription?: string | undefined;
    startPointDetail?: string | undefined;
    endPoint?: string | undefined;
    endPointDescription?: string | undefined;
    endPointDetail?: string | undefined;
    carDetail?: LvtdDto | undefined;
    citizenNumber?: string | undefined;
    transferNote?: string | undefined;
    reservationDate?: Date | undefined;
    extras?: ExtraDto[] | undefined;
}

export class GetOrderPropertyDetailQuery implements IGetOrderPropertyDetailQuery {
    pageNumber?: number;
    pageSize?: number;
    transactionNo?: string | undefined;
    serviceName?: string | undefined;
    customerName?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    status?: TransactionStatus;
    phone?: string | undefined;

    constructor(data?: IGetOrderPropertyDetailQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.transactionNo = _data["transactionNo"];
            this.serviceName = _data["serviceName"];
            this.customerName = _data["customerName"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): GetOrderPropertyDetailQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrderPropertyDetailQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["transactionNo"] = this.transactionNo;
        data["serviceName"] = this.serviceName;
        data["customerName"] = this.customerName;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["phone"] = this.phone;
        return data; 
    }
}

export interface IGetOrderPropertyDetailQuery {
    pageNumber?: number;
    pageSize?: number;
    transactionNo?: string | undefined;
    serviceName?: string | undefined;
    customerName?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    status?: TransactionStatus;
    phone?: string | undefined;
}

export class UpdateVerisoftCustomerCommand implements IUpdateVerisoftCustomerCommand {
    customer_ID?: number;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    sex?: string | undefined;
    birthDate?: Date;
    nationality?: number;
    identityNumber?: string | undefined;
    cardPropertyGroup_ID?: number;
    customerStatus_ID?: VerisoftTAVCustomerStatus;
    customerPeriod_ID?: number;
    nameOnCard?: string | undefined;
    infoMail?: string | undefined;
    maritialStatus?: string | undefined;
    maritialDate?: Date;
    contactInfo?: ContactInfoDto | undefined;
    businessInfo?: BusinessInfoDto | undefined;
    payments?: PaymentsDto[] | undefined;
    card?: CardDto | undefined;

    constructor(data?: IUpdateVerisoftCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer_ID = _data["customer_ID"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.sex = _data["sex"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.nationality = _data["nationality"];
            this.identityNumber = _data["identityNumber"];
            this.cardPropertyGroup_ID = _data["cardPropertyGroup_ID"];
            this.customerStatus_ID = _data["customerStatus_ID"];
            this.customerPeriod_ID = _data["customerPeriod_ID"];
            this.nameOnCard = _data["nameOnCard"];
            this.infoMail = _data["infoMail"];
            this.maritialStatus = _data["maritialStatus"];
            this.maritialDate = _data["maritialDate"] ? new Date(_data["maritialDate"].toString()) : <any>undefined;
            this.contactInfo = _data["contactInfo"] ? ContactInfoDto.fromJS(_data["contactInfo"]) : <any>undefined;
            this.businessInfo = _data["businessInfo"] ? BusinessInfoDto.fromJS(_data["businessInfo"]) : <any>undefined;
            if (Array.isArray(_data["payments"])) {
                this.payments = [] as any;
                for (let item of _data["payments"])
                    this.payments!.push(PaymentsDto.fromJS(item));
            }
            this.card = _data["card"] ? CardDto.fromJS(_data["card"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateVerisoftCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateVerisoftCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer_ID"] = this.customer_ID;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["sex"] = this.sex;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["nationality"] = this.nationality;
        data["identityNumber"] = this.identityNumber;
        data["cardPropertyGroup_ID"] = this.cardPropertyGroup_ID;
        data["customerStatus_ID"] = this.customerStatus_ID;
        data["customerPeriod_ID"] = this.customerPeriod_ID;
        data["nameOnCard"] = this.nameOnCard;
        data["infoMail"] = this.infoMail;
        data["maritialStatus"] = this.maritialStatus;
        data["maritialDate"] = this.maritialDate ? this.maritialDate.toISOString() : <any>undefined;
        data["contactInfo"] = this.contactInfo ? this.contactInfo.toJSON() : <any>undefined;
        data["businessInfo"] = this.businessInfo ? this.businessInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.payments)) {
            data["payments"] = [];
            for (let item of this.payments)
                data["payments"].push(item.toJSON());
        }
        data["card"] = this.card ? this.card.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUpdateVerisoftCustomerCommand {
    customer_ID?: number;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    sex?: string | undefined;
    birthDate?: Date;
    nationality?: number;
    identityNumber?: string | undefined;
    cardPropertyGroup_ID?: number;
    customerStatus_ID?: VerisoftTAVCustomerStatus;
    customerPeriod_ID?: number;
    nameOnCard?: string | undefined;
    infoMail?: string | undefined;
    maritialStatus?: string | undefined;
    maritialDate?: Date;
    contactInfo?: ContactInfoDto | undefined;
    businessInfo?: BusinessInfoDto | undefined;
    payments?: PaymentsDto[] | undefined;
    card?: CardDto | undefined;
}

export class ContactInfoDto implements IContactInfoDto {
    country_ID?: number;
    city_ID?: number;
    county_ID?: number;
    address?: string | undefined;
    mobile?: string | undefined;
    mobile2?: string | undefined;
    phone1?: string | undefined;
    phone2?: string | undefined;
    email1?: string | undefined;
    email2?: string | undefined;
    fax?: string | undefined;
    contactType_ID?: string | undefined;
    postCode?: string | undefined;
    deliveryAddress?: VerisfotDeliveryAddress;
    deliveryNote?: string | undefined;

    constructor(data?: IContactInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country_ID = _data["country_ID"];
            this.city_ID = _data["city_ID"];
            this.county_ID = _data["county_ID"];
            this.address = _data["address"];
            this.mobile = _data["mobile"];
            this.mobile2 = _data["mobile2"];
            this.phone1 = _data["phone1"];
            this.phone2 = _data["phone2"];
            this.email1 = _data["email1"];
            this.email2 = _data["email2"];
            this.fax = _data["fax"];
            this.contactType_ID = _data["contactType_ID"];
            this.postCode = _data["postCode"];
            this.deliveryAddress = _data["deliveryAddress"];
            this.deliveryNote = _data["deliveryNote"];
        }
    }

    static fromJS(data: any): ContactInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country_ID"] = this.country_ID;
        data["city_ID"] = this.city_ID;
        data["county_ID"] = this.county_ID;
        data["address"] = this.address;
        data["mobile"] = this.mobile;
        data["mobile2"] = this.mobile2;
        data["phone1"] = this.phone1;
        data["phone2"] = this.phone2;
        data["email1"] = this.email1;
        data["email2"] = this.email2;
        data["fax"] = this.fax;
        data["contactType_ID"] = this.contactType_ID;
        data["postCode"] = this.postCode;
        data["deliveryAddress"] = this.deliveryAddress;
        data["deliveryNote"] = this.deliveryNote;
        return data; 
    }
}

export interface IContactInfoDto {
    country_ID?: number;
    city_ID?: number;
    county_ID?: number;
    address?: string | undefined;
    mobile?: string | undefined;
    mobile2?: string | undefined;
    phone1?: string | undefined;
    phone2?: string | undefined;
    email1?: string | undefined;
    email2?: string | undefined;
    fax?: string | undefined;
    contactType_ID?: string | undefined;
    postCode?: string | undefined;
    deliveryAddress?: VerisfotDeliveryAddress;
    deliveryNote?: string | undefined;
}

export enum VerisfotDeliveryAddress {
    Contact_address = 0,
    Billing_address = 1,
}

export class BusinessInfoDto implements IBusinessInfoDto {
    invoiceType?: VerisoftInvoiceType;
    company?: string | undefined;
    taxOffice?: string | undefined;
    taxNumber?: string | undefined;
    country_ID?: number;
    city_ID?: number;
    county_ID?: number;
    address?: string | undefined;
    mobile1?: string | undefined;
    mobile2?: string | undefined;
    phone1?: string | undefined;
    phone2?: string | undefined;
    email?: string | undefined;
    fax?: string | undefined;
    web?: string | undefined;
    postCode?: string | undefined;
    isContactAddress?: number;

    constructor(data?: IBusinessInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.invoiceType = _data["invoiceType"];
            this.company = _data["company"];
            this.taxOffice = _data["taxOffice"];
            this.taxNumber = _data["taxNumber"];
            this.country_ID = _data["country_ID"];
            this.city_ID = _data["city_ID"];
            this.county_ID = _data["county_ID"];
            this.address = _data["address"];
            this.mobile1 = _data["mobile1"];
            this.mobile2 = _data["mobile2"];
            this.phone1 = _data["phone1"];
            this.phone2 = _data["phone2"];
            this.email = _data["email"];
            this.fax = _data["fax"];
            this.web = _data["web"];
            this.postCode = _data["postCode"];
            this.isContactAddress = _data["isContactAddress"];
        }
    }

    static fromJS(data: any): BusinessInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invoiceType"] = this.invoiceType;
        data["company"] = this.company;
        data["taxOffice"] = this.taxOffice;
        data["taxNumber"] = this.taxNumber;
        data["country_ID"] = this.country_ID;
        data["city_ID"] = this.city_ID;
        data["county_ID"] = this.county_ID;
        data["address"] = this.address;
        data["mobile1"] = this.mobile1;
        data["mobile2"] = this.mobile2;
        data["phone1"] = this.phone1;
        data["phone2"] = this.phone2;
        data["email"] = this.email;
        data["fax"] = this.fax;
        data["web"] = this.web;
        data["postCode"] = this.postCode;
        data["isContactAddress"] = this.isContactAddress;
        return data; 
    }
}

export interface IBusinessInfoDto {
    invoiceType?: VerisoftInvoiceType;
    company?: string | undefined;
    taxOffice?: string | undefined;
    taxNumber?: string | undefined;
    country_ID?: number;
    city_ID?: number;
    county_ID?: number;
    address?: string | undefined;
    mobile1?: string | undefined;
    mobile2?: string | undefined;
    phone1?: string | undefined;
    phone2?: string | undefined;
    email?: string | undefined;
    fax?: string | undefined;
    web?: string | undefined;
    postCode?: string | undefined;
    isContactAddress?: number;
}

export enum VerisoftInvoiceType {
    Individual = 1,
    Institutional = 2,
}

export class PaymentsDto implements IPaymentsDto {
    amount?: number;
    provisionNo?: string | undefined;
    cardPropertyGroupBank_ID?: number;
    cardPropertyGroup_ID?: number;
    paymentDetail?: PaymentDetailDto2 | undefined;

    constructor(data?: IPaymentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.provisionNo = _data["provisionNo"];
            this.cardPropertyGroupBank_ID = _data["cardPropertyGroupBank_ID"];
            this.cardPropertyGroup_ID = _data["cardPropertyGroup_ID"];
            this.paymentDetail = _data["paymentDetail"] ? PaymentDetailDto2.fromJS(_data["paymentDetail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["provisionNo"] = this.provisionNo;
        data["cardPropertyGroupBank_ID"] = this.cardPropertyGroupBank_ID;
        data["cardPropertyGroup_ID"] = this.cardPropertyGroup_ID;
        data["paymentDetail"] = this.paymentDetail ? this.paymentDetail.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPaymentsDto {
    amount?: number;
    provisionNo?: string | undefined;
    cardPropertyGroupBank_ID?: number;
    cardPropertyGroup_ID?: number;
    paymentDetail?: PaymentDetailDto2 | undefined;
}

export class PaymentDetailDto2 implements IPaymentDetailDto2 {
    campaignName?: string | undefined;
    promoCode?: string | undefined;
    discountType?: VerisoftDiscountType;
    discountRate?: number;
    discountAmount?: number;

    constructor(data?: IPaymentDetailDto2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignName = _data["campaignName"];
            this.promoCode = _data["promoCode"];
            this.discountType = _data["discountType"];
            this.discountRate = _data["discountRate"];
            this.discountAmount = _data["discountAmount"];
        }
    }

    static fromJS(data: any): PaymentDetailDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDetailDto2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignName"] = this.campaignName;
        data["promoCode"] = this.promoCode;
        data["discountType"] = this.discountType;
        data["discountRate"] = this.discountRate;
        data["discountAmount"] = this.discountAmount;
        return data; 
    }
}

export interface IPaymentDetailDto2 {
    campaignName?: string | undefined;
    promoCode?: string | undefined;
    discountType?: VerisoftDiscountType;
    discountRate?: number;
    discountAmount?: number;
}

export enum VerisoftDiscountType {
    Ratio = 1,
    Fixed = 2,
}

export class CardDto implements ICardDto {
    card_ID?: number;
    cardNo?: string | undefined;
    nameOnCard?: string | undefined;
    expireDate?: Date;
    cardStatus?: string | undefined;

    constructor(data?: ICardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.card_ID = _data["card_ID"];
            this.cardNo = _data["cardNo"];
            this.nameOnCard = _data["nameOnCard"];
            this.expireDate = _data["expireDate"] ? new Date(_data["expireDate"].toString()) : <any>undefined;
            this.cardStatus = _data["cardStatus"];
        }
    }

    static fromJS(data: any): CardDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["card_ID"] = this.card_ID;
        data["cardNo"] = this.cardNo;
        data["nameOnCard"] = this.nameOnCard;
        data["expireDate"] = this.expireDate ? this.expireDate.toISOString() : <any>undefined;
        data["cardStatus"] = this.cardStatus;
        return data; 
    }
}

export interface ICardDto {
    card_ID?: number;
    cardNo?: string | undefined;
    nameOnCard?: string | undefined;
    expireDate?: Date;
    cardStatus?: string | undefined;
}

export class SendNotificationCommand implements ISendNotificationCommand {
    transactionId?: number;
    responseCode?: string | undefined;
    transactionDate?: string | undefined;
    customerId?: number;
    customerName?: string | undefined;
    cardNo?: string | undefined;
    cardPropertyGroupName?: string | undefined;
    cardTypeName?: string | undefined;
    entryType?: string | undefined;
    nameOnPOS?: string | undefined;
    propertyGroupName?: string | undefined;
    redeemCredit?: number;
    escortCount?: number;
    customerPeriod?: number;
    isQRTransaction?: boolean;
    state?: string | undefined;
    status?: string | undefined;
    isQuota?: boolean;
    quotaRemains?: number | undefined;

    constructor(data?: ISendNotificationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionId = _data["transactionId"];
            this.responseCode = _data["responseCode"];
            this.transactionDate = _data["transactionDate"];
            this.customerId = _data["customerId"];
            this.customerName = _data["customerName"];
            this.cardNo = _data["cardNo"];
            this.cardPropertyGroupName = _data["cardPropertyGroupName"];
            this.cardTypeName = _data["cardTypeName"];
            this.entryType = _data["entryType"];
            this.nameOnPOS = _data["nameOnPOS"];
            this.propertyGroupName = _data["propertyGroupName"];
            this.redeemCredit = _data["redeemCredit"];
            this.escortCount = _data["escortCount"];
            this.customerPeriod = _data["customerPeriod"];
            this.isQRTransaction = _data["isQRTransaction"];
            this.state = _data["state"];
            this.status = _data["status"];
            this.isQuota = _data["isQuota"];
            this.quotaRemains = _data["quotaRemains"];
        }
    }

    static fromJS(data: any): SendNotificationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendNotificationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId;
        data["responseCode"] = this.responseCode;
        data["transactionDate"] = this.transactionDate;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["cardNo"] = this.cardNo;
        data["cardPropertyGroupName"] = this.cardPropertyGroupName;
        data["cardTypeName"] = this.cardTypeName;
        data["entryType"] = this.entryType;
        data["nameOnPOS"] = this.nameOnPOS;
        data["propertyGroupName"] = this.propertyGroupName;
        data["redeemCredit"] = this.redeemCredit;
        data["escortCount"] = this.escortCount;
        data["customerPeriod"] = this.customerPeriod;
        data["isQRTransaction"] = this.isQRTransaction;
        data["state"] = this.state;
        data["status"] = this.status;
        data["isQuota"] = this.isQuota;
        data["quotaRemains"] = this.quotaRemains;
        return data; 
    }
}

export interface ISendNotificationCommand {
    transactionId?: number;
    responseCode?: string | undefined;
    transactionDate?: string | undefined;
    customerId?: number;
    customerName?: string | undefined;
    cardNo?: string | undefined;
    cardPropertyGroupName?: string | undefined;
    cardTypeName?: string | undefined;
    entryType?: string | undefined;
    nameOnPOS?: string | undefined;
    propertyGroupName?: string | undefined;
    redeemCredit?: number;
    escortCount?: number;
    customerPeriod?: number;
    isQRTransaction?: boolean;
    state?: string | undefined;
    status?: string | undefined;
    isQuota?: boolean;
    quotaRemains?: number | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}